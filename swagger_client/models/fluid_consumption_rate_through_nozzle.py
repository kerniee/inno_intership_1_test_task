# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FluidConsumptionRateThroughNozzle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'nozzle_color': 'AllOfFluidConsumptionRateThroughNozzleNozzleColor',
        'nozzle_pressure': 'AllOfFluidConsumptionRateThroughNozzleNozzlePressure',
        'fluid_consumption_rate': 'float'
    }

    attribute_map = {
        'id': 'id',
        'nozzle_color': 'nozzle_color',
        'nozzle_pressure': 'nozzle_pressure',
        'fluid_consumption_rate': 'fluid_consumption_rate'
    }

    def __init__(self, id=None, nozzle_color=None, nozzle_pressure=None, fluid_consumption_rate=None):  # noqa: E501
        """FluidConsumptionRateThroughNozzle - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._nozzle_color = None
        self._nozzle_pressure = None
        self._fluid_consumption_rate = None
        self.discriminator = None
        self.id = id
        self.nozzle_color = nozzle_color
        self.nozzle_pressure = nozzle_pressure
        self.fluid_consumption_rate = fluid_consumption_rate

    @property
    def id(self):
        """Gets the id of this FluidConsumptionRateThroughNozzle.  # noqa: E501


        :return: The id of this FluidConsumptionRateThroughNozzle.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FluidConsumptionRateThroughNozzle.


        :param id: The id of this FluidConsumptionRateThroughNozzle.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def nozzle_color(self):
        """Gets the nozzle_color of this FluidConsumptionRateThroughNozzle.  # noqa: E501


        :return: The nozzle_color of this FluidConsumptionRateThroughNozzle.  # noqa: E501
        :rtype: AllOfFluidConsumptionRateThroughNozzleNozzleColor
        """
        return self._nozzle_color

    @nozzle_color.setter
    def nozzle_color(self, nozzle_color):
        """Sets the nozzle_color of this FluidConsumptionRateThroughNozzle.


        :param nozzle_color: The nozzle_color of this FluidConsumptionRateThroughNozzle.  # noqa: E501
        :type: AllOfFluidConsumptionRateThroughNozzleNozzleColor
        """
        if nozzle_color is None:
            raise ValueError("Invalid value for `nozzle_color`, must not be `None`")  # noqa: E501

        self._nozzle_color = nozzle_color

    @property
    def nozzle_pressure(self):
        """Gets the nozzle_pressure of this FluidConsumptionRateThroughNozzle.  # noqa: E501


        :return: The nozzle_pressure of this FluidConsumptionRateThroughNozzle.  # noqa: E501
        :rtype: AllOfFluidConsumptionRateThroughNozzleNozzlePressure
        """
        return self._nozzle_pressure

    @nozzle_pressure.setter
    def nozzle_pressure(self, nozzle_pressure):
        """Sets the nozzle_pressure of this FluidConsumptionRateThroughNozzle.


        :param nozzle_pressure: The nozzle_pressure of this FluidConsumptionRateThroughNozzle.  # noqa: E501
        :type: AllOfFluidConsumptionRateThroughNozzleNozzlePressure
        """
        if nozzle_pressure is None:
            raise ValueError("Invalid value for `nozzle_pressure`, must not be `None`")  # noqa: E501

        self._nozzle_pressure = nozzle_pressure

    @property
    def fluid_consumption_rate(self):
        """Gets the fluid_consumption_rate of this FluidConsumptionRateThroughNozzle.  # noqa: E501


        :return: The fluid_consumption_rate of this FluidConsumptionRateThroughNozzle.  # noqa: E501
        :rtype: float
        """
        return self._fluid_consumption_rate

    @fluid_consumption_rate.setter
    def fluid_consumption_rate(self, fluid_consumption_rate):
        """Sets the fluid_consumption_rate of this FluidConsumptionRateThroughNozzle.


        :param fluid_consumption_rate: The fluid_consumption_rate of this FluidConsumptionRateThroughNozzle.  # noqa: E501
        :type: float
        """
        if fluid_consumption_rate is None:
            raise ValueError("Invalid value for `fluid_consumption_rate`, must not be `None`")  # noqa: E501

        self._fluid_consumption_rate = fluid_consumption_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FluidConsumptionRateThroughNozzle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FluidConsumptionRateThroughNozzle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
