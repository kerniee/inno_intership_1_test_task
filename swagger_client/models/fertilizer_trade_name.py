# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FertilizerTradeName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'subgroup': 'FertilizerSubgroup',
        'release_form': 'FertilizerReleaseForm',
        'soil_type': 'FertilizerSoilType',
        'name': 'str',
        'economy_type_s': 'bool',
        'economy_type_l': 'bool',
        'presowing_application_rate': 'str',
        'sowing_application_rate': 'str',
        'basic_application_rate': 'str',
        'top_dressing_application_rate_open': 'str',
        'top_dressing_application_rate_close': 'str',
        'leaf_dressing': 'str',
        'content_n': 'float',
        'content_p': 'float',
        'content_k': 'float',
        'content_ca': 'float',
        'content_mg': 'float',
        'content_s': 'float',
        'content_fe': 'float',
        'content_ag': 'float',
        'content_b': 'float',
        'content_mo': 'float',
        'content_mn': 'float',
        'content_cu': 'float',
        'content_zn': 'float',
        'content_co': 'float',
        'content_i': 'float',
        'content_v': 'float',
        'is_in_state_registry': 'bool',
        'culture_description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'subgroup': 'subgroup',
        'release_form': 'release_form',
        'soil_type': 'soil_type',
        'name': 'name',
        'economy_type_s': 'economy_type_s',
        'economy_type_l': 'economy_type_l',
        'presowing_application_rate': 'presowing_application_rate',
        'sowing_application_rate': 'sowing_application_rate',
        'basic_application_rate': 'basic_application_rate',
        'top_dressing_application_rate_open': 'top_dressing_application_rate_open',
        'top_dressing_application_rate_close': 'top_dressing_application_rate_close',
        'leaf_dressing': 'leaf_dressing',
        'content_n': 'content_n',
        'content_p': 'content_p',
        'content_k': 'content_k',
        'content_ca': 'content_ca',
        'content_mg': 'content_mg',
        'content_s': 'content_s',
        'content_fe': 'content_fe',
        'content_ag': 'content_ag',
        'content_b': 'content_b',
        'content_mo': 'content_mo',
        'content_mn': 'content_mn',
        'content_cu': 'content_cu',
        'content_zn': 'content_zn',
        'content_co': 'content_co',
        'content_i': 'content_i',
        'content_v': 'content_v',
        'is_in_state_registry': 'is_in_state_registry',
        'culture_description': 'culture_description'
    }

    def __init__(self, id=None, subgroup=None, release_form=None, soil_type=None, name=None, economy_type_s=None, economy_type_l=None, presowing_application_rate=None, sowing_application_rate=None, basic_application_rate=None, top_dressing_application_rate_open=None, top_dressing_application_rate_close=None, leaf_dressing=None, content_n=None, content_p=None, content_k=None, content_ca=None, content_mg=None, content_s=None, content_fe=None, content_ag=None, content_b=None, content_mo=None, content_mn=None, content_cu=None, content_zn=None, content_co=None, content_i=None, content_v=None, is_in_state_registry=None, culture_description=None):  # noqa: E501
        """FertilizerTradeName - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._subgroup = None
        self._release_form = None
        self._soil_type = None
        self._name = None
        self._economy_type_s = None
        self._economy_type_l = None
        self._presowing_application_rate = None
        self._sowing_application_rate = None
        self._basic_application_rate = None
        self._top_dressing_application_rate_open = None
        self._top_dressing_application_rate_close = None
        self._leaf_dressing = None
        self._content_n = None
        self._content_p = None
        self._content_k = None
        self._content_ca = None
        self._content_mg = None
        self._content_s = None
        self._content_fe = None
        self._content_ag = None
        self._content_b = None
        self._content_mo = None
        self._content_mn = None
        self._content_cu = None
        self._content_zn = None
        self._content_co = None
        self._content_i = None
        self._content_v = None
        self._is_in_state_registry = None
        self._culture_description = None
        self.discriminator = None
        self.id = id
        self.subgroup = subgroup
        self.release_form = release_form
        self.soil_type = soil_type
        self.name = name
        if economy_type_s is not None:
            self.economy_type_s = economy_type_s
        if economy_type_l is not None:
            self.economy_type_l = economy_type_l
        if presowing_application_rate is not None:
            self.presowing_application_rate = presowing_application_rate
        if sowing_application_rate is not None:
            self.sowing_application_rate = sowing_application_rate
        if basic_application_rate is not None:
            self.basic_application_rate = basic_application_rate
        if top_dressing_application_rate_open is not None:
            self.top_dressing_application_rate_open = top_dressing_application_rate_open
        if top_dressing_application_rate_close is not None:
            self.top_dressing_application_rate_close = top_dressing_application_rate_close
        if leaf_dressing is not None:
            self.leaf_dressing = leaf_dressing
        if content_n is not None:
            self.content_n = content_n
        if content_p is not None:
            self.content_p = content_p
        if content_k is not None:
            self.content_k = content_k
        if content_ca is not None:
            self.content_ca = content_ca
        if content_mg is not None:
            self.content_mg = content_mg
        if content_s is not None:
            self.content_s = content_s
        if content_fe is not None:
            self.content_fe = content_fe
        if content_ag is not None:
            self.content_ag = content_ag
        if content_b is not None:
            self.content_b = content_b
        if content_mo is not None:
            self.content_mo = content_mo
        if content_mn is not None:
            self.content_mn = content_mn
        if content_cu is not None:
            self.content_cu = content_cu
        if content_zn is not None:
            self.content_zn = content_zn
        if content_co is not None:
            self.content_co = content_co
        if content_i is not None:
            self.content_i = content_i
        if content_v is not None:
            self.content_v = content_v
        if is_in_state_registry is not None:
            self.is_in_state_registry = is_in_state_registry
        if culture_description is not None:
            self.culture_description = culture_description

    @property
    def id(self):
        """Gets the id of this FertilizerTradeName.  # noqa: E501


        :return: The id of this FertilizerTradeName.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FertilizerTradeName.


        :param id: The id of this FertilizerTradeName.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def subgroup(self):
        """Gets the subgroup of this FertilizerTradeName.  # noqa: E501


        :return: The subgroup of this FertilizerTradeName.  # noqa: E501
        :rtype: FertilizerSubgroup
        """
        return self._subgroup

    @subgroup.setter
    def subgroup(self, subgroup):
        """Sets the subgroup of this FertilizerTradeName.


        :param subgroup: The subgroup of this FertilizerTradeName.  # noqa: E501
        :type: FertilizerSubgroup
        """
        if subgroup is None:
            raise ValueError("Invalid value for `subgroup`, must not be `None`")  # noqa: E501

        self._subgroup = subgroup

    @property
    def release_form(self):
        """Gets the release_form of this FertilizerTradeName.  # noqa: E501


        :return: The release_form of this FertilizerTradeName.  # noqa: E501
        :rtype: FertilizerReleaseForm
        """
        return self._release_form

    @release_form.setter
    def release_form(self, release_form):
        """Sets the release_form of this FertilizerTradeName.


        :param release_form: The release_form of this FertilizerTradeName.  # noqa: E501
        :type: FertilizerReleaseForm
        """
        if release_form is None:
            raise ValueError("Invalid value for `release_form`, must not be `None`")  # noqa: E501

        self._release_form = release_form

    @property
    def soil_type(self):
        """Gets the soil_type of this FertilizerTradeName.  # noqa: E501


        :return: The soil_type of this FertilizerTradeName.  # noqa: E501
        :rtype: FertilizerSoilType
        """
        return self._soil_type

    @soil_type.setter
    def soil_type(self, soil_type):
        """Sets the soil_type of this FertilizerTradeName.


        :param soil_type: The soil_type of this FertilizerTradeName.  # noqa: E501
        :type: FertilizerSoilType
        """
        if soil_type is None:
            raise ValueError("Invalid value for `soil_type`, must not be `None`")  # noqa: E501

        self._soil_type = soil_type

    @property
    def name(self):
        """Gets the name of this FertilizerTradeName.  # noqa: E501


        :return: The name of this FertilizerTradeName.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FertilizerTradeName.


        :param name: The name of this FertilizerTradeName.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def economy_type_s(self):
        """Gets the economy_type_s of this FertilizerTradeName.  # noqa: E501


        :return: The economy_type_s of this FertilizerTradeName.  # noqa: E501
        :rtype: bool
        """
        return self._economy_type_s

    @economy_type_s.setter
    def economy_type_s(self, economy_type_s):
        """Sets the economy_type_s of this FertilizerTradeName.


        :param economy_type_s: The economy_type_s of this FertilizerTradeName.  # noqa: E501
        :type: bool
        """

        self._economy_type_s = economy_type_s

    @property
    def economy_type_l(self):
        """Gets the economy_type_l of this FertilizerTradeName.  # noqa: E501


        :return: The economy_type_l of this FertilizerTradeName.  # noqa: E501
        :rtype: bool
        """
        return self._economy_type_l

    @economy_type_l.setter
    def economy_type_l(self, economy_type_l):
        """Sets the economy_type_l of this FertilizerTradeName.


        :param economy_type_l: The economy_type_l of this FertilizerTradeName.  # noqa: E501
        :type: bool
        """

        self._economy_type_l = economy_type_l

    @property
    def presowing_application_rate(self):
        """Gets the presowing_application_rate of this FertilizerTradeName.  # noqa: E501


        :return: The presowing_application_rate of this FertilizerTradeName.  # noqa: E501
        :rtype: str
        """
        return self._presowing_application_rate

    @presowing_application_rate.setter
    def presowing_application_rate(self, presowing_application_rate):
        """Sets the presowing_application_rate of this FertilizerTradeName.


        :param presowing_application_rate: The presowing_application_rate of this FertilizerTradeName.  # noqa: E501
        :type: str
        """

        self._presowing_application_rate = presowing_application_rate

    @property
    def sowing_application_rate(self):
        """Gets the sowing_application_rate of this FertilizerTradeName.  # noqa: E501


        :return: The sowing_application_rate of this FertilizerTradeName.  # noqa: E501
        :rtype: str
        """
        return self._sowing_application_rate

    @sowing_application_rate.setter
    def sowing_application_rate(self, sowing_application_rate):
        """Sets the sowing_application_rate of this FertilizerTradeName.


        :param sowing_application_rate: The sowing_application_rate of this FertilizerTradeName.  # noqa: E501
        :type: str
        """

        self._sowing_application_rate = sowing_application_rate

    @property
    def basic_application_rate(self):
        """Gets the basic_application_rate of this FertilizerTradeName.  # noqa: E501


        :return: The basic_application_rate of this FertilizerTradeName.  # noqa: E501
        :rtype: str
        """
        return self._basic_application_rate

    @basic_application_rate.setter
    def basic_application_rate(self, basic_application_rate):
        """Sets the basic_application_rate of this FertilizerTradeName.


        :param basic_application_rate: The basic_application_rate of this FertilizerTradeName.  # noqa: E501
        :type: str
        """

        self._basic_application_rate = basic_application_rate

    @property
    def top_dressing_application_rate_open(self):
        """Gets the top_dressing_application_rate_open of this FertilizerTradeName.  # noqa: E501


        :return: The top_dressing_application_rate_open of this FertilizerTradeName.  # noqa: E501
        :rtype: str
        """
        return self._top_dressing_application_rate_open

    @top_dressing_application_rate_open.setter
    def top_dressing_application_rate_open(self, top_dressing_application_rate_open):
        """Sets the top_dressing_application_rate_open of this FertilizerTradeName.


        :param top_dressing_application_rate_open: The top_dressing_application_rate_open of this FertilizerTradeName.  # noqa: E501
        :type: str
        """

        self._top_dressing_application_rate_open = top_dressing_application_rate_open

    @property
    def top_dressing_application_rate_close(self):
        """Gets the top_dressing_application_rate_close of this FertilizerTradeName.  # noqa: E501


        :return: The top_dressing_application_rate_close of this FertilizerTradeName.  # noqa: E501
        :rtype: str
        """
        return self._top_dressing_application_rate_close

    @top_dressing_application_rate_close.setter
    def top_dressing_application_rate_close(self, top_dressing_application_rate_close):
        """Sets the top_dressing_application_rate_close of this FertilizerTradeName.


        :param top_dressing_application_rate_close: The top_dressing_application_rate_close of this FertilizerTradeName.  # noqa: E501
        :type: str
        """

        self._top_dressing_application_rate_close = top_dressing_application_rate_close

    @property
    def leaf_dressing(self):
        """Gets the leaf_dressing of this FertilizerTradeName.  # noqa: E501


        :return: The leaf_dressing of this FertilizerTradeName.  # noqa: E501
        :rtype: str
        """
        return self._leaf_dressing

    @leaf_dressing.setter
    def leaf_dressing(self, leaf_dressing):
        """Sets the leaf_dressing of this FertilizerTradeName.


        :param leaf_dressing: The leaf_dressing of this FertilizerTradeName.  # noqa: E501
        :type: str
        """

        self._leaf_dressing = leaf_dressing

    @property
    def content_n(self):
        """Gets the content_n of this FertilizerTradeName.  # noqa: E501


        :return: The content_n of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_n

    @content_n.setter
    def content_n(self, content_n):
        """Sets the content_n of this FertilizerTradeName.


        :param content_n: The content_n of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_n = content_n

    @property
    def content_p(self):
        """Gets the content_p of this FertilizerTradeName.  # noqa: E501


        :return: The content_p of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_p

    @content_p.setter
    def content_p(self, content_p):
        """Sets the content_p of this FertilizerTradeName.


        :param content_p: The content_p of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_p = content_p

    @property
    def content_k(self):
        """Gets the content_k of this FertilizerTradeName.  # noqa: E501


        :return: The content_k of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_k

    @content_k.setter
    def content_k(self, content_k):
        """Sets the content_k of this FertilizerTradeName.


        :param content_k: The content_k of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_k = content_k

    @property
    def content_ca(self):
        """Gets the content_ca of this FertilizerTradeName.  # noqa: E501


        :return: The content_ca of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_ca

    @content_ca.setter
    def content_ca(self, content_ca):
        """Sets the content_ca of this FertilizerTradeName.


        :param content_ca: The content_ca of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_ca = content_ca

    @property
    def content_mg(self):
        """Gets the content_mg of this FertilizerTradeName.  # noqa: E501


        :return: The content_mg of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_mg

    @content_mg.setter
    def content_mg(self, content_mg):
        """Sets the content_mg of this FertilizerTradeName.


        :param content_mg: The content_mg of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_mg = content_mg

    @property
    def content_s(self):
        """Gets the content_s of this FertilizerTradeName.  # noqa: E501


        :return: The content_s of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_s

    @content_s.setter
    def content_s(self, content_s):
        """Sets the content_s of this FertilizerTradeName.


        :param content_s: The content_s of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_s = content_s

    @property
    def content_fe(self):
        """Gets the content_fe of this FertilizerTradeName.  # noqa: E501


        :return: The content_fe of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_fe

    @content_fe.setter
    def content_fe(self, content_fe):
        """Sets the content_fe of this FertilizerTradeName.


        :param content_fe: The content_fe of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_fe = content_fe

    @property
    def content_ag(self):
        """Gets the content_ag of this FertilizerTradeName.  # noqa: E501


        :return: The content_ag of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_ag

    @content_ag.setter
    def content_ag(self, content_ag):
        """Sets the content_ag of this FertilizerTradeName.


        :param content_ag: The content_ag of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_ag = content_ag

    @property
    def content_b(self):
        """Gets the content_b of this FertilizerTradeName.  # noqa: E501


        :return: The content_b of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_b

    @content_b.setter
    def content_b(self, content_b):
        """Sets the content_b of this FertilizerTradeName.


        :param content_b: The content_b of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_b = content_b

    @property
    def content_mo(self):
        """Gets the content_mo of this FertilizerTradeName.  # noqa: E501


        :return: The content_mo of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_mo

    @content_mo.setter
    def content_mo(self, content_mo):
        """Sets the content_mo of this FertilizerTradeName.


        :param content_mo: The content_mo of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_mo = content_mo

    @property
    def content_mn(self):
        """Gets the content_mn of this FertilizerTradeName.  # noqa: E501


        :return: The content_mn of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_mn

    @content_mn.setter
    def content_mn(self, content_mn):
        """Sets the content_mn of this FertilizerTradeName.


        :param content_mn: The content_mn of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_mn = content_mn

    @property
    def content_cu(self):
        """Gets the content_cu of this FertilizerTradeName.  # noqa: E501


        :return: The content_cu of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_cu

    @content_cu.setter
    def content_cu(self, content_cu):
        """Sets the content_cu of this FertilizerTradeName.


        :param content_cu: The content_cu of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_cu = content_cu

    @property
    def content_zn(self):
        """Gets the content_zn of this FertilizerTradeName.  # noqa: E501


        :return: The content_zn of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_zn

    @content_zn.setter
    def content_zn(self, content_zn):
        """Sets the content_zn of this FertilizerTradeName.


        :param content_zn: The content_zn of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_zn = content_zn

    @property
    def content_co(self):
        """Gets the content_co of this FertilizerTradeName.  # noqa: E501


        :return: The content_co of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_co

    @content_co.setter
    def content_co(self, content_co):
        """Sets the content_co of this FertilizerTradeName.


        :param content_co: The content_co of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_co = content_co

    @property
    def content_i(self):
        """Gets the content_i of this FertilizerTradeName.  # noqa: E501


        :return: The content_i of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_i

    @content_i.setter
    def content_i(self, content_i):
        """Sets the content_i of this FertilizerTradeName.


        :param content_i: The content_i of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_i = content_i

    @property
    def content_v(self):
        """Gets the content_v of this FertilizerTradeName.  # noqa: E501


        :return: The content_v of this FertilizerTradeName.  # noqa: E501
        :rtype: float
        """
        return self._content_v

    @content_v.setter
    def content_v(self, content_v):
        """Sets the content_v of this FertilizerTradeName.


        :param content_v: The content_v of this FertilizerTradeName.  # noqa: E501
        :type: float
        """

        self._content_v = content_v

    @property
    def is_in_state_registry(self):
        """Gets the is_in_state_registry of this FertilizerTradeName.  # noqa: E501


        :return: The is_in_state_registry of this FertilizerTradeName.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_state_registry

    @is_in_state_registry.setter
    def is_in_state_registry(self, is_in_state_registry):
        """Sets the is_in_state_registry of this FertilizerTradeName.


        :param is_in_state_registry: The is_in_state_registry of this FertilizerTradeName.  # noqa: E501
        :type: bool
        """

        self._is_in_state_registry = is_in_state_registry

    @property
    def culture_description(self):
        """Gets the culture_description of this FertilizerTradeName.  # noqa: E501


        :return: The culture_description of this FertilizerTradeName.  # noqa: E501
        :rtype: str
        """
        return self._culture_description

    @culture_description.setter
    def culture_description(self, culture_description):
        """Sets the culture_description of this FertilizerTradeName.


        :param culture_description: The culture_description of this FertilizerTradeName.  # noqa: E501
        :type: str
        """

        self._culture_description = culture_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FertilizerTradeName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FertilizerTradeName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
