# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Fertilizer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_on_various_types_of_soils': 'str',
        'average_price': 'float',
        'basic_application_rate': 'str',
        'content_ag': 'float',
        'content_b': 'float',
        'content_ca': 'float',
        'content_co': 'float',
        'content_cu': 'float',
        'content_fe': 'float',
        'content_i': 'str',
        'content_k': 'float',
        'content_mg': 'float',
        'content_mn': 'float',
        'content_mo': 'float',
        'content_n': 'float',
        'content_p': 'float',
        'content_s': 'float',
        'content_v': 'str',
        'content_zn': 'float',
        'cultivated_crop': 'str',
        'cultivated_plant_group': 'str',
        'economy_type_l': 'bool',
        'economy_type_ls': 'bool',
        'economy_type_s': 'bool',
        'fertilizer_subtype': 'str',
        'fertilizer_type': 'str',
        'id': 'int',
        'is_in_state_registry': 'bool',
        'main_drug': 'str',
        'manufacturer': 'str',
        'name': 'str',
        'presowing_application_rate': 'str',
        'registrant': 'str',
        'registration_expiration_date': 'str',
        'release_from': 'str',
        'sowing_application_rate': 'str',
        'state_registration_number': 'str',
        'synonyms': 'str',
        'top_dressing_application_rate_close': 'str',
        'top_dressing_application_rate_open': 'str'
    }

    attribute_map = {
        'application_on_various_types_of_soils': 'applicationOnVariousTypesOfSoils',
        'average_price': 'averagePrice',
        'basic_application_rate': 'basicApplicationRate',
        'content_ag': 'contentAg',
        'content_b': 'contentB',
        'content_ca': 'contentCa',
        'content_co': 'contentCo',
        'content_cu': 'contentCu',
        'content_fe': 'contentFe',
        'content_i': 'contentI',
        'content_k': 'contentK',
        'content_mg': 'contentMg',
        'content_mn': 'contentMn',
        'content_mo': 'contentMo',
        'content_n': 'contentN',
        'content_p': 'contentP',
        'content_s': 'contentS',
        'content_v': 'contentV',
        'content_zn': 'contentZn',
        'cultivated_crop': 'cultivatedCrop',
        'cultivated_plant_group': 'cultivatedPlantGroup',
        'economy_type_l': 'economyTypeL',
        'economy_type_ls': 'economyTypeLS',
        'economy_type_s': 'economyTypeS',
        'fertilizer_subtype': 'fertilizerSubtype',
        'fertilizer_type': 'fertilizerType',
        'id': 'id',
        'is_in_state_registry': 'isInStateRegistry',
        'main_drug': 'mainDrug',
        'manufacturer': 'manufacturer',
        'name': 'name',
        'presowing_application_rate': 'presowingApplicationRate',
        'registrant': 'registrant',
        'registration_expiration_date': 'registrationExpirationDate',
        'release_from': 'releaseFrom',
        'sowing_application_rate': 'sowingApplicationRate',
        'state_registration_number': 'stateRegistrationNumber',
        'synonyms': 'synonyms',
        'top_dressing_application_rate_close': 'topDressingApplicationRateClose',
        'top_dressing_application_rate_open': 'topDressingApplicationRateOpen'
    }

    def __init__(self, application_on_various_types_of_soils=None, average_price=None, basic_application_rate=None, content_ag=None, content_b=None, content_ca=None, content_co=None, content_cu=None, content_fe=None, content_i=None, content_k=None, content_mg=None, content_mn=None, content_mo=None, content_n=None, content_p=None, content_s=None, content_v=None, content_zn=None, cultivated_crop=None, cultivated_plant_group=None, economy_type_l=None, economy_type_ls=None, economy_type_s=None, fertilizer_subtype=None, fertilizer_type=None, id=None, is_in_state_registry=None, main_drug=None, manufacturer=None, name=None, presowing_application_rate=None, registrant=None, registration_expiration_date=None, release_from=None, sowing_application_rate=None, state_registration_number=None, synonyms=None, top_dressing_application_rate_close=None, top_dressing_application_rate_open=None, _configuration=None):  # noqa: E501
        """Fertilizer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application_on_various_types_of_soils = None
        self._average_price = None
        self._basic_application_rate = None
        self._content_ag = None
        self._content_b = None
        self._content_ca = None
        self._content_co = None
        self._content_cu = None
        self._content_fe = None
        self._content_i = None
        self._content_k = None
        self._content_mg = None
        self._content_mn = None
        self._content_mo = None
        self._content_n = None
        self._content_p = None
        self._content_s = None
        self._content_v = None
        self._content_zn = None
        self._cultivated_crop = None
        self._cultivated_plant_group = None
        self._economy_type_l = None
        self._economy_type_ls = None
        self._economy_type_s = None
        self._fertilizer_subtype = None
        self._fertilizer_type = None
        self._id = None
        self._is_in_state_registry = None
        self._main_drug = None
        self._manufacturer = None
        self._name = None
        self._presowing_application_rate = None
        self._registrant = None
        self._registration_expiration_date = None
        self._release_from = None
        self._sowing_application_rate = None
        self._state_registration_number = None
        self._synonyms = None
        self._top_dressing_application_rate_close = None
        self._top_dressing_application_rate_open = None
        self.discriminator = None

        if application_on_various_types_of_soils is not None:
            self.application_on_various_types_of_soils = application_on_various_types_of_soils
        if average_price is not None:
            self.average_price = average_price
        if basic_application_rate is not None:
            self.basic_application_rate = basic_application_rate
        if content_ag is not None:
            self.content_ag = content_ag
        if content_b is not None:
            self.content_b = content_b
        if content_ca is not None:
            self.content_ca = content_ca
        if content_co is not None:
            self.content_co = content_co
        if content_cu is not None:
            self.content_cu = content_cu
        if content_fe is not None:
            self.content_fe = content_fe
        if content_i is not None:
            self.content_i = content_i
        if content_k is not None:
            self.content_k = content_k
        if content_mg is not None:
            self.content_mg = content_mg
        if content_mn is not None:
            self.content_mn = content_mn
        if content_mo is not None:
            self.content_mo = content_mo
        if content_n is not None:
            self.content_n = content_n
        if content_p is not None:
            self.content_p = content_p
        if content_s is not None:
            self.content_s = content_s
        if content_v is not None:
            self.content_v = content_v
        if content_zn is not None:
            self.content_zn = content_zn
        if cultivated_crop is not None:
            self.cultivated_crop = cultivated_crop
        if cultivated_plant_group is not None:
            self.cultivated_plant_group = cultivated_plant_group
        if economy_type_l is not None:
            self.economy_type_l = economy_type_l
        if economy_type_ls is not None:
            self.economy_type_ls = economy_type_ls
        if economy_type_s is not None:
            self.economy_type_s = economy_type_s
        if fertilizer_subtype is not None:
            self.fertilizer_subtype = fertilizer_subtype
        if fertilizer_type is not None:
            self.fertilizer_type = fertilizer_type
        if id is not None:
            self.id = id
        if is_in_state_registry is not None:
            self.is_in_state_registry = is_in_state_registry
        if main_drug is not None:
            self.main_drug = main_drug
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if name is not None:
            self.name = name
        if presowing_application_rate is not None:
            self.presowing_application_rate = presowing_application_rate
        if registrant is not None:
            self.registrant = registrant
        if registration_expiration_date is not None:
            self.registration_expiration_date = registration_expiration_date
        if release_from is not None:
            self.release_from = release_from
        if sowing_application_rate is not None:
            self.sowing_application_rate = sowing_application_rate
        if state_registration_number is not None:
            self.state_registration_number = state_registration_number
        if synonyms is not None:
            self.synonyms = synonyms
        if top_dressing_application_rate_close is not None:
            self.top_dressing_application_rate_close = top_dressing_application_rate_close
        if top_dressing_application_rate_open is not None:
            self.top_dressing_application_rate_open = top_dressing_application_rate_open

    @property
    def application_on_various_types_of_soils(self):
        """Gets the application_on_various_types_of_soils of this Fertilizer.  # noqa: E501


        :return: The application_on_various_types_of_soils of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._application_on_various_types_of_soils

    @application_on_various_types_of_soils.setter
    def application_on_various_types_of_soils(self, application_on_various_types_of_soils):
        """Sets the application_on_various_types_of_soils of this Fertilizer.


        :param application_on_various_types_of_soils: The application_on_various_types_of_soils of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._application_on_various_types_of_soils = application_on_various_types_of_soils

    @property
    def average_price(self):
        """Gets the average_price of this Fertilizer.  # noqa: E501


        :return: The average_price of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._average_price

    @average_price.setter
    def average_price(self, average_price):
        """Sets the average_price of this Fertilizer.


        :param average_price: The average_price of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._average_price = average_price

    @property
    def basic_application_rate(self):
        """Gets the basic_application_rate of this Fertilizer.  # noqa: E501


        :return: The basic_application_rate of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._basic_application_rate

    @basic_application_rate.setter
    def basic_application_rate(self, basic_application_rate):
        """Sets the basic_application_rate of this Fertilizer.


        :param basic_application_rate: The basic_application_rate of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._basic_application_rate = basic_application_rate

    @property
    def content_ag(self):
        """Gets the content_ag of this Fertilizer.  # noqa: E501


        :return: The content_ag of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_ag

    @content_ag.setter
    def content_ag(self, content_ag):
        """Sets the content_ag of this Fertilizer.


        :param content_ag: The content_ag of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_ag = content_ag

    @property
    def content_b(self):
        """Gets the content_b of this Fertilizer.  # noqa: E501


        :return: The content_b of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_b

    @content_b.setter
    def content_b(self, content_b):
        """Sets the content_b of this Fertilizer.


        :param content_b: The content_b of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_b = content_b

    @property
    def content_ca(self):
        """Gets the content_ca of this Fertilizer.  # noqa: E501


        :return: The content_ca of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_ca

    @content_ca.setter
    def content_ca(self, content_ca):
        """Sets the content_ca of this Fertilizer.


        :param content_ca: The content_ca of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_ca = content_ca

    @property
    def content_co(self):
        """Gets the content_co of this Fertilizer.  # noqa: E501


        :return: The content_co of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_co

    @content_co.setter
    def content_co(self, content_co):
        """Sets the content_co of this Fertilizer.


        :param content_co: The content_co of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_co = content_co

    @property
    def content_cu(self):
        """Gets the content_cu of this Fertilizer.  # noqa: E501


        :return: The content_cu of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_cu

    @content_cu.setter
    def content_cu(self, content_cu):
        """Sets the content_cu of this Fertilizer.


        :param content_cu: The content_cu of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_cu = content_cu

    @property
    def content_fe(self):
        """Gets the content_fe of this Fertilizer.  # noqa: E501


        :return: The content_fe of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_fe

    @content_fe.setter
    def content_fe(self, content_fe):
        """Sets the content_fe of this Fertilizer.


        :param content_fe: The content_fe of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_fe = content_fe

    @property
    def content_i(self):
        """Gets the content_i of this Fertilizer.  # noqa: E501


        :return: The content_i of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._content_i

    @content_i.setter
    def content_i(self, content_i):
        """Sets the content_i of this Fertilizer.


        :param content_i: The content_i of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._content_i = content_i

    @property
    def content_k(self):
        """Gets the content_k of this Fertilizer.  # noqa: E501


        :return: The content_k of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_k

    @content_k.setter
    def content_k(self, content_k):
        """Sets the content_k of this Fertilizer.


        :param content_k: The content_k of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_k = content_k

    @property
    def content_mg(self):
        """Gets the content_mg of this Fertilizer.  # noqa: E501


        :return: The content_mg of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_mg

    @content_mg.setter
    def content_mg(self, content_mg):
        """Sets the content_mg of this Fertilizer.


        :param content_mg: The content_mg of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_mg = content_mg

    @property
    def content_mn(self):
        """Gets the content_mn of this Fertilizer.  # noqa: E501


        :return: The content_mn of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_mn

    @content_mn.setter
    def content_mn(self, content_mn):
        """Sets the content_mn of this Fertilizer.


        :param content_mn: The content_mn of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_mn = content_mn

    @property
    def content_mo(self):
        """Gets the content_mo of this Fertilizer.  # noqa: E501


        :return: The content_mo of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_mo

    @content_mo.setter
    def content_mo(self, content_mo):
        """Sets the content_mo of this Fertilizer.


        :param content_mo: The content_mo of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_mo = content_mo

    @property
    def content_n(self):
        """Gets the content_n of this Fertilizer.  # noqa: E501


        :return: The content_n of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_n

    @content_n.setter
    def content_n(self, content_n):
        """Sets the content_n of this Fertilizer.


        :param content_n: The content_n of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_n = content_n

    @property
    def content_p(self):
        """Gets the content_p of this Fertilizer.  # noqa: E501


        :return: The content_p of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_p

    @content_p.setter
    def content_p(self, content_p):
        """Sets the content_p of this Fertilizer.


        :param content_p: The content_p of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_p = content_p

    @property
    def content_s(self):
        """Gets the content_s of this Fertilizer.  # noqa: E501


        :return: The content_s of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_s

    @content_s.setter
    def content_s(self, content_s):
        """Sets the content_s of this Fertilizer.


        :param content_s: The content_s of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_s = content_s

    @property
    def content_v(self):
        """Gets the content_v of this Fertilizer.  # noqa: E501


        :return: The content_v of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._content_v

    @content_v.setter
    def content_v(self, content_v):
        """Sets the content_v of this Fertilizer.


        :param content_v: The content_v of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._content_v = content_v

    @property
    def content_zn(self):
        """Gets the content_zn of this Fertilizer.  # noqa: E501


        :return: The content_zn of this Fertilizer.  # noqa: E501
        :rtype: float
        """
        return self._content_zn

    @content_zn.setter
    def content_zn(self, content_zn):
        """Sets the content_zn of this Fertilizer.


        :param content_zn: The content_zn of this Fertilizer.  # noqa: E501
        :type: float
        """

        self._content_zn = content_zn

    @property
    def cultivated_crop(self):
        """Gets the cultivated_crop of this Fertilizer.  # noqa: E501


        :return: The cultivated_crop of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._cultivated_crop

    @cultivated_crop.setter
    def cultivated_crop(self, cultivated_crop):
        """Sets the cultivated_crop of this Fertilizer.


        :param cultivated_crop: The cultivated_crop of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._cultivated_crop = cultivated_crop

    @property
    def cultivated_plant_group(self):
        """Gets the cultivated_plant_group of this Fertilizer.  # noqa: E501


        :return: The cultivated_plant_group of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._cultivated_plant_group

    @cultivated_plant_group.setter
    def cultivated_plant_group(self, cultivated_plant_group):
        """Sets the cultivated_plant_group of this Fertilizer.


        :param cultivated_plant_group: The cultivated_plant_group of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._cultivated_plant_group = cultivated_plant_group

    @property
    def economy_type_l(self):
        """Gets the economy_type_l of this Fertilizer.  # noqa: E501


        :return: The economy_type_l of this Fertilizer.  # noqa: E501
        :rtype: bool
        """
        return self._economy_type_l

    @economy_type_l.setter
    def economy_type_l(self, economy_type_l):
        """Sets the economy_type_l of this Fertilizer.


        :param economy_type_l: The economy_type_l of this Fertilizer.  # noqa: E501
        :type: bool
        """

        self._economy_type_l = economy_type_l

    @property
    def economy_type_ls(self):
        """Gets the economy_type_ls of this Fertilizer.  # noqa: E501


        :return: The economy_type_ls of this Fertilizer.  # noqa: E501
        :rtype: bool
        """
        return self._economy_type_ls

    @economy_type_ls.setter
    def economy_type_ls(self, economy_type_ls):
        """Sets the economy_type_ls of this Fertilizer.


        :param economy_type_ls: The economy_type_ls of this Fertilizer.  # noqa: E501
        :type: bool
        """

        self._economy_type_ls = economy_type_ls

    @property
    def economy_type_s(self):
        """Gets the economy_type_s of this Fertilizer.  # noqa: E501


        :return: The economy_type_s of this Fertilizer.  # noqa: E501
        :rtype: bool
        """
        return self._economy_type_s

    @economy_type_s.setter
    def economy_type_s(self, economy_type_s):
        """Sets the economy_type_s of this Fertilizer.


        :param economy_type_s: The economy_type_s of this Fertilizer.  # noqa: E501
        :type: bool
        """

        self._economy_type_s = economy_type_s

    @property
    def fertilizer_subtype(self):
        """Gets the fertilizer_subtype of this Fertilizer.  # noqa: E501


        :return: The fertilizer_subtype of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._fertilizer_subtype

    @fertilizer_subtype.setter
    def fertilizer_subtype(self, fertilizer_subtype):
        """Sets the fertilizer_subtype of this Fertilizer.


        :param fertilizer_subtype: The fertilizer_subtype of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._fertilizer_subtype = fertilizer_subtype

    @property
    def fertilizer_type(self):
        """Gets the fertilizer_type of this Fertilizer.  # noqa: E501


        :return: The fertilizer_type of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._fertilizer_type

    @fertilizer_type.setter
    def fertilizer_type(self, fertilizer_type):
        """Sets the fertilizer_type of this Fertilizer.


        :param fertilizer_type: The fertilizer_type of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._fertilizer_type = fertilizer_type

    @property
    def id(self):
        """Gets the id of this Fertilizer.  # noqa: E501


        :return: The id of this Fertilizer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Fertilizer.


        :param id: The id of this Fertilizer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_in_state_registry(self):
        """Gets the is_in_state_registry of this Fertilizer.  # noqa: E501


        :return: The is_in_state_registry of this Fertilizer.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_state_registry

    @is_in_state_registry.setter
    def is_in_state_registry(self, is_in_state_registry):
        """Sets the is_in_state_registry of this Fertilizer.


        :param is_in_state_registry: The is_in_state_registry of this Fertilizer.  # noqa: E501
        :type: bool
        """

        self._is_in_state_registry = is_in_state_registry

    @property
    def main_drug(self):
        """Gets the main_drug of this Fertilizer.  # noqa: E501


        :return: The main_drug of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._main_drug

    @main_drug.setter
    def main_drug(self, main_drug):
        """Sets the main_drug of this Fertilizer.


        :param main_drug: The main_drug of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._main_drug = main_drug

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Fertilizer.  # noqa: E501


        :return: The manufacturer of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Fertilizer.


        :param manufacturer: The manufacturer of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def name(self):
        """Gets the name of this Fertilizer.  # noqa: E501


        :return: The name of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Fertilizer.


        :param name: The name of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def presowing_application_rate(self):
        """Gets the presowing_application_rate of this Fertilizer.  # noqa: E501


        :return: The presowing_application_rate of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._presowing_application_rate

    @presowing_application_rate.setter
    def presowing_application_rate(self, presowing_application_rate):
        """Sets the presowing_application_rate of this Fertilizer.


        :param presowing_application_rate: The presowing_application_rate of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._presowing_application_rate = presowing_application_rate

    @property
    def registrant(self):
        """Gets the registrant of this Fertilizer.  # noqa: E501


        :return: The registrant of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._registrant

    @registrant.setter
    def registrant(self, registrant):
        """Sets the registrant of this Fertilizer.


        :param registrant: The registrant of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._registrant = registrant

    @property
    def registration_expiration_date(self):
        """Gets the registration_expiration_date of this Fertilizer.  # noqa: E501


        :return: The registration_expiration_date of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._registration_expiration_date

    @registration_expiration_date.setter
    def registration_expiration_date(self, registration_expiration_date):
        """Sets the registration_expiration_date of this Fertilizer.


        :param registration_expiration_date: The registration_expiration_date of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._registration_expiration_date = registration_expiration_date

    @property
    def release_from(self):
        """Gets the release_from of this Fertilizer.  # noqa: E501


        :return: The release_from of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._release_from

    @release_from.setter
    def release_from(self, release_from):
        """Sets the release_from of this Fertilizer.


        :param release_from: The release_from of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._release_from = release_from

    @property
    def sowing_application_rate(self):
        """Gets the sowing_application_rate of this Fertilizer.  # noqa: E501


        :return: The sowing_application_rate of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._sowing_application_rate

    @sowing_application_rate.setter
    def sowing_application_rate(self, sowing_application_rate):
        """Sets the sowing_application_rate of this Fertilizer.


        :param sowing_application_rate: The sowing_application_rate of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._sowing_application_rate = sowing_application_rate

    @property
    def state_registration_number(self):
        """Gets the state_registration_number of this Fertilizer.  # noqa: E501


        :return: The state_registration_number of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._state_registration_number

    @state_registration_number.setter
    def state_registration_number(self, state_registration_number):
        """Sets the state_registration_number of this Fertilizer.


        :param state_registration_number: The state_registration_number of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._state_registration_number = state_registration_number

    @property
    def synonyms(self):
        """Gets the synonyms of this Fertilizer.  # noqa: E501


        :return: The synonyms of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this Fertilizer.


        :param synonyms: The synonyms of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._synonyms = synonyms

    @property
    def top_dressing_application_rate_close(self):
        """Gets the top_dressing_application_rate_close of this Fertilizer.  # noqa: E501


        :return: The top_dressing_application_rate_close of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._top_dressing_application_rate_close

    @top_dressing_application_rate_close.setter
    def top_dressing_application_rate_close(self, top_dressing_application_rate_close):
        """Sets the top_dressing_application_rate_close of this Fertilizer.


        :param top_dressing_application_rate_close: The top_dressing_application_rate_close of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._top_dressing_application_rate_close = top_dressing_application_rate_close

    @property
    def top_dressing_application_rate_open(self):
        """Gets the top_dressing_application_rate_open of this Fertilizer.  # noqa: E501


        :return: The top_dressing_application_rate_open of this Fertilizer.  # noqa: E501
        :rtype: str
        """
        return self._top_dressing_application_rate_open

    @top_dressing_application_rate_open.setter
    def top_dressing_application_rate_open(self, top_dressing_application_rate_open):
        """Sets the top_dressing_application_rate_open of this Fertilizer.


        :param top_dressing_application_rate_open: The top_dressing_application_rate_open of this Fertilizer.  # noqa: E501
        :type: str
        """

        self._top_dressing_application_rate_open = top_dressing_application_rate_open

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fertilizer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fertilizer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Fertilizer):
            return True

        return self.to_dict() != other.to_dict()
