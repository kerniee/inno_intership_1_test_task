# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CultureWithCoefficientsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'culture_group': 'CultureGroup',
        'id': 'int',
        'k': 'float',
        'n': 'float',
        'name': 'str',
        'p': 'float',
        'soil_type': 'str'
    }

    attribute_map = {
        'culture_group': 'cultureGroup',
        'id': 'id',
        'k': 'k',
        'n': 'n',
        'name': 'name',
        'p': 'p',
        'soil_type': 'soilType'
    }

    def __init__(self, culture_group=None, id=None, k=None, n=None, name=None, p=None, soil_type=None, _configuration=None):  # noqa: E501
        """CultureWithCoefficientsDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._culture_group = None
        self._id = None
        self._k = None
        self._n = None
        self._name = None
        self._p = None
        self._soil_type = None
        self.discriminator = None

        if culture_group is not None:
            self.culture_group = culture_group
        if id is not None:
            self.id = id
        if k is not None:
            self.k = k
        if n is not None:
            self.n = n
        if name is not None:
            self.name = name
        if p is not None:
            self.p = p
        if soil_type is not None:
            self.soil_type = soil_type

    @property
    def culture_group(self):
        """Gets the culture_group of this CultureWithCoefficientsDto.  # noqa: E501


        :return: The culture_group of this CultureWithCoefficientsDto.  # noqa: E501
        :rtype: CultureGroup
        """
        return self._culture_group

    @culture_group.setter
    def culture_group(self, culture_group):
        """Sets the culture_group of this CultureWithCoefficientsDto.


        :param culture_group: The culture_group of this CultureWithCoefficientsDto.  # noqa: E501
        :type: CultureGroup
        """

        self._culture_group = culture_group

    @property
    def id(self):
        """Gets the id of this CultureWithCoefficientsDto.  # noqa: E501


        :return: The id of this CultureWithCoefficientsDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CultureWithCoefficientsDto.


        :param id: The id of this CultureWithCoefficientsDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def k(self):
        """Gets the k of this CultureWithCoefficientsDto.  # noqa: E501


        :return: The k of this CultureWithCoefficientsDto.  # noqa: E501
        :rtype: float
        """
        return self._k

    @k.setter
    def k(self, k):
        """Sets the k of this CultureWithCoefficientsDto.


        :param k: The k of this CultureWithCoefficientsDto.  # noqa: E501
        :type: float
        """

        self._k = k

    @property
    def n(self):
        """Gets the n of this CultureWithCoefficientsDto.  # noqa: E501


        :return: The n of this CultureWithCoefficientsDto.  # noqa: E501
        :rtype: float
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this CultureWithCoefficientsDto.


        :param n: The n of this CultureWithCoefficientsDto.  # noqa: E501
        :type: float
        """

        self._n = n

    @property
    def name(self):
        """Gets the name of this CultureWithCoefficientsDto.  # noqa: E501


        :return: The name of this CultureWithCoefficientsDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CultureWithCoefficientsDto.


        :param name: The name of this CultureWithCoefficientsDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def p(self):
        """Gets the p of this CultureWithCoefficientsDto.  # noqa: E501


        :return: The p of this CultureWithCoefficientsDto.  # noqa: E501
        :rtype: float
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this CultureWithCoefficientsDto.


        :param p: The p of this CultureWithCoefficientsDto.  # noqa: E501
        :type: float
        """

        self._p = p

    @property
    def soil_type(self):
        """Gets the soil_type of this CultureWithCoefficientsDto.  # noqa: E501


        :return: The soil_type of this CultureWithCoefficientsDto.  # noqa: E501
        :rtype: str
        """
        return self._soil_type

    @soil_type.setter
    def soil_type(self, soil_type):
        """Sets the soil_type of this CultureWithCoefficientsDto.


        :param soil_type: The soil_type of this CultureWithCoefficientsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["BLACK_EARTH", "NOT_BLACK_EARTH"]  # noqa: E501
        if (self._configuration.client_side_validation and
                soil_type not in allowed_values):
            raise ValueError(
                "Invalid value for `soil_type` ({0}), must be one of {1}"  # noqa: E501
                .format(soil_type, allowed_values)
            )

        self._soil_type = soil_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CultureWithCoefficientsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CultureWithCoefficientsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CultureWithCoefficientsDto):
            return True

        return self.to_dict() != other.to_dict()
