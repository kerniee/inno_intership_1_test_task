# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FluidcalculatorSetPlantProtection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plant_protection': 'int',
        'rate_of_use': 'float',
        'fluid_consumption': 'float'
    }

    attribute_map = {
        'plant_protection': 'plant_protection',
        'rate_of_use': 'rate_of_use',
        'fluid_consumption': 'fluid_consumption'
    }

    def __init__(self, plant_protection=None, rate_of_use=None, fluid_consumption=None):  # noqa: E501
        """FluidcalculatorSetPlantProtection - a model defined in Swagger"""  # noqa: E501
        self._plant_protection = None
        self._rate_of_use = None
        self._fluid_consumption = None
        self.discriminator = None
        self.plant_protection = plant_protection
        self.rate_of_use = rate_of_use
        self.fluid_consumption = fluid_consumption

    @property
    def plant_protection(self):
        """Gets the plant_protection of this FluidcalculatorSetPlantProtection.  # noqa: E501


        :return: The plant_protection of this FluidcalculatorSetPlantProtection.  # noqa: E501
        :rtype: int
        """
        return self._plant_protection

    @plant_protection.setter
    def plant_protection(self, plant_protection):
        """Sets the plant_protection of this FluidcalculatorSetPlantProtection.


        :param plant_protection: The plant_protection of this FluidcalculatorSetPlantProtection.  # noqa: E501
        :type: int
        """
        if plant_protection is None:
            raise ValueError("Invalid value for `plant_protection`, must not be `None`")  # noqa: E501

        self._plant_protection = plant_protection

    @property
    def rate_of_use(self):
        """Gets the rate_of_use of this FluidcalculatorSetPlantProtection.  # noqa: E501


        :return: The rate_of_use of this FluidcalculatorSetPlantProtection.  # noqa: E501
        :rtype: float
        """
        return self._rate_of_use

    @rate_of_use.setter
    def rate_of_use(self, rate_of_use):
        """Sets the rate_of_use of this FluidcalculatorSetPlantProtection.


        :param rate_of_use: The rate_of_use of this FluidcalculatorSetPlantProtection.  # noqa: E501
        :type: float
        """
        if rate_of_use is None:
            raise ValueError("Invalid value for `rate_of_use`, must not be `None`")  # noqa: E501

        self._rate_of_use = rate_of_use

    @property
    def fluid_consumption(self):
        """Gets the fluid_consumption of this FluidcalculatorSetPlantProtection.  # noqa: E501


        :return: The fluid_consumption of this FluidcalculatorSetPlantProtection.  # noqa: E501
        :rtype: float
        """
        return self._fluid_consumption

    @fluid_consumption.setter
    def fluid_consumption(self, fluid_consumption):
        """Sets the fluid_consumption of this FluidcalculatorSetPlantProtection.


        :param fluid_consumption: The fluid_consumption of this FluidcalculatorSetPlantProtection.  # noqa: E501
        :type: float
        """
        if fluid_consumption is None:
            raise ValueError("Invalid value for `fluid_consumption`, must not be `None`")  # noqa: E501

        self._fluid_consumption = fluid_consumption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FluidcalculatorSetPlantProtection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FluidcalculatorSetPlantProtection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
