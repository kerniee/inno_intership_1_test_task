# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NormativeCalculatorFeedingPlanDtoSerializer_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fertilizer_type': 'int',
        'season_scheme': 'int',
        'from_autumn_percent': 'float',
        'sowing_grain_percent': 'float',
        'first_feeding_percent': 'float',
        'second_feeding_percent': 'float'
    }

    attribute_map = {
        'fertilizer_type': 'fertilizer_type',
        'season_scheme': 'season_scheme',
        'from_autumn_percent': 'from_autumn_percent',
        'sowing_grain_percent': 'sowing_grain_percent',
        'first_feeding_percent': 'first_feeding_percent',
        'second_feeding_percent': 'second_feeding_percent'
    }

    def __init__(self, fertilizer_type=None, season_scheme=None, from_autumn_percent=0, sowing_grain_percent=0, first_feeding_percent=0, second_feeding_percent=0):  # noqa: E501
        """NormativeCalculatorFeedingPlanDtoSerializer_ - a model defined in Swagger"""  # noqa: E501
        self._fertilizer_type = None
        self._season_scheme = None
        self._from_autumn_percent = None
        self._sowing_grain_percent = None
        self._first_feeding_percent = None
        self._second_feeding_percent = None
        self.discriminator = None
        self.fertilizer_type = fertilizer_type
        self.season_scheme = season_scheme
        if from_autumn_percent is not None:
            self.from_autumn_percent = from_autumn_percent
        if sowing_grain_percent is not None:
            self.sowing_grain_percent = sowing_grain_percent
        if first_feeding_percent is not None:
            self.first_feeding_percent = first_feeding_percent
        if second_feeding_percent is not None:
            self.second_feeding_percent = second_feeding_percent

    @property
    def fertilizer_type(self):
        """Gets the fertilizer_type of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501


        :return: The fertilizer_type of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._fertilizer_type

    @fertilizer_type.setter
    def fertilizer_type(self, fertilizer_type):
        """Sets the fertilizer_type of this NormativeCalculatorFeedingPlanDtoSerializer_.


        :param fertilizer_type: The fertilizer_type of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :type: int
        """
        if fertilizer_type is None:
            raise ValueError("Invalid value for `fertilizer_type`, must not be `None`")  # noqa: E501

        self._fertilizer_type = fertilizer_type

    @property
    def season_scheme(self):
        """Gets the season_scheme of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501


        :return: The season_scheme of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._season_scheme

    @season_scheme.setter
    def season_scheme(self, season_scheme):
        """Sets the season_scheme of this NormativeCalculatorFeedingPlanDtoSerializer_.


        :param season_scheme: The season_scheme of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :type: int
        """
        if season_scheme is None:
            raise ValueError("Invalid value for `season_scheme`, must not be `None`")  # noqa: E501

        self._season_scheme = season_scheme

    @property
    def from_autumn_percent(self):
        """Gets the from_autumn_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501


        :return: The from_autumn_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._from_autumn_percent

    @from_autumn_percent.setter
    def from_autumn_percent(self, from_autumn_percent):
        """Sets the from_autumn_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.


        :param from_autumn_percent: The from_autumn_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :type: float
        """

        self._from_autumn_percent = from_autumn_percent

    @property
    def sowing_grain_percent(self):
        """Gets the sowing_grain_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501


        :return: The sowing_grain_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._sowing_grain_percent

    @sowing_grain_percent.setter
    def sowing_grain_percent(self, sowing_grain_percent):
        """Sets the sowing_grain_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.


        :param sowing_grain_percent: The sowing_grain_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :type: float
        """

        self._sowing_grain_percent = sowing_grain_percent

    @property
    def first_feeding_percent(self):
        """Gets the first_feeding_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501


        :return: The first_feeding_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._first_feeding_percent

    @first_feeding_percent.setter
    def first_feeding_percent(self, first_feeding_percent):
        """Sets the first_feeding_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.


        :param first_feeding_percent: The first_feeding_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :type: float
        """

        self._first_feeding_percent = first_feeding_percent

    @property
    def second_feeding_percent(self):
        """Gets the second_feeding_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501


        :return: The second_feeding_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._second_feeding_percent

    @second_feeding_percent.setter
    def second_feeding_percent(self, second_feeding_percent):
        """Sets the second_feeding_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.


        :param second_feeding_percent: The second_feeding_percent of this NormativeCalculatorFeedingPlanDtoSerializer_.  # noqa: E501
        :type: float
        """

        self._second_feeding_percent = second_feeding_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NormativeCalculatorFeedingPlanDtoSerializer_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NormativeCalculatorFeedingPlanDtoSerializer_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
