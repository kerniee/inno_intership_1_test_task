# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SeasonScheme(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'fertilizer_type': 'RbCalculatorFertilizerType',
        'culture': 'RbCalculatorCulture',
        'combination': 'str',
        'from_autumn': 'str',
        'sowing_grain': 'str',
        'first_feeding': 'str',
        'second_feeding': 'str'
    }

    attribute_map = {
        'id': 'id',
        'fertilizer_type': 'fertilizer_type',
        'culture': 'culture',
        'combination': 'combination',
        'from_autumn': 'from_autumn',
        'sowing_grain': 'sowing_grain',
        'first_feeding': 'first_feeding',
        'second_feeding': 'second_feeding'
    }

    def __init__(self, id=None, fertilizer_type=None, culture=None, combination=None, from_autumn=None, sowing_grain=None, first_feeding=None, second_feeding=None):  # noqa: E501
        """SeasonScheme - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._fertilizer_type = None
        self._culture = None
        self._combination = None
        self._from_autumn = None
        self._sowing_grain = None
        self._first_feeding = None
        self._second_feeding = None
        self.discriminator = None
        self.id = id
        self.fertilizer_type = fertilizer_type
        self.culture = culture
        if combination is not None:
            self.combination = combination
        if from_autumn is not None:
            self.from_autumn = from_autumn
        if sowing_grain is not None:
            self.sowing_grain = sowing_grain
        if first_feeding is not None:
            self.first_feeding = first_feeding
        if second_feeding is not None:
            self.second_feeding = second_feeding

    @property
    def id(self):
        """Gets the id of this SeasonScheme.  # noqa: E501


        :return: The id of this SeasonScheme.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SeasonScheme.


        :param id: The id of this SeasonScheme.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def fertilizer_type(self):
        """Gets the fertilizer_type of this SeasonScheme.  # noqa: E501


        :return: The fertilizer_type of this SeasonScheme.  # noqa: E501
        :rtype: RbCalculatorFertilizerType
        """
        return self._fertilizer_type

    @fertilizer_type.setter
    def fertilizer_type(self, fertilizer_type):
        """Sets the fertilizer_type of this SeasonScheme.


        :param fertilizer_type: The fertilizer_type of this SeasonScheme.  # noqa: E501
        :type: RbCalculatorFertilizerType
        """
        if fertilizer_type is None:
            raise ValueError("Invalid value for `fertilizer_type`, must not be `None`")  # noqa: E501

        self._fertilizer_type = fertilizer_type

    @property
    def culture(self):
        """Gets the culture of this SeasonScheme.  # noqa: E501


        :return: The culture of this SeasonScheme.  # noqa: E501
        :rtype: RbCalculatorCulture
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this SeasonScheme.


        :param culture: The culture of this SeasonScheme.  # noqa: E501
        :type: RbCalculatorCulture
        """
        if culture is None:
            raise ValueError("Invalid value for `culture`, must not be `None`")  # noqa: E501

        self._culture = culture

    @property
    def combination(self):
        """Gets the combination of this SeasonScheme.  # noqa: E501


        :return: The combination of this SeasonScheme.  # noqa: E501
        :rtype: str
        """
        return self._combination

    @combination.setter
    def combination(self, combination):
        """Sets the combination of this SeasonScheme.


        :param combination: The combination of this SeasonScheme.  # noqa: E501
        :type: str
        """

        self._combination = combination

    @property
    def from_autumn(self):
        """Gets the from_autumn of this SeasonScheme.  # noqa: E501


        :return: The from_autumn of this SeasonScheme.  # noqa: E501
        :rtype: str
        """
        return self._from_autumn

    @from_autumn.setter
    def from_autumn(self, from_autumn):
        """Sets the from_autumn of this SeasonScheme.


        :param from_autumn: The from_autumn of this SeasonScheme.  # noqa: E501
        :type: str
        """

        self._from_autumn = from_autumn

    @property
    def sowing_grain(self):
        """Gets the sowing_grain of this SeasonScheme.  # noqa: E501


        :return: The sowing_grain of this SeasonScheme.  # noqa: E501
        :rtype: str
        """
        return self._sowing_grain

    @sowing_grain.setter
    def sowing_grain(self, sowing_grain):
        """Sets the sowing_grain of this SeasonScheme.


        :param sowing_grain: The sowing_grain of this SeasonScheme.  # noqa: E501
        :type: str
        """

        self._sowing_grain = sowing_grain

    @property
    def first_feeding(self):
        """Gets the first_feeding of this SeasonScheme.  # noqa: E501


        :return: The first_feeding of this SeasonScheme.  # noqa: E501
        :rtype: str
        """
        return self._first_feeding

    @first_feeding.setter
    def first_feeding(self, first_feeding):
        """Sets the first_feeding of this SeasonScheme.


        :param first_feeding: The first_feeding of this SeasonScheme.  # noqa: E501
        :type: str
        """

        self._first_feeding = first_feeding

    @property
    def second_feeding(self):
        """Gets the second_feeding of this SeasonScheme.  # noqa: E501


        :return: The second_feeding of this SeasonScheme.  # noqa: E501
        :rtype: str
        """
        return self._second_feeding

    @second_feeding.setter
    def second_feeding(self, second_feeding):
        """Sets the second_feeding of this SeasonScheme.


        :param second_feeding: The second_feeding of this SeasonScheme.  # noqa: E501
        :type: str
        """

        self._second_feeding = second_feeding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SeasonScheme, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeasonScheme):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
