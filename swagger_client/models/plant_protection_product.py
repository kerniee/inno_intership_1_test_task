# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlantProtectionProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'group': 'PlantProtectionGroup',
        'hazard_class': 'HazardClass',
        'place_of_production': 'PlaceOfProduction',
        'preparative_form': 'PreparativeForm',
        'main_drug_content': 'str',
        'related_main_drugs': 'list[PlantProtectionProductToMainDrug]',
        'related_chemical_classes': 'list[PlantProtectionProductToChemicalClass]',
        'related_application_areas': 'list[PlantProtectionProductToApplicationArea]',
        'related_registrations': 'list[PlantProtectionProductToRegistration]',
        'related_sellers': 'list[PlantProtectionProductToSeller]',
        'related_plant_protection_product_applications': 'list[PlantProtectionProductApplication]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'group': 'group',
        'hazard_class': 'hazard_class',
        'place_of_production': 'place_of_production',
        'preparative_form': 'preparative_form',
        'main_drug_content': 'main_drug_content',
        'related_main_drugs': 'related_main_drugs',
        'related_chemical_classes': 'related_chemical_classes',
        'related_application_areas': 'related_application_areas',
        'related_registrations': 'related_registrations',
        'related_sellers': 'related_sellers',
        'related_plant_protection_product_applications': 'related_plant_protection_product_applications'
    }

    def __init__(self, id=None, name=None, group=None, hazard_class=None, place_of_production=None, preparative_form=None, main_drug_content=None, related_main_drugs=None, related_chemical_classes=None, related_application_areas=None, related_registrations=None, related_sellers=None, related_plant_protection_product_applications=None):  # noqa: E501
        """PlantProtectionProduct - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._group = None
        self._hazard_class = None
        self._place_of_production = None
        self._preparative_form = None
        self._main_drug_content = None
        self._related_main_drugs = None
        self._related_chemical_classes = None
        self._related_application_areas = None
        self._related_registrations = None
        self._related_sellers = None
        self._related_plant_protection_product_applications = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.group = group
        self.hazard_class = hazard_class
        self.place_of_production = place_of_production
        self.preparative_form = preparative_form
        self.main_drug_content = main_drug_content
        self.related_main_drugs = related_main_drugs
        self.related_chemical_classes = related_chemical_classes
        self.related_application_areas = related_application_areas
        self.related_registrations = related_registrations
        self.related_sellers = related_sellers
        self.related_plant_protection_product_applications = related_plant_protection_product_applications

    @property
    def id(self):
        """Gets the id of this PlantProtectionProduct.  # noqa: E501


        :return: The id of this PlantProtectionProduct.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlantProtectionProduct.


        :param id: The id of this PlantProtectionProduct.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this PlantProtectionProduct.  # noqa: E501


        :return: The name of this PlantProtectionProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlantProtectionProduct.


        :param name: The name of this PlantProtectionProduct.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def group(self):
        """Gets the group of this PlantProtectionProduct.  # noqa: E501


        :return: The group of this PlantProtectionProduct.  # noqa: E501
        :rtype: PlantProtectionGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this PlantProtectionProduct.


        :param group: The group of this PlantProtectionProduct.  # noqa: E501
        :type: PlantProtectionGroup
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def hazard_class(self):
        """Gets the hazard_class of this PlantProtectionProduct.  # noqa: E501


        :return: The hazard_class of this PlantProtectionProduct.  # noqa: E501
        :rtype: HazardClass
        """
        return self._hazard_class

    @hazard_class.setter
    def hazard_class(self, hazard_class):
        """Sets the hazard_class of this PlantProtectionProduct.


        :param hazard_class: The hazard_class of this PlantProtectionProduct.  # noqa: E501
        :type: HazardClass
        """
        if hazard_class is None:
            raise ValueError("Invalid value for `hazard_class`, must not be `None`")  # noqa: E501

        self._hazard_class = hazard_class

    @property
    def place_of_production(self):
        """Gets the place_of_production of this PlantProtectionProduct.  # noqa: E501


        :return: The place_of_production of this PlantProtectionProduct.  # noqa: E501
        :rtype: PlaceOfProduction
        """
        return self._place_of_production

    @place_of_production.setter
    def place_of_production(self, place_of_production):
        """Sets the place_of_production of this PlantProtectionProduct.


        :param place_of_production: The place_of_production of this PlantProtectionProduct.  # noqa: E501
        :type: PlaceOfProduction
        """
        if place_of_production is None:
            raise ValueError("Invalid value for `place_of_production`, must not be `None`")  # noqa: E501

        self._place_of_production = place_of_production

    @property
    def preparative_form(self):
        """Gets the preparative_form of this PlantProtectionProduct.  # noqa: E501


        :return: The preparative_form of this PlantProtectionProduct.  # noqa: E501
        :rtype: PreparativeForm
        """
        return self._preparative_form

    @preparative_form.setter
    def preparative_form(self, preparative_form):
        """Sets the preparative_form of this PlantProtectionProduct.


        :param preparative_form: The preparative_form of this PlantProtectionProduct.  # noqa: E501
        :type: PreparativeForm
        """
        if preparative_form is None:
            raise ValueError("Invalid value for `preparative_form`, must not be `None`")  # noqa: E501

        self._preparative_form = preparative_form

    @property
    def main_drug_content(self):
        """Gets the main_drug_content of this PlantProtectionProduct.  # noqa: E501


        :return: The main_drug_content of this PlantProtectionProduct.  # noqa: E501
        :rtype: str
        """
        return self._main_drug_content

    @main_drug_content.setter
    def main_drug_content(self, main_drug_content):
        """Sets the main_drug_content of this PlantProtectionProduct.


        :param main_drug_content: The main_drug_content of this PlantProtectionProduct.  # noqa: E501
        :type: str
        """
        if main_drug_content is None:
            raise ValueError("Invalid value for `main_drug_content`, must not be `None`")  # noqa: E501

        self._main_drug_content = main_drug_content

    @property
    def related_main_drugs(self):
        """Gets the related_main_drugs of this PlantProtectionProduct.  # noqa: E501


        :return: The related_main_drugs of this PlantProtectionProduct.  # noqa: E501
        :rtype: list[PlantProtectionProductToMainDrug]
        """
        return self._related_main_drugs

    @related_main_drugs.setter
    def related_main_drugs(self, related_main_drugs):
        """Sets the related_main_drugs of this PlantProtectionProduct.


        :param related_main_drugs: The related_main_drugs of this PlantProtectionProduct.  # noqa: E501
        :type: list[PlantProtectionProductToMainDrug]
        """
        if related_main_drugs is None:
            raise ValueError("Invalid value for `related_main_drugs`, must not be `None`")  # noqa: E501

        self._related_main_drugs = related_main_drugs

    @property
    def related_chemical_classes(self):
        """Gets the related_chemical_classes of this PlantProtectionProduct.  # noqa: E501


        :return: The related_chemical_classes of this PlantProtectionProduct.  # noqa: E501
        :rtype: list[PlantProtectionProductToChemicalClass]
        """
        return self._related_chemical_classes

    @related_chemical_classes.setter
    def related_chemical_classes(self, related_chemical_classes):
        """Sets the related_chemical_classes of this PlantProtectionProduct.


        :param related_chemical_classes: The related_chemical_classes of this PlantProtectionProduct.  # noqa: E501
        :type: list[PlantProtectionProductToChemicalClass]
        """
        if related_chemical_classes is None:
            raise ValueError("Invalid value for `related_chemical_classes`, must not be `None`")  # noqa: E501

        self._related_chemical_classes = related_chemical_classes

    @property
    def related_application_areas(self):
        """Gets the related_application_areas of this PlantProtectionProduct.  # noqa: E501


        :return: The related_application_areas of this PlantProtectionProduct.  # noqa: E501
        :rtype: list[PlantProtectionProductToApplicationArea]
        """
        return self._related_application_areas

    @related_application_areas.setter
    def related_application_areas(self, related_application_areas):
        """Sets the related_application_areas of this PlantProtectionProduct.


        :param related_application_areas: The related_application_areas of this PlantProtectionProduct.  # noqa: E501
        :type: list[PlantProtectionProductToApplicationArea]
        """
        if related_application_areas is None:
            raise ValueError("Invalid value for `related_application_areas`, must not be `None`")  # noqa: E501

        self._related_application_areas = related_application_areas

    @property
    def related_registrations(self):
        """Gets the related_registrations of this PlantProtectionProduct.  # noqa: E501


        :return: The related_registrations of this PlantProtectionProduct.  # noqa: E501
        :rtype: list[PlantProtectionProductToRegistration]
        """
        return self._related_registrations

    @related_registrations.setter
    def related_registrations(self, related_registrations):
        """Sets the related_registrations of this PlantProtectionProduct.


        :param related_registrations: The related_registrations of this PlantProtectionProduct.  # noqa: E501
        :type: list[PlantProtectionProductToRegistration]
        """
        if related_registrations is None:
            raise ValueError("Invalid value for `related_registrations`, must not be `None`")  # noqa: E501

        self._related_registrations = related_registrations

    @property
    def related_sellers(self):
        """Gets the related_sellers of this PlantProtectionProduct.  # noqa: E501


        :return: The related_sellers of this PlantProtectionProduct.  # noqa: E501
        :rtype: list[PlantProtectionProductToSeller]
        """
        return self._related_sellers

    @related_sellers.setter
    def related_sellers(self, related_sellers):
        """Sets the related_sellers of this PlantProtectionProduct.


        :param related_sellers: The related_sellers of this PlantProtectionProduct.  # noqa: E501
        :type: list[PlantProtectionProductToSeller]
        """
        if related_sellers is None:
            raise ValueError("Invalid value for `related_sellers`, must not be `None`")  # noqa: E501

        self._related_sellers = related_sellers

    @property
    def related_plant_protection_product_applications(self):
        """Gets the related_plant_protection_product_applications of this PlantProtectionProduct.  # noqa: E501


        :return: The related_plant_protection_product_applications of this PlantProtectionProduct.  # noqa: E501
        :rtype: list[PlantProtectionProductApplication]
        """
        return self._related_plant_protection_product_applications

    @related_plant_protection_product_applications.setter
    def related_plant_protection_product_applications(self, related_plant_protection_product_applications):
        """Sets the related_plant_protection_product_applications of this PlantProtectionProduct.


        :param related_plant_protection_product_applications: The related_plant_protection_product_applications of this PlantProtectionProduct.  # noqa: E501
        :type: list[PlantProtectionProductApplication]
        """
        if related_plant_protection_product_applications is None:
            raise ValueError("Invalid value for `related_plant_protection_product_applications`, must not be `None`")  # noqa: E501

        self._related_plant_protection_product_applications = related_plant_protection_product_applications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlantProtectionProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlantProtectionProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
