# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Pesticide(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_substance': 'str',
        'active_substance_content': 'str',
        'application_area': 'str',
        'application_method': 'str',
        'average_price': 'str',
        'chemical_class': 'str',
        'cultivated_plant_group': 'str',
        'culture': 'str',
        'danger_class': 'str',
        'deadline': 'str',
        'exp_dates_for_manual_work': 'str',
        'fluid_flow_rate': 'str',
        'fluid_unit': 'str',
        'harmful_object': 'str',
        'id': 'int',
        'manufacture': 'str',
        'norm_of_use': 'str',
        'plant_protection_group': 'str',
        'preparative_form': 'str',
        'processing_type': 'str',
        'reg_expiration_date': 'str',
        'reg_number': 'str',
        'registrant': 'str',
        'title': 'str',
        'units': 'str'
    }

    attribute_map = {
        'active_substance': 'activeSubstance',
        'active_substance_content': 'activeSubstanceContent',
        'application_area': 'applicationArea',
        'application_method': 'applicationMethod',
        'average_price': 'averagePrice',
        'chemical_class': 'chemicalClass',
        'cultivated_plant_group': 'cultivatedPlantGroup',
        'culture': 'culture',
        'danger_class': 'dangerClass',
        'deadline': 'deadline',
        'exp_dates_for_manual_work': 'expDatesForManualWork',
        'fluid_flow_rate': 'fluidFlowRate',
        'fluid_unit': 'fluidUnit',
        'harmful_object': 'harmfulObject',
        'id': 'id',
        'manufacture': 'manufacture',
        'norm_of_use': 'normOfUse',
        'plant_protection_group': 'plantProtectionGroup',
        'preparative_form': 'preparativeForm',
        'processing_type': 'processingType',
        'reg_expiration_date': 'regExpirationDate',
        'reg_number': 'regNumber',
        'registrant': 'registrant',
        'title': 'title',
        'units': 'units'
    }

    def __init__(self, active_substance=None, active_substance_content=None, application_area=None, application_method=None, average_price=None, chemical_class=None, cultivated_plant_group=None, culture=None, danger_class=None, deadline=None, exp_dates_for_manual_work=None, fluid_flow_rate=None, fluid_unit=None, harmful_object=None, id=None, manufacture=None, norm_of_use=None, plant_protection_group=None, preparative_form=None, processing_type=None, reg_expiration_date=None, reg_number=None, registrant=None, title=None, units=None, _configuration=None):  # noqa: E501
        """Pesticide - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active_substance = None
        self._active_substance_content = None
        self._application_area = None
        self._application_method = None
        self._average_price = None
        self._chemical_class = None
        self._cultivated_plant_group = None
        self._culture = None
        self._danger_class = None
        self._deadline = None
        self._exp_dates_for_manual_work = None
        self._fluid_flow_rate = None
        self._fluid_unit = None
        self._harmful_object = None
        self._id = None
        self._manufacture = None
        self._norm_of_use = None
        self._plant_protection_group = None
        self._preparative_form = None
        self._processing_type = None
        self._reg_expiration_date = None
        self._reg_number = None
        self._registrant = None
        self._title = None
        self._units = None
        self.discriminator = None

        if active_substance is not None:
            self.active_substance = active_substance
        if active_substance_content is not None:
            self.active_substance_content = active_substance_content
        if application_area is not None:
            self.application_area = application_area
        if application_method is not None:
            self.application_method = application_method
        if average_price is not None:
            self.average_price = average_price
        if chemical_class is not None:
            self.chemical_class = chemical_class
        if cultivated_plant_group is not None:
            self.cultivated_plant_group = cultivated_plant_group
        if culture is not None:
            self.culture = culture
        if danger_class is not None:
            self.danger_class = danger_class
        if deadline is not None:
            self.deadline = deadline
        if exp_dates_for_manual_work is not None:
            self.exp_dates_for_manual_work = exp_dates_for_manual_work
        if fluid_flow_rate is not None:
            self.fluid_flow_rate = fluid_flow_rate
        if fluid_unit is not None:
            self.fluid_unit = fluid_unit
        if harmful_object is not None:
            self.harmful_object = harmful_object
        if id is not None:
            self.id = id
        if manufacture is not None:
            self.manufacture = manufacture
        if norm_of_use is not None:
            self.norm_of_use = norm_of_use
        if plant_protection_group is not None:
            self.plant_protection_group = plant_protection_group
        if preparative_form is not None:
            self.preparative_form = preparative_form
        if processing_type is not None:
            self.processing_type = processing_type
        if reg_expiration_date is not None:
            self.reg_expiration_date = reg_expiration_date
        if reg_number is not None:
            self.reg_number = reg_number
        if registrant is not None:
            self.registrant = registrant
        if title is not None:
            self.title = title
        if units is not None:
            self.units = units

    @property
    def active_substance(self):
        """Gets the active_substance of this Pesticide.  # noqa: E501


        :return: The active_substance of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._active_substance

    @active_substance.setter
    def active_substance(self, active_substance):
        """Sets the active_substance of this Pesticide.


        :param active_substance: The active_substance of this Pesticide.  # noqa: E501
        :type: str
        """

        self._active_substance = active_substance

    @property
    def active_substance_content(self):
        """Gets the active_substance_content of this Pesticide.  # noqa: E501


        :return: The active_substance_content of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._active_substance_content

    @active_substance_content.setter
    def active_substance_content(self, active_substance_content):
        """Sets the active_substance_content of this Pesticide.


        :param active_substance_content: The active_substance_content of this Pesticide.  # noqa: E501
        :type: str
        """

        self._active_substance_content = active_substance_content

    @property
    def application_area(self):
        """Gets the application_area of this Pesticide.  # noqa: E501


        :return: The application_area of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._application_area

    @application_area.setter
    def application_area(self, application_area):
        """Sets the application_area of this Pesticide.


        :param application_area: The application_area of this Pesticide.  # noqa: E501
        :type: str
        """

        self._application_area = application_area

    @property
    def application_method(self):
        """Gets the application_method of this Pesticide.  # noqa: E501


        :return: The application_method of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._application_method

    @application_method.setter
    def application_method(self, application_method):
        """Sets the application_method of this Pesticide.


        :param application_method: The application_method of this Pesticide.  # noqa: E501
        :type: str
        """

        self._application_method = application_method

    @property
    def average_price(self):
        """Gets the average_price of this Pesticide.  # noqa: E501


        :return: The average_price of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._average_price

    @average_price.setter
    def average_price(self, average_price):
        """Sets the average_price of this Pesticide.


        :param average_price: The average_price of this Pesticide.  # noqa: E501
        :type: str
        """

        self._average_price = average_price

    @property
    def chemical_class(self):
        """Gets the chemical_class of this Pesticide.  # noqa: E501


        :return: The chemical_class of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._chemical_class

    @chemical_class.setter
    def chemical_class(self, chemical_class):
        """Sets the chemical_class of this Pesticide.


        :param chemical_class: The chemical_class of this Pesticide.  # noqa: E501
        :type: str
        """

        self._chemical_class = chemical_class

    @property
    def cultivated_plant_group(self):
        """Gets the cultivated_plant_group of this Pesticide.  # noqa: E501


        :return: The cultivated_plant_group of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._cultivated_plant_group

    @cultivated_plant_group.setter
    def cultivated_plant_group(self, cultivated_plant_group):
        """Sets the cultivated_plant_group of this Pesticide.


        :param cultivated_plant_group: The cultivated_plant_group of this Pesticide.  # noqa: E501
        :type: str
        """

        self._cultivated_plant_group = cultivated_plant_group

    @property
    def culture(self):
        """Gets the culture of this Pesticide.  # noqa: E501


        :return: The culture of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this Pesticide.


        :param culture: The culture of this Pesticide.  # noqa: E501
        :type: str
        """

        self._culture = culture

    @property
    def danger_class(self):
        """Gets the danger_class of this Pesticide.  # noqa: E501


        :return: The danger_class of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._danger_class

    @danger_class.setter
    def danger_class(self, danger_class):
        """Sets the danger_class of this Pesticide.


        :param danger_class: The danger_class of this Pesticide.  # noqa: E501
        :type: str
        """

        self._danger_class = danger_class

    @property
    def deadline(self):
        """Gets the deadline of this Pesticide.  # noqa: E501


        :return: The deadline of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this Pesticide.


        :param deadline: The deadline of this Pesticide.  # noqa: E501
        :type: str
        """

        self._deadline = deadline

    @property
    def exp_dates_for_manual_work(self):
        """Gets the exp_dates_for_manual_work of this Pesticide.  # noqa: E501


        :return: The exp_dates_for_manual_work of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._exp_dates_for_manual_work

    @exp_dates_for_manual_work.setter
    def exp_dates_for_manual_work(self, exp_dates_for_manual_work):
        """Sets the exp_dates_for_manual_work of this Pesticide.


        :param exp_dates_for_manual_work: The exp_dates_for_manual_work of this Pesticide.  # noqa: E501
        :type: str
        """

        self._exp_dates_for_manual_work = exp_dates_for_manual_work

    @property
    def fluid_flow_rate(self):
        """Gets the fluid_flow_rate of this Pesticide.  # noqa: E501


        :return: The fluid_flow_rate of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._fluid_flow_rate

    @fluid_flow_rate.setter
    def fluid_flow_rate(self, fluid_flow_rate):
        """Sets the fluid_flow_rate of this Pesticide.


        :param fluid_flow_rate: The fluid_flow_rate of this Pesticide.  # noqa: E501
        :type: str
        """

        self._fluid_flow_rate = fluid_flow_rate

    @property
    def fluid_unit(self):
        """Gets the fluid_unit of this Pesticide.  # noqa: E501


        :return: The fluid_unit of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._fluid_unit

    @fluid_unit.setter
    def fluid_unit(self, fluid_unit):
        """Sets the fluid_unit of this Pesticide.


        :param fluid_unit: The fluid_unit of this Pesticide.  # noqa: E501
        :type: str
        """

        self._fluid_unit = fluid_unit

    @property
    def harmful_object(self):
        """Gets the harmful_object of this Pesticide.  # noqa: E501


        :return: The harmful_object of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._harmful_object

    @harmful_object.setter
    def harmful_object(self, harmful_object):
        """Sets the harmful_object of this Pesticide.


        :param harmful_object: The harmful_object of this Pesticide.  # noqa: E501
        :type: str
        """

        self._harmful_object = harmful_object

    @property
    def id(self):
        """Gets the id of this Pesticide.  # noqa: E501


        :return: The id of this Pesticide.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pesticide.


        :param id: The id of this Pesticide.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def manufacture(self):
        """Gets the manufacture of this Pesticide.  # noqa: E501


        :return: The manufacture of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._manufacture

    @manufacture.setter
    def manufacture(self, manufacture):
        """Sets the manufacture of this Pesticide.


        :param manufacture: The manufacture of this Pesticide.  # noqa: E501
        :type: str
        """

        self._manufacture = manufacture

    @property
    def norm_of_use(self):
        """Gets the norm_of_use of this Pesticide.  # noqa: E501


        :return: The norm_of_use of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._norm_of_use

    @norm_of_use.setter
    def norm_of_use(self, norm_of_use):
        """Sets the norm_of_use of this Pesticide.


        :param norm_of_use: The norm_of_use of this Pesticide.  # noqa: E501
        :type: str
        """

        self._norm_of_use = norm_of_use

    @property
    def plant_protection_group(self):
        """Gets the plant_protection_group of this Pesticide.  # noqa: E501


        :return: The plant_protection_group of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._plant_protection_group

    @plant_protection_group.setter
    def plant_protection_group(self, plant_protection_group):
        """Sets the plant_protection_group of this Pesticide.


        :param plant_protection_group: The plant_protection_group of this Pesticide.  # noqa: E501
        :type: str
        """

        self._plant_protection_group = plant_protection_group

    @property
    def preparative_form(self):
        """Gets the preparative_form of this Pesticide.  # noqa: E501


        :return: The preparative_form of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._preparative_form

    @preparative_form.setter
    def preparative_form(self, preparative_form):
        """Sets the preparative_form of this Pesticide.


        :param preparative_form: The preparative_form of this Pesticide.  # noqa: E501
        :type: str
        """

        self._preparative_form = preparative_form

    @property
    def processing_type(self):
        """Gets the processing_type of this Pesticide.  # noqa: E501


        :return: The processing_type of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._processing_type

    @processing_type.setter
    def processing_type(self, processing_type):
        """Sets the processing_type of this Pesticide.


        :param processing_type: The processing_type of this Pesticide.  # noqa: E501
        :type: str
        """

        self._processing_type = processing_type

    @property
    def reg_expiration_date(self):
        """Gets the reg_expiration_date of this Pesticide.  # noqa: E501


        :return: The reg_expiration_date of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._reg_expiration_date

    @reg_expiration_date.setter
    def reg_expiration_date(self, reg_expiration_date):
        """Sets the reg_expiration_date of this Pesticide.


        :param reg_expiration_date: The reg_expiration_date of this Pesticide.  # noqa: E501
        :type: str
        """

        self._reg_expiration_date = reg_expiration_date

    @property
    def reg_number(self):
        """Gets the reg_number of this Pesticide.  # noqa: E501


        :return: The reg_number of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._reg_number

    @reg_number.setter
    def reg_number(self, reg_number):
        """Sets the reg_number of this Pesticide.


        :param reg_number: The reg_number of this Pesticide.  # noqa: E501
        :type: str
        """

        self._reg_number = reg_number

    @property
    def registrant(self):
        """Gets the registrant of this Pesticide.  # noqa: E501


        :return: The registrant of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._registrant

    @registrant.setter
    def registrant(self, registrant):
        """Sets the registrant of this Pesticide.


        :param registrant: The registrant of this Pesticide.  # noqa: E501
        :type: str
        """

        self._registrant = registrant

    @property
    def title(self):
        """Gets the title of this Pesticide.  # noqa: E501


        :return: The title of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Pesticide.


        :param title: The title of this Pesticide.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def units(self):
        """Gets the units of this Pesticide.  # noqa: E501


        :return: The units of this Pesticide.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Pesticide.


        :param units: The units of this Pesticide.  # noqa: E501
        :type: str
        """

        self._units = units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pesticide, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pesticide):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pesticide):
            return True

        return self.to_dict() != other.to_dict()
