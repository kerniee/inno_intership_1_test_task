# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlantProtectionProductApplication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'plant_protection_product': 'PlantProtectionProductForApplication',
        'rate_of_use_min': 'float',
        'rate_of_use_max': 'float',
        'application_features': 'str',
        'fluid_consumption_min': 'float',
        'fluid_consumption_max': 'float',
        'unit_of_measurement': 'PlantProtectionUnitOfMeasurement',
        'treatment_type': 'TreatmentType',
        'waiting_period': 'int',
        'multiplicity_of_treatments': 'int',
        'exit_dates_for_manual_works': 'int',
        'exit_dates_for_mechanized_works': 'int',
        'related_cultures': 'list[PlantProtectionProductApplicationToCulture]',
        'related_harmful_objects': 'list[PlantProtectionProductApplicationToHarmfulObject]'
    }

    attribute_map = {
        'id': 'id',
        'plant_protection_product': 'plant_protection_product',
        'rate_of_use_min': 'rate_of_use_min',
        'rate_of_use_max': 'rate_of_use_max',
        'application_features': 'application_features',
        'fluid_consumption_min': 'fluid_consumption_min',
        'fluid_consumption_max': 'fluid_consumption_max',
        'unit_of_measurement': 'unit_of_measurement',
        'treatment_type': 'treatment_type',
        'waiting_period': 'waiting_period',
        'multiplicity_of_treatments': 'multiplicity_of_treatments',
        'exit_dates_for_manual_works': 'exit_dates_for_manual_works',
        'exit_dates_for_mechanized_works': 'exit_dates_for_mechanized_works',
        'related_cultures': 'related_cultures',
        'related_harmful_objects': 'related_harmful_objects'
    }

    def __init__(self, id=None, plant_protection_product=None, rate_of_use_min=None, rate_of_use_max=None, application_features=None, fluid_consumption_min=None, fluid_consumption_max=None, unit_of_measurement=None, treatment_type=None, waiting_period=None, multiplicity_of_treatments=None, exit_dates_for_manual_works=None, exit_dates_for_mechanized_works=None, related_cultures=None, related_harmful_objects=None):  # noqa: E501
        """PlantProtectionProductApplication - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._plant_protection_product = None
        self._rate_of_use_min = None
        self._rate_of_use_max = None
        self._application_features = None
        self._fluid_consumption_min = None
        self._fluid_consumption_max = None
        self._unit_of_measurement = None
        self._treatment_type = None
        self._waiting_period = None
        self._multiplicity_of_treatments = None
        self._exit_dates_for_manual_works = None
        self._exit_dates_for_mechanized_works = None
        self._related_cultures = None
        self._related_harmful_objects = None
        self.discriminator = None
        self.id = id
        self.plant_protection_product = plant_protection_product
        self.rate_of_use_min = rate_of_use_min
        self.rate_of_use_max = rate_of_use_max
        if application_features is not None:
            self.application_features = application_features
        self.fluid_consumption_min = fluid_consumption_min
        self.fluid_consumption_max = fluid_consumption_max
        self.unit_of_measurement = unit_of_measurement
        self.treatment_type = treatment_type
        if waiting_period is not None:
            self.waiting_period = waiting_period
        if multiplicity_of_treatments is not None:
            self.multiplicity_of_treatments = multiplicity_of_treatments
        if exit_dates_for_manual_works is not None:
            self.exit_dates_for_manual_works = exit_dates_for_manual_works
        if exit_dates_for_mechanized_works is not None:
            self.exit_dates_for_mechanized_works = exit_dates_for_mechanized_works
        self.related_cultures = related_cultures
        self.related_harmful_objects = related_harmful_objects

    @property
    def id(self):
        """Gets the id of this PlantProtectionProductApplication.  # noqa: E501


        :return: The id of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlantProtectionProductApplication.


        :param id: The id of this PlantProtectionProductApplication.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def plant_protection_product(self):
        """Gets the plant_protection_product of this PlantProtectionProductApplication.  # noqa: E501


        :return: The plant_protection_product of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: PlantProtectionProductForApplication
        """
        return self._plant_protection_product

    @plant_protection_product.setter
    def plant_protection_product(self, plant_protection_product):
        """Sets the plant_protection_product of this PlantProtectionProductApplication.


        :param plant_protection_product: The plant_protection_product of this PlantProtectionProductApplication.  # noqa: E501
        :type: PlantProtectionProductForApplication
        """
        if plant_protection_product is None:
            raise ValueError("Invalid value for `plant_protection_product`, must not be `None`")  # noqa: E501

        self._plant_protection_product = plant_protection_product

    @property
    def rate_of_use_min(self):
        """Gets the rate_of_use_min of this PlantProtectionProductApplication.  # noqa: E501


        :return: The rate_of_use_min of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: float
        """
        return self._rate_of_use_min

    @rate_of_use_min.setter
    def rate_of_use_min(self, rate_of_use_min):
        """Sets the rate_of_use_min of this PlantProtectionProductApplication.


        :param rate_of_use_min: The rate_of_use_min of this PlantProtectionProductApplication.  # noqa: E501
        :type: float
        """
        if rate_of_use_min is None:
            raise ValueError("Invalid value for `rate_of_use_min`, must not be `None`")  # noqa: E501

        self._rate_of_use_min = rate_of_use_min

    @property
    def rate_of_use_max(self):
        """Gets the rate_of_use_max of this PlantProtectionProductApplication.  # noqa: E501


        :return: The rate_of_use_max of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: float
        """
        return self._rate_of_use_max

    @rate_of_use_max.setter
    def rate_of_use_max(self, rate_of_use_max):
        """Sets the rate_of_use_max of this PlantProtectionProductApplication.


        :param rate_of_use_max: The rate_of_use_max of this PlantProtectionProductApplication.  # noqa: E501
        :type: float
        """
        if rate_of_use_max is None:
            raise ValueError("Invalid value for `rate_of_use_max`, must not be `None`")  # noqa: E501

        self._rate_of_use_max = rate_of_use_max

    @property
    def application_features(self):
        """Gets the application_features of this PlantProtectionProductApplication.  # noqa: E501


        :return: The application_features of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: str
        """
        return self._application_features

    @application_features.setter
    def application_features(self, application_features):
        """Sets the application_features of this PlantProtectionProductApplication.


        :param application_features: The application_features of this PlantProtectionProductApplication.  # noqa: E501
        :type: str
        """

        self._application_features = application_features

    @property
    def fluid_consumption_min(self):
        """Gets the fluid_consumption_min of this PlantProtectionProductApplication.  # noqa: E501


        :return: The fluid_consumption_min of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: float
        """
        return self._fluid_consumption_min

    @fluid_consumption_min.setter
    def fluid_consumption_min(self, fluid_consumption_min):
        """Sets the fluid_consumption_min of this PlantProtectionProductApplication.


        :param fluid_consumption_min: The fluid_consumption_min of this PlantProtectionProductApplication.  # noqa: E501
        :type: float
        """
        if fluid_consumption_min is None:
            raise ValueError("Invalid value for `fluid_consumption_min`, must not be `None`")  # noqa: E501

        self._fluid_consumption_min = fluid_consumption_min

    @property
    def fluid_consumption_max(self):
        """Gets the fluid_consumption_max of this PlantProtectionProductApplication.  # noqa: E501


        :return: The fluid_consumption_max of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: float
        """
        return self._fluid_consumption_max

    @fluid_consumption_max.setter
    def fluid_consumption_max(self, fluid_consumption_max):
        """Sets the fluid_consumption_max of this PlantProtectionProductApplication.


        :param fluid_consumption_max: The fluid_consumption_max of this PlantProtectionProductApplication.  # noqa: E501
        :type: float
        """
        if fluid_consumption_max is None:
            raise ValueError("Invalid value for `fluid_consumption_max`, must not be `None`")  # noqa: E501

        self._fluid_consumption_max = fluid_consumption_max

    @property
    def unit_of_measurement(self):
        """Gets the unit_of_measurement of this PlantProtectionProductApplication.  # noqa: E501


        :return: The unit_of_measurement of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: PlantProtectionUnitOfMeasurement
        """
        return self._unit_of_measurement

    @unit_of_measurement.setter
    def unit_of_measurement(self, unit_of_measurement):
        """Sets the unit_of_measurement of this PlantProtectionProductApplication.


        :param unit_of_measurement: The unit_of_measurement of this PlantProtectionProductApplication.  # noqa: E501
        :type: PlantProtectionUnitOfMeasurement
        """
        if unit_of_measurement is None:
            raise ValueError("Invalid value for `unit_of_measurement`, must not be `None`")  # noqa: E501

        self._unit_of_measurement = unit_of_measurement

    @property
    def treatment_type(self):
        """Gets the treatment_type of this PlantProtectionProductApplication.  # noqa: E501


        :return: The treatment_type of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: TreatmentType
        """
        return self._treatment_type

    @treatment_type.setter
    def treatment_type(self, treatment_type):
        """Sets the treatment_type of this PlantProtectionProductApplication.


        :param treatment_type: The treatment_type of this PlantProtectionProductApplication.  # noqa: E501
        :type: TreatmentType
        """
        if treatment_type is None:
            raise ValueError("Invalid value for `treatment_type`, must not be `None`")  # noqa: E501

        self._treatment_type = treatment_type

    @property
    def waiting_period(self):
        """Gets the waiting_period of this PlantProtectionProductApplication.  # noqa: E501


        :return: The waiting_period of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: int
        """
        return self._waiting_period

    @waiting_period.setter
    def waiting_period(self, waiting_period):
        """Sets the waiting_period of this PlantProtectionProductApplication.


        :param waiting_period: The waiting_period of this PlantProtectionProductApplication.  # noqa: E501
        :type: int
        """

        self._waiting_period = waiting_period

    @property
    def multiplicity_of_treatments(self):
        """Gets the multiplicity_of_treatments of this PlantProtectionProductApplication.  # noqa: E501


        :return: The multiplicity_of_treatments of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: int
        """
        return self._multiplicity_of_treatments

    @multiplicity_of_treatments.setter
    def multiplicity_of_treatments(self, multiplicity_of_treatments):
        """Sets the multiplicity_of_treatments of this PlantProtectionProductApplication.


        :param multiplicity_of_treatments: The multiplicity_of_treatments of this PlantProtectionProductApplication.  # noqa: E501
        :type: int
        """

        self._multiplicity_of_treatments = multiplicity_of_treatments

    @property
    def exit_dates_for_manual_works(self):
        """Gets the exit_dates_for_manual_works of this PlantProtectionProductApplication.  # noqa: E501


        :return: The exit_dates_for_manual_works of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: int
        """
        return self._exit_dates_for_manual_works

    @exit_dates_for_manual_works.setter
    def exit_dates_for_manual_works(self, exit_dates_for_manual_works):
        """Sets the exit_dates_for_manual_works of this PlantProtectionProductApplication.


        :param exit_dates_for_manual_works: The exit_dates_for_manual_works of this PlantProtectionProductApplication.  # noqa: E501
        :type: int
        """

        self._exit_dates_for_manual_works = exit_dates_for_manual_works

    @property
    def exit_dates_for_mechanized_works(self):
        """Gets the exit_dates_for_mechanized_works of this PlantProtectionProductApplication.  # noqa: E501


        :return: The exit_dates_for_mechanized_works of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: int
        """
        return self._exit_dates_for_mechanized_works

    @exit_dates_for_mechanized_works.setter
    def exit_dates_for_mechanized_works(self, exit_dates_for_mechanized_works):
        """Sets the exit_dates_for_mechanized_works of this PlantProtectionProductApplication.


        :param exit_dates_for_mechanized_works: The exit_dates_for_mechanized_works of this PlantProtectionProductApplication.  # noqa: E501
        :type: int
        """

        self._exit_dates_for_mechanized_works = exit_dates_for_mechanized_works

    @property
    def related_cultures(self):
        """Gets the related_cultures of this PlantProtectionProductApplication.  # noqa: E501


        :return: The related_cultures of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: list[PlantProtectionProductApplicationToCulture]
        """
        return self._related_cultures

    @related_cultures.setter
    def related_cultures(self, related_cultures):
        """Sets the related_cultures of this PlantProtectionProductApplication.


        :param related_cultures: The related_cultures of this PlantProtectionProductApplication.  # noqa: E501
        :type: list[PlantProtectionProductApplicationToCulture]
        """
        if related_cultures is None:
            raise ValueError("Invalid value for `related_cultures`, must not be `None`")  # noqa: E501

        self._related_cultures = related_cultures

    @property
    def related_harmful_objects(self):
        """Gets the related_harmful_objects of this PlantProtectionProductApplication.  # noqa: E501


        :return: The related_harmful_objects of this PlantProtectionProductApplication.  # noqa: E501
        :rtype: list[PlantProtectionProductApplicationToHarmfulObject]
        """
        return self._related_harmful_objects

    @related_harmful_objects.setter
    def related_harmful_objects(self, related_harmful_objects):
        """Sets the related_harmful_objects of this PlantProtectionProductApplication.


        :param related_harmful_objects: The related_harmful_objects of this PlantProtectionProductApplication.  # noqa: E501
        :type: list[PlantProtectionProductApplicationToHarmfulObject]
        """
        if related_harmful_objects is None:
            raise ValueError("Invalid value for `related_harmful_objects`, must not be `None`")  # noqa: E501

        self._related_harmful_objects = related_harmful_objects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlantProtectionProductApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlantProtectionProductApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
