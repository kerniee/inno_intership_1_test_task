# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_date': 'datetime',
        'id': 'int',
        'request_id': 'int',
        'title': 'str',
        'update_date': 'datetime',
        'user_id': 'int'
    }

    attribute_map = {
        'create_date': 'createDate',
        'id': 'id',
        'request_id': 'requestId',
        'title': 'title',
        'update_date': 'updateDate',
        'user_id': 'userId'
    }

    def __init__(self, create_date=None, id=None, request_id=None, title=None, update_date=None, user_id=None, _configuration=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_date = None
        self._id = None
        self._request_id = None
        self._title = None
        self._update_date = None
        self._user_id = None
        self.discriminator = None

        if create_date is not None:
            self.create_date = create_date
        if id is not None:
            self.id = id
        if request_id is not None:
            self.request_id = request_id
        if title is not None:
            self.title = title
        if update_date is not None:
            self.update_date = update_date
        if user_id is not None:
            self.user_id = user_id

    @property
    def create_date(self):
        """Gets the create_date of this Task.  # noqa: E501


        :return: The create_date of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Task.


        :param create_date: The create_date of this Task.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def request_id(self):
        """Gets the request_id of this Task.  # noqa: E501


        :return: The request_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Task.


        :param request_id: The request_id of this Task.  # noqa: E501
        :type: int
        """

        self._request_id = request_id

    @property
    def title(self):
        """Gets the title of this Task.  # noqa: E501


        :return: The title of this Task.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Task.


        :param title: The title of this Task.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def update_date(self):
        """Gets the update_date of this Task.  # noqa: E501


        :return: The update_date of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Task.


        :param update_date: The update_date of this Task.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def user_id(self):
        """Gets the user_id of this Task.  # noqa: E501


        :return: The user_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Task.


        :param user_id: The user_id of this Task.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Task):
            return True

        return self.to_dict() != other.to_dict()
