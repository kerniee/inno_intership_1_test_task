# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NormativeCalculatorFertilizerDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'coefficient_fertilization_per_ton': 'CoefficientFertilizationPerCropTon',
        'coefficient_quality_predecessor': 'CoefficientDependingOnQualityPredecessor',
        'coefficient_soil_acidity': 'CoefficientDependingOnSoilAcidity',
        'coefficient_mechanical_soil_composition': 'CoefficientDependingOnMechanicalSoilComposition',
        'season_scheme': 'SeasonScheme',
        'fertilizer_type': 'NormativeCalculatorFertilizerType',
        'planned_yield': 'float',
        'rate_of_fertilization': 'float',
        'required_volumes': 'float',
        'from_autumn_percent': 'float',
        'sowing_grain_percent': 'float',
        'first_feeding_percent': 'float',
        'second_feeding_percent': 'float',
        'from_autumn': 'float',
        'sowing_grain': 'float',
        'first_feeding': 'float',
        'second_feeding': 'float',
        'normative_calculator': 'int',
        'fertilizer': 'int'
    }

    attribute_map = {
        'id': 'id',
        'coefficient_fertilization_per_ton': 'coefficient_fertilization_per_ton',
        'coefficient_quality_predecessor': 'coefficient_quality_predecessor',
        'coefficient_soil_acidity': 'coefficient_soil_acidity',
        'coefficient_mechanical_soil_composition': 'coefficient_mechanical_soil_composition',
        'season_scheme': 'season_scheme',
        'fertilizer_type': 'fertilizer_type',
        'planned_yield': 'planned_yield',
        'rate_of_fertilization': 'rate_of_fertilization',
        'required_volumes': 'required_volumes',
        'from_autumn_percent': 'from_autumn_percent',
        'sowing_grain_percent': 'sowing_grain_percent',
        'first_feeding_percent': 'first_feeding_percent',
        'second_feeding_percent': 'second_feeding_percent',
        'from_autumn': 'from_autumn',
        'sowing_grain': 'sowing_grain',
        'first_feeding': 'first_feeding',
        'second_feeding': 'second_feeding',
        'normative_calculator': 'normative_calculator',
        'fertilizer': 'fertilizer'
    }

    def __init__(self, id=None, coefficient_fertilization_per_ton=None, coefficient_quality_predecessor=None, coefficient_soil_acidity=None, coefficient_mechanical_soil_composition=None, season_scheme=None, fertilizer_type=None, planned_yield=None, rate_of_fertilization=None, required_volumes=None, from_autumn_percent=None, sowing_grain_percent=None, first_feeding_percent=None, second_feeding_percent=None, from_autumn=None, sowing_grain=None, first_feeding=None, second_feeding=None, normative_calculator=None, fertilizer=None):  # noqa: E501
        """NormativeCalculatorFertilizerDetail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._coefficient_fertilization_per_ton = None
        self._coefficient_quality_predecessor = None
        self._coefficient_soil_acidity = None
        self._coefficient_mechanical_soil_composition = None
        self._season_scheme = None
        self._fertilizer_type = None
        self._planned_yield = None
        self._rate_of_fertilization = None
        self._required_volumes = None
        self._from_autumn_percent = None
        self._sowing_grain_percent = None
        self._first_feeding_percent = None
        self._second_feeding_percent = None
        self._from_autumn = None
        self._sowing_grain = None
        self._first_feeding = None
        self._second_feeding = None
        self._normative_calculator = None
        self._fertilizer = None
        self.discriminator = None
        self.id = id
        self.coefficient_fertilization_per_ton = coefficient_fertilization_per_ton
        self.coefficient_quality_predecessor = coefficient_quality_predecessor
        self.coefficient_soil_acidity = coefficient_soil_acidity
        self.coefficient_mechanical_soil_composition = coefficient_mechanical_soil_composition
        self.season_scheme = season_scheme
        self.fertilizer_type = fertilizer_type
        if planned_yield is not None:
            self.planned_yield = planned_yield
        if rate_of_fertilization is not None:
            self.rate_of_fertilization = rate_of_fertilization
        if required_volumes is not None:
            self.required_volumes = required_volumes
        if from_autumn_percent is not None:
            self.from_autumn_percent = from_autumn_percent
        if sowing_grain_percent is not None:
            self.sowing_grain_percent = sowing_grain_percent
        if first_feeding_percent is not None:
            self.first_feeding_percent = first_feeding_percent
        if second_feeding_percent is not None:
            self.second_feeding_percent = second_feeding_percent
        if from_autumn is not None:
            self.from_autumn = from_autumn
        if sowing_grain is not None:
            self.sowing_grain = sowing_grain
        if first_feeding is not None:
            self.first_feeding = first_feeding
        if second_feeding is not None:
            self.second_feeding = second_feeding
        self.normative_calculator = normative_calculator
        if fertilizer is not None:
            self.fertilizer = fertilizer

    @property
    def id(self):
        """Gets the id of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The id of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NormativeCalculatorFertilizerDetail.


        :param id: The id of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def coefficient_fertilization_per_ton(self):
        """Gets the coefficient_fertilization_per_ton of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The coefficient_fertilization_per_ton of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: CoefficientFertilizationPerCropTon
        """
        return self._coefficient_fertilization_per_ton

    @coefficient_fertilization_per_ton.setter
    def coefficient_fertilization_per_ton(self, coefficient_fertilization_per_ton):
        """Sets the coefficient_fertilization_per_ton of this NormativeCalculatorFertilizerDetail.


        :param coefficient_fertilization_per_ton: The coefficient_fertilization_per_ton of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: CoefficientFertilizationPerCropTon
        """
        if coefficient_fertilization_per_ton is None:
            raise ValueError("Invalid value for `coefficient_fertilization_per_ton`, must not be `None`")  # noqa: E501

        self._coefficient_fertilization_per_ton = coefficient_fertilization_per_ton

    @property
    def coefficient_quality_predecessor(self):
        """Gets the coefficient_quality_predecessor of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The coefficient_quality_predecessor of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: CoefficientDependingOnQualityPredecessor
        """
        return self._coefficient_quality_predecessor

    @coefficient_quality_predecessor.setter
    def coefficient_quality_predecessor(self, coefficient_quality_predecessor):
        """Sets the coefficient_quality_predecessor of this NormativeCalculatorFertilizerDetail.


        :param coefficient_quality_predecessor: The coefficient_quality_predecessor of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: CoefficientDependingOnQualityPredecessor
        """
        if coefficient_quality_predecessor is None:
            raise ValueError("Invalid value for `coefficient_quality_predecessor`, must not be `None`")  # noqa: E501

        self._coefficient_quality_predecessor = coefficient_quality_predecessor

    @property
    def coefficient_soil_acidity(self):
        """Gets the coefficient_soil_acidity of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The coefficient_soil_acidity of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: CoefficientDependingOnSoilAcidity
        """
        return self._coefficient_soil_acidity

    @coefficient_soil_acidity.setter
    def coefficient_soil_acidity(self, coefficient_soil_acidity):
        """Sets the coefficient_soil_acidity of this NormativeCalculatorFertilizerDetail.


        :param coefficient_soil_acidity: The coefficient_soil_acidity of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: CoefficientDependingOnSoilAcidity
        """
        if coefficient_soil_acidity is None:
            raise ValueError("Invalid value for `coefficient_soil_acidity`, must not be `None`")  # noqa: E501

        self._coefficient_soil_acidity = coefficient_soil_acidity

    @property
    def coefficient_mechanical_soil_composition(self):
        """Gets the coefficient_mechanical_soil_composition of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The coefficient_mechanical_soil_composition of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: CoefficientDependingOnMechanicalSoilComposition
        """
        return self._coefficient_mechanical_soil_composition

    @coefficient_mechanical_soil_composition.setter
    def coefficient_mechanical_soil_composition(self, coefficient_mechanical_soil_composition):
        """Sets the coefficient_mechanical_soil_composition of this NormativeCalculatorFertilizerDetail.


        :param coefficient_mechanical_soil_composition: The coefficient_mechanical_soil_composition of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: CoefficientDependingOnMechanicalSoilComposition
        """
        if coefficient_mechanical_soil_composition is None:
            raise ValueError("Invalid value for `coefficient_mechanical_soil_composition`, must not be `None`")  # noqa: E501

        self._coefficient_mechanical_soil_composition = coefficient_mechanical_soil_composition

    @property
    def season_scheme(self):
        """Gets the season_scheme of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The season_scheme of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: SeasonScheme
        """
        return self._season_scheme

    @season_scheme.setter
    def season_scheme(self, season_scheme):
        """Sets the season_scheme of this NormativeCalculatorFertilizerDetail.


        :param season_scheme: The season_scheme of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: SeasonScheme
        """
        if season_scheme is None:
            raise ValueError("Invalid value for `season_scheme`, must not be `None`")  # noqa: E501

        self._season_scheme = season_scheme

    @property
    def fertilizer_type(self):
        """Gets the fertilizer_type of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The fertilizer_type of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: NormativeCalculatorFertilizerType
        """
        return self._fertilizer_type

    @fertilizer_type.setter
    def fertilizer_type(self, fertilizer_type):
        """Sets the fertilizer_type of this NormativeCalculatorFertilizerDetail.


        :param fertilizer_type: The fertilizer_type of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: NormativeCalculatorFertilizerType
        """
        if fertilizer_type is None:
            raise ValueError("Invalid value for `fertilizer_type`, must not be `None`")  # noqa: E501

        self._fertilizer_type = fertilizer_type

    @property
    def planned_yield(self):
        """Gets the planned_yield of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The planned_yield of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._planned_yield

    @planned_yield.setter
    def planned_yield(self, planned_yield):
        """Sets the planned_yield of this NormativeCalculatorFertilizerDetail.


        :param planned_yield: The planned_yield of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._planned_yield = planned_yield

    @property
    def rate_of_fertilization(self):
        """Gets the rate_of_fertilization of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The rate_of_fertilization of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._rate_of_fertilization

    @rate_of_fertilization.setter
    def rate_of_fertilization(self, rate_of_fertilization):
        """Sets the rate_of_fertilization of this NormativeCalculatorFertilizerDetail.


        :param rate_of_fertilization: The rate_of_fertilization of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._rate_of_fertilization = rate_of_fertilization

    @property
    def required_volumes(self):
        """Gets the required_volumes of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The required_volumes of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._required_volumes

    @required_volumes.setter
    def required_volumes(self, required_volumes):
        """Sets the required_volumes of this NormativeCalculatorFertilizerDetail.


        :param required_volumes: The required_volumes of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._required_volumes = required_volumes

    @property
    def from_autumn_percent(self):
        """Gets the from_autumn_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The from_autumn_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._from_autumn_percent

    @from_autumn_percent.setter
    def from_autumn_percent(self, from_autumn_percent):
        """Sets the from_autumn_percent of this NormativeCalculatorFertilizerDetail.


        :param from_autumn_percent: The from_autumn_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._from_autumn_percent = from_autumn_percent

    @property
    def sowing_grain_percent(self):
        """Gets the sowing_grain_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The sowing_grain_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._sowing_grain_percent

    @sowing_grain_percent.setter
    def sowing_grain_percent(self, sowing_grain_percent):
        """Sets the sowing_grain_percent of this NormativeCalculatorFertilizerDetail.


        :param sowing_grain_percent: The sowing_grain_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._sowing_grain_percent = sowing_grain_percent

    @property
    def first_feeding_percent(self):
        """Gets the first_feeding_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The first_feeding_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._first_feeding_percent

    @first_feeding_percent.setter
    def first_feeding_percent(self, first_feeding_percent):
        """Sets the first_feeding_percent of this NormativeCalculatorFertilizerDetail.


        :param first_feeding_percent: The first_feeding_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._first_feeding_percent = first_feeding_percent

    @property
    def second_feeding_percent(self):
        """Gets the second_feeding_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The second_feeding_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._second_feeding_percent

    @second_feeding_percent.setter
    def second_feeding_percent(self, second_feeding_percent):
        """Sets the second_feeding_percent of this NormativeCalculatorFertilizerDetail.


        :param second_feeding_percent: The second_feeding_percent of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._second_feeding_percent = second_feeding_percent

    @property
    def from_autumn(self):
        """Gets the from_autumn of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The from_autumn of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._from_autumn

    @from_autumn.setter
    def from_autumn(self, from_autumn):
        """Sets the from_autumn of this NormativeCalculatorFertilizerDetail.


        :param from_autumn: The from_autumn of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._from_autumn = from_autumn

    @property
    def sowing_grain(self):
        """Gets the sowing_grain of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The sowing_grain of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._sowing_grain

    @sowing_grain.setter
    def sowing_grain(self, sowing_grain):
        """Sets the sowing_grain of this NormativeCalculatorFertilizerDetail.


        :param sowing_grain: The sowing_grain of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._sowing_grain = sowing_grain

    @property
    def first_feeding(self):
        """Gets the first_feeding of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The first_feeding of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._first_feeding

    @first_feeding.setter
    def first_feeding(self, first_feeding):
        """Sets the first_feeding of this NormativeCalculatorFertilizerDetail.


        :param first_feeding: The first_feeding of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._first_feeding = first_feeding

    @property
    def second_feeding(self):
        """Gets the second_feeding of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The second_feeding of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: float
        """
        return self._second_feeding

    @second_feeding.setter
    def second_feeding(self, second_feeding):
        """Sets the second_feeding of this NormativeCalculatorFertilizerDetail.


        :param second_feeding: The second_feeding of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: float
        """

        self._second_feeding = second_feeding

    @property
    def normative_calculator(self):
        """Gets the normative_calculator of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The normative_calculator of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: int
        """
        return self._normative_calculator

    @normative_calculator.setter
    def normative_calculator(self, normative_calculator):
        """Sets the normative_calculator of this NormativeCalculatorFertilizerDetail.


        :param normative_calculator: The normative_calculator of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: int
        """
        if normative_calculator is None:
            raise ValueError("Invalid value for `normative_calculator`, must not be `None`")  # noqa: E501

        self._normative_calculator = normative_calculator

    @property
    def fertilizer(self):
        """Gets the fertilizer of this NormativeCalculatorFertilizerDetail.  # noqa: E501


        :return: The fertilizer of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :rtype: int
        """
        return self._fertilizer

    @fertilizer.setter
    def fertilizer(self, fertilizer):
        """Sets the fertilizer of this NormativeCalculatorFertilizerDetail.


        :param fertilizer: The fertilizer of this NormativeCalculatorFertilizerDetail.  # noqa: E501
        :type: int
        """

        self._fertilizer = fertilizer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NormativeCalculatorFertilizerDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NormativeCalculatorFertilizerDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
