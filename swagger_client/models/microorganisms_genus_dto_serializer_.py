# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicroorganismsGenusDtoSerializer_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'genus': 'int',
        'koe': 'float',
        'percentage': 'float'
    }

    attribute_map = {
        'genus': 'genus',
        'koe': 'koe',
        'percentage': 'percentage'
    }

    def __init__(self, genus=None, koe=None, percentage=None):  # noqa: E501
        """MicroorganismsGenusDtoSerializer_ - a model defined in Swagger"""  # noqa: E501
        self._genus = None
        self._koe = None
        self._percentage = None
        self.discriminator = None
        self.genus = genus
        if koe is not None:
            self.koe = koe
        if percentage is not None:
            self.percentage = percentage

    @property
    def genus(self):
        """Gets the genus of this MicroorganismsGenusDtoSerializer_.  # noqa: E501


        :return: The genus of this MicroorganismsGenusDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._genus

    @genus.setter
    def genus(self, genus):
        """Sets the genus of this MicroorganismsGenusDtoSerializer_.


        :param genus: The genus of this MicroorganismsGenusDtoSerializer_.  # noqa: E501
        :type: int
        """
        if genus is None:
            raise ValueError("Invalid value for `genus`, must not be `None`")  # noqa: E501

        self._genus = genus

    @property
    def koe(self):
        """Gets the koe of this MicroorganismsGenusDtoSerializer_.  # noqa: E501


        :return: The koe of this MicroorganismsGenusDtoSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._koe

    @koe.setter
    def koe(self, koe):
        """Sets the koe of this MicroorganismsGenusDtoSerializer_.


        :param koe: The koe of this MicroorganismsGenusDtoSerializer_.  # noqa: E501
        :type: float
        """

        self._koe = koe

    @property
    def percentage(self):
        """Gets the percentage of this MicroorganismsGenusDtoSerializer_.  # noqa: E501


        :return: The percentage of this MicroorganismsGenusDtoSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this MicroorganismsGenusDtoSerializer_.


        :param percentage: The percentage of this MicroorganismsGenusDtoSerializer_.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicroorganismsGenusDtoSerializer_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicroorganismsGenusDtoSerializer_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
