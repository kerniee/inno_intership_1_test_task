# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LiquidCalculator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calculation_method': 'str',
        'create_date': 'datetime',
        'fluid_flow_rate': 'float',
        'id': 'int',
        'name': 'str',
        'norm_fluid': 'float',
        'norm_fluid_flow_rate': 'float',
        'norm_of_the_drug': 'float',
        'nozzle_color': 'str',
        'number_of_sprayers': 'float',
        'pesticide': 'Pesticide',
        'pressure': 'float',
        'rate_of_drug': 'float',
        'spraying_speed': 'float',
        'status': 'str',
        'update_date': 'datetime',
        'user_id': 'int',
        'width_of_the_bar': 'float'
    }

    attribute_map = {
        'calculation_method': 'calculationMethod',
        'create_date': 'createDate',
        'fluid_flow_rate': 'fluidFlowRate',
        'id': 'id',
        'name': 'name',
        'norm_fluid': 'normFluid',
        'norm_fluid_flow_rate': 'normFluidFlowRate',
        'norm_of_the_drug': 'normOfTheDrug',
        'nozzle_color': 'nozzleColor',
        'number_of_sprayers': 'numberOfSprayers',
        'pesticide': 'pesticide',
        'pressure': 'pressure',
        'rate_of_drug': 'rateOfDrug',
        'spraying_speed': 'sprayingSpeed',
        'status': 'status',
        'update_date': 'updateDate',
        'user_id': 'userId',
        'width_of_the_bar': 'widthOfTheBar'
    }

    def __init__(self, calculation_method=None, create_date=None, fluid_flow_rate=None, id=None, name=None, norm_fluid=None, norm_fluid_flow_rate=None, norm_of_the_drug=None, nozzle_color=None, number_of_sprayers=None, pesticide=None, pressure=None, rate_of_drug=None, spraying_speed=None, status=None, update_date=None, user_id=None, width_of_the_bar=None, _configuration=None):  # noqa: E501
        """LiquidCalculator - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._calculation_method = None
        self._create_date = None
        self._fluid_flow_rate = None
        self._id = None
        self._name = None
        self._norm_fluid = None
        self._norm_fluid_flow_rate = None
        self._norm_of_the_drug = None
        self._nozzle_color = None
        self._number_of_sprayers = None
        self._pesticide = None
        self._pressure = None
        self._rate_of_drug = None
        self._spraying_speed = None
        self._status = None
        self._update_date = None
        self._user_id = None
        self._width_of_the_bar = None
        self.discriminator = None

        if calculation_method is not None:
            self.calculation_method = calculation_method
        if create_date is not None:
            self.create_date = create_date
        if fluid_flow_rate is not None:
            self.fluid_flow_rate = fluid_flow_rate
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if norm_fluid is not None:
            self.norm_fluid = norm_fluid
        if norm_fluid_flow_rate is not None:
            self.norm_fluid_flow_rate = norm_fluid_flow_rate
        if norm_of_the_drug is not None:
            self.norm_of_the_drug = norm_of_the_drug
        if nozzle_color is not None:
            self.nozzle_color = nozzle_color
        if number_of_sprayers is not None:
            self.number_of_sprayers = number_of_sprayers
        if pesticide is not None:
            self.pesticide = pesticide
        if pressure is not None:
            self.pressure = pressure
        if rate_of_drug is not None:
            self.rate_of_drug = rate_of_drug
        if spraying_speed is not None:
            self.spraying_speed = spraying_speed
        if status is not None:
            self.status = status
        if update_date is not None:
            self.update_date = update_date
        if user_id is not None:
            self.user_id = user_id
        if width_of_the_bar is not None:
            self.width_of_the_bar = width_of_the_bar

    @property
    def calculation_method(self):
        """Gets the calculation_method of this LiquidCalculator.  # noqa: E501


        :return: The calculation_method of this LiquidCalculator.  # noqa: E501
        :rtype: str
        """
        return self._calculation_method

    @calculation_method.setter
    def calculation_method(self, calculation_method):
        """Sets the calculation_method of this LiquidCalculator.


        :param calculation_method: The calculation_method of this LiquidCalculator.  # noqa: E501
        :type: str
        """
        allowed_values = ["REGULATORY", "SETTLEMENT_BALANCE", "LIQUID", "FED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                calculation_method not in allowed_values):
            raise ValueError(
                "Invalid value for `calculation_method` ({0}), must be one of {1}"  # noqa: E501
                .format(calculation_method, allowed_values)
            )

        self._calculation_method = calculation_method

    @property
    def create_date(self):
        """Gets the create_date of this LiquidCalculator.  # noqa: E501


        :return: The create_date of this LiquidCalculator.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this LiquidCalculator.


        :param create_date: The create_date of this LiquidCalculator.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def fluid_flow_rate(self):
        """Gets the fluid_flow_rate of this LiquidCalculator.  # noqa: E501


        :return: The fluid_flow_rate of this LiquidCalculator.  # noqa: E501
        :rtype: float
        """
        return self._fluid_flow_rate

    @fluid_flow_rate.setter
    def fluid_flow_rate(self, fluid_flow_rate):
        """Sets the fluid_flow_rate of this LiquidCalculator.


        :param fluid_flow_rate: The fluid_flow_rate of this LiquidCalculator.  # noqa: E501
        :type: float
        """

        self._fluid_flow_rate = fluid_flow_rate

    @property
    def id(self):
        """Gets the id of this LiquidCalculator.  # noqa: E501


        :return: The id of this LiquidCalculator.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LiquidCalculator.


        :param id: The id of this LiquidCalculator.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LiquidCalculator.  # noqa: E501


        :return: The name of this LiquidCalculator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LiquidCalculator.


        :param name: The name of this LiquidCalculator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def norm_fluid(self):
        """Gets the norm_fluid of this LiquidCalculator.  # noqa: E501


        :return: The norm_fluid of this LiquidCalculator.  # noqa: E501
        :rtype: float
        """
        return self._norm_fluid

    @norm_fluid.setter
    def norm_fluid(self, norm_fluid):
        """Sets the norm_fluid of this LiquidCalculator.


        :param norm_fluid: The norm_fluid of this LiquidCalculator.  # noqa: E501
        :type: float
        """

        self._norm_fluid = norm_fluid

    @property
    def norm_fluid_flow_rate(self):
        """Gets the norm_fluid_flow_rate of this LiquidCalculator.  # noqa: E501


        :return: The norm_fluid_flow_rate of this LiquidCalculator.  # noqa: E501
        :rtype: float
        """
        return self._norm_fluid_flow_rate

    @norm_fluid_flow_rate.setter
    def norm_fluid_flow_rate(self, norm_fluid_flow_rate):
        """Sets the norm_fluid_flow_rate of this LiquidCalculator.


        :param norm_fluid_flow_rate: The norm_fluid_flow_rate of this LiquidCalculator.  # noqa: E501
        :type: float
        """

        self._norm_fluid_flow_rate = norm_fluid_flow_rate

    @property
    def norm_of_the_drug(self):
        """Gets the norm_of_the_drug of this LiquidCalculator.  # noqa: E501


        :return: The norm_of_the_drug of this LiquidCalculator.  # noqa: E501
        :rtype: float
        """
        return self._norm_of_the_drug

    @norm_of_the_drug.setter
    def norm_of_the_drug(self, norm_of_the_drug):
        """Sets the norm_of_the_drug of this LiquidCalculator.


        :param norm_of_the_drug: The norm_of_the_drug of this LiquidCalculator.  # noqa: E501
        :type: float
        """

        self._norm_of_the_drug = norm_of_the_drug

    @property
    def nozzle_color(self):
        """Gets the nozzle_color of this LiquidCalculator.  # noqa: E501


        :return: The nozzle_color of this LiquidCalculator.  # noqa: E501
        :rtype: str
        """
        return self._nozzle_color

    @nozzle_color.setter
    def nozzle_color(self, nozzle_color):
        """Sets the nozzle_color of this LiquidCalculator.


        :param nozzle_color: The nozzle_color of this LiquidCalculator.  # noqa: E501
        :type: str
        """

        self._nozzle_color = nozzle_color

    @property
    def number_of_sprayers(self):
        """Gets the number_of_sprayers of this LiquidCalculator.  # noqa: E501


        :return: The number_of_sprayers of this LiquidCalculator.  # noqa: E501
        :rtype: float
        """
        return self._number_of_sprayers

    @number_of_sprayers.setter
    def number_of_sprayers(self, number_of_sprayers):
        """Sets the number_of_sprayers of this LiquidCalculator.


        :param number_of_sprayers: The number_of_sprayers of this LiquidCalculator.  # noqa: E501
        :type: float
        """

        self._number_of_sprayers = number_of_sprayers

    @property
    def pesticide(self):
        """Gets the pesticide of this LiquidCalculator.  # noqa: E501


        :return: The pesticide of this LiquidCalculator.  # noqa: E501
        :rtype: Pesticide
        """
        return self._pesticide

    @pesticide.setter
    def pesticide(self, pesticide):
        """Sets the pesticide of this LiquidCalculator.


        :param pesticide: The pesticide of this LiquidCalculator.  # noqa: E501
        :type: Pesticide
        """

        self._pesticide = pesticide

    @property
    def pressure(self):
        """Gets the pressure of this LiquidCalculator.  # noqa: E501


        :return: The pressure of this LiquidCalculator.  # noqa: E501
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this LiquidCalculator.


        :param pressure: The pressure of this LiquidCalculator.  # noqa: E501
        :type: float
        """

        self._pressure = pressure

    @property
    def rate_of_drug(self):
        """Gets the rate_of_drug of this LiquidCalculator.  # noqa: E501


        :return: The rate_of_drug of this LiquidCalculator.  # noqa: E501
        :rtype: float
        """
        return self._rate_of_drug

    @rate_of_drug.setter
    def rate_of_drug(self, rate_of_drug):
        """Sets the rate_of_drug of this LiquidCalculator.


        :param rate_of_drug: The rate_of_drug of this LiquidCalculator.  # noqa: E501
        :type: float
        """

        self._rate_of_drug = rate_of_drug

    @property
    def spraying_speed(self):
        """Gets the spraying_speed of this LiquidCalculator.  # noqa: E501


        :return: The spraying_speed of this LiquidCalculator.  # noqa: E501
        :rtype: float
        """
        return self._spraying_speed

    @spraying_speed.setter
    def spraying_speed(self, spraying_speed):
        """Sets the spraying_speed of this LiquidCalculator.


        :param spraying_speed: The spraying_speed of this LiquidCalculator.  # noqa: E501
        :type: float
        """

        self._spraying_speed = spraying_speed

    @property
    def status(self):
        """Gets the status of this LiquidCalculator.  # noqa: E501


        :return: The status of this LiquidCalculator.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LiquidCalculator.


        :param status: The status of this LiquidCalculator.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "COMPLETED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def update_date(self):
        """Gets the update_date of this LiquidCalculator.  # noqa: E501


        :return: The update_date of this LiquidCalculator.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this LiquidCalculator.


        :param update_date: The update_date of this LiquidCalculator.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def user_id(self):
        """Gets the user_id of this LiquidCalculator.  # noqa: E501


        :return: The user_id of this LiquidCalculator.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LiquidCalculator.


        :param user_id: The user_id of this LiquidCalculator.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def width_of_the_bar(self):
        """Gets the width_of_the_bar of this LiquidCalculator.  # noqa: E501


        :return: The width_of_the_bar of this LiquidCalculator.  # noqa: E501
        :rtype: float
        """
        return self._width_of_the_bar

    @width_of_the_bar.setter
    def width_of_the_bar(self, width_of_the_bar):
        """Sets the width_of_the_bar of this LiquidCalculator.


        :param width_of_the_bar: The width_of_the_bar of this LiquidCalculator.  # noqa: E501
        :type: float
        """

        self._width_of_the_bar = width_of_the_bar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiquidCalculator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiquidCalculator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LiquidCalculator):
            return True

        return self.to_dict() != other.to_dict()
