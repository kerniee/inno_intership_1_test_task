# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoefficientConversionOfNutrients(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'fertilizer_type': 'RbCalculatorFertilizerType',
        'depth_of_arable_layer': 'DepthOfArableLayer',
        'mechanical_composition': 'MechanicalCompositionOfSoil'
    }

    attribute_map = {
        'id': 'id',
        'fertilizer_type': 'fertilizer_type',
        'depth_of_arable_layer': 'depth_of_arable_layer',
        'mechanical_composition': 'mechanical_composition'
    }

    def __init__(self, id=None, fertilizer_type=None, depth_of_arable_layer=None, mechanical_composition=None):  # noqa: E501
        """CoefficientConversionOfNutrients - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._fertilizer_type = None
        self._depth_of_arable_layer = None
        self._mechanical_composition = None
        self.discriminator = None
        self.id = id
        self.fertilizer_type = fertilizer_type
        self.depth_of_arable_layer = depth_of_arable_layer
        self.mechanical_composition = mechanical_composition

    @property
    def id(self):
        """Gets the id of this CoefficientConversionOfNutrients.  # noqa: E501


        :return: The id of this CoefficientConversionOfNutrients.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CoefficientConversionOfNutrients.


        :param id: The id of this CoefficientConversionOfNutrients.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def fertilizer_type(self):
        """Gets the fertilizer_type of this CoefficientConversionOfNutrients.  # noqa: E501


        :return: The fertilizer_type of this CoefficientConversionOfNutrients.  # noqa: E501
        :rtype: RbCalculatorFertilizerType
        """
        return self._fertilizer_type

    @fertilizer_type.setter
    def fertilizer_type(self, fertilizer_type):
        """Sets the fertilizer_type of this CoefficientConversionOfNutrients.


        :param fertilizer_type: The fertilizer_type of this CoefficientConversionOfNutrients.  # noqa: E501
        :type: RbCalculatorFertilizerType
        """
        if fertilizer_type is None:
            raise ValueError("Invalid value for `fertilizer_type`, must not be `None`")  # noqa: E501

        self._fertilizer_type = fertilizer_type

    @property
    def depth_of_arable_layer(self):
        """Gets the depth_of_arable_layer of this CoefficientConversionOfNutrients.  # noqa: E501


        :return: The depth_of_arable_layer of this CoefficientConversionOfNutrients.  # noqa: E501
        :rtype: DepthOfArableLayer
        """
        return self._depth_of_arable_layer

    @depth_of_arable_layer.setter
    def depth_of_arable_layer(self, depth_of_arable_layer):
        """Sets the depth_of_arable_layer of this CoefficientConversionOfNutrients.


        :param depth_of_arable_layer: The depth_of_arable_layer of this CoefficientConversionOfNutrients.  # noqa: E501
        :type: DepthOfArableLayer
        """
        if depth_of_arable_layer is None:
            raise ValueError("Invalid value for `depth_of_arable_layer`, must not be `None`")  # noqa: E501

        self._depth_of_arable_layer = depth_of_arable_layer

    @property
    def mechanical_composition(self):
        """Gets the mechanical_composition of this CoefficientConversionOfNutrients.  # noqa: E501


        :return: The mechanical_composition of this CoefficientConversionOfNutrients.  # noqa: E501
        :rtype: MechanicalCompositionOfSoil
        """
        return self._mechanical_composition

    @mechanical_composition.setter
    def mechanical_composition(self, mechanical_composition):
        """Sets the mechanical_composition of this CoefficientConversionOfNutrients.


        :param mechanical_composition: The mechanical_composition of this CoefficientConversionOfNutrients.  # noqa: E501
        :type: MechanicalCompositionOfSoil
        """
        if mechanical_composition is None:
            raise ValueError("Invalid value for `mechanical_composition`, must not be `None`")  # noqa: E501

        self._mechanical_composition = mechanical_composition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoefficientConversionOfNutrients, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoefficientConversionOfNutrients):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
