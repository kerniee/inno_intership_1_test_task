# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RbCalculatorParametersDtoSerializer_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'int',
        'culture': 'int',
        'degree_of_soil_moisture': 'int',
        'analysis_method': 'str',
        'soil_sampling_depth': 'int',
        'fertilizer_action_year': 'int',
        'depth_of_arable_layer': 'int',
        'mechanical_composition': 'int',
        'planned_yield': 'float',
        'reports': 'list[RbCalculatorReportDtoSerializer_]'
    }

    attribute_map = {
        'region': 'region',
        'culture': 'culture',
        'degree_of_soil_moisture': 'degree_of_soil_moisture',
        'analysis_method': 'analysis_method',
        'soil_sampling_depth': 'soil_sampling_depth',
        'fertilizer_action_year': 'fertilizer_action_year',
        'depth_of_arable_layer': 'depth_of_arable_layer',
        'mechanical_composition': 'mechanical_composition',
        'planned_yield': 'planned_yield',
        'reports': 'reports'
    }

    def __init__(self, region=None, culture=None, degree_of_soil_moisture=None, analysis_method='', soil_sampling_depth=None, fertilizer_action_year=None, depth_of_arable_layer=None, mechanical_composition=None, planned_yield=None, reports=None):  # noqa: E501
        """RbCalculatorParametersDtoSerializer_ - a model defined in Swagger"""  # noqa: E501
        self._region = None
        self._culture = None
        self._degree_of_soil_moisture = None
        self._analysis_method = None
        self._soil_sampling_depth = None
        self._fertilizer_action_year = None
        self._depth_of_arable_layer = None
        self._mechanical_composition = None
        self._planned_yield = None
        self._reports = None
        self.discriminator = None
        if region is not None:
            self.region = region
        if culture is not None:
            self.culture = culture
        if degree_of_soil_moisture is not None:
            self.degree_of_soil_moisture = degree_of_soil_moisture
        if analysis_method is not None:
            self.analysis_method = analysis_method
        if soil_sampling_depth is not None:
            self.soil_sampling_depth = soil_sampling_depth
        if fertilizer_action_year is not None:
            self.fertilizer_action_year = fertilizer_action_year
        if depth_of_arable_layer is not None:
            self.depth_of_arable_layer = depth_of_arable_layer
        if mechanical_composition is not None:
            self.mechanical_composition = mechanical_composition
        if planned_yield is not None:
            self.planned_yield = planned_yield
        if reports is not None:
            self.reports = reports

    @property
    def region(self):
        """Gets the region of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The region of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RbCalculatorParametersDtoSerializer_.


        :param region: The region of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._region = region

    @property
    def culture(self):
        """Gets the culture of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The culture of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this RbCalculatorParametersDtoSerializer_.


        :param culture: The culture of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._culture = culture

    @property
    def degree_of_soil_moisture(self):
        """Gets the degree_of_soil_moisture of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The degree_of_soil_moisture of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._degree_of_soil_moisture

    @degree_of_soil_moisture.setter
    def degree_of_soil_moisture(self, degree_of_soil_moisture):
        """Sets the degree_of_soil_moisture of this RbCalculatorParametersDtoSerializer_.


        :param degree_of_soil_moisture: The degree_of_soil_moisture of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._degree_of_soil_moisture = degree_of_soil_moisture

    @property
    def analysis_method(self):
        """Gets the analysis_method of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The analysis_method of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: str
        """
        return self._analysis_method

    @analysis_method.setter
    def analysis_method(self, analysis_method):
        """Sets the analysis_method of this RbCalculatorParametersDtoSerializer_.


        :param analysis_method: The analysis_method of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: str
        """

        self._analysis_method = analysis_method

    @property
    def soil_sampling_depth(self):
        """Gets the soil_sampling_depth of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The soil_sampling_depth of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._soil_sampling_depth

    @soil_sampling_depth.setter
    def soil_sampling_depth(self, soil_sampling_depth):
        """Sets the soil_sampling_depth of this RbCalculatorParametersDtoSerializer_.


        :param soil_sampling_depth: The soil_sampling_depth of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._soil_sampling_depth = soil_sampling_depth

    @property
    def fertilizer_action_year(self):
        """Gets the fertilizer_action_year of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The fertilizer_action_year of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._fertilizer_action_year

    @fertilizer_action_year.setter
    def fertilizer_action_year(self, fertilizer_action_year):
        """Sets the fertilizer_action_year of this RbCalculatorParametersDtoSerializer_.


        :param fertilizer_action_year: The fertilizer_action_year of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._fertilizer_action_year = fertilizer_action_year

    @property
    def depth_of_arable_layer(self):
        """Gets the depth_of_arable_layer of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The depth_of_arable_layer of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._depth_of_arable_layer

    @depth_of_arable_layer.setter
    def depth_of_arable_layer(self, depth_of_arable_layer):
        """Sets the depth_of_arable_layer of this RbCalculatorParametersDtoSerializer_.


        :param depth_of_arable_layer: The depth_of_arable_layer of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._depth_of_arable_layer = depth_of_arable_layer

    @property
    def mechanical_composition(self):
        """Gets the mechanical_composition of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The mechanical_composition of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._mechanical_composition

    @mechanical_composition.setter
    def mechanical_composition(self, mechanical_composition):
        """Sets the mechanical_composition of this RbCalculatorParametersDtoSerializer_.


        :param mechanical_composition: The mechanical_composition of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._mechanical_composition = mechanical_composition

    @property
    def planned_yield(self):
        """Gets the planned_yield of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The planned_yield of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._planned_yield

    @planned_yield.setter
    def planned_yield(self, planned_yield):
        """Sets the planned_yield of this RbCalculatorParametersDtoSerializer_.


        :param planned_yield: The planned_yield of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: float
        """

        self._planned_yield = planned_yield

    @property
    def reports(self):
        """Gets the reports of this RbCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The reports of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: list[RbCalculatorReportDtoSerializer_]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this RbCalculatorParametersDtoSerializer_.


        :param reports: The reports of this RbCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: list[RbCalculatorReportDtoSerializer_]
        """

        self._reports = reports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RbCalculatorParametersDtoSerializer_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RbCalculatorParametersDtoSerializer_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
