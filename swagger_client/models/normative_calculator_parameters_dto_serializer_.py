# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NormativeCalculatorParametersDtoSerializer_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'culture': 'int',
        'region': 'int',
        'preceding_culture': 'int',
        'acidity_group': 'int',
        'mechanical_composition': 'int',
        'planned_yield': 'float'
    }

    attribute_map = {
        'culture': 'culture',
        'region': 'region',
        'preceding_culture': 'preceding_culture',
        'acidity_group': 'acidity_group',
        'mechanical_composition': 'mechanical_composition',
        'planned_yield': 'planned_yield'
    }

    def __init__(self, culture=None, region=None, preceding_culture=None, acidity_group=None, mechanical_composition=None, planned_yield=None):  # noqa: E501
        """NormativeCalculatorParametersDtoSerializer_ - a model defined in Swagger"""  # noqa: E501
        self._culture = None
        self._region = None
        self._preceding_culture = None
        self._acidity_group = None
        self._mechanical_composition = None
        self._planned_yield = None
        self.discriminator = None
        if culture is not None:
            self.culture = culture
        if region is not None:
            self.region = region
        if preceding_culture is not None:
            self.preceding_culture = preceding_culture
        if acidity_group is not None:
            self.acidity_group = acidity_group
        if mechanical_composition is not None:
            self.mechanical_composition = mechanical_composition
        if planned_yield is not None:
            self.planned_yield = planned_yield

    @property
    def culture(self):
        """Gets the culture of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The culture of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this NormativeCalculatorParametersDtoSerializer_.


        :param culture: The culture of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._culture = culture

    @property
    def region(self):
        """Gets the region of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The region of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this NormativeCalculatorParametersDtoSerializer_.


        :param region: The region of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._region = region

    @property
    def preceding_culture(self):
        """Gets the preceding_culture of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The preceding_culture of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._preceding_culture

    @preceding_culture.setter
    def preceding_culture(self, preceding_culture):
        """Sets the preceding_culture of this NormativeCalculatorParametersDtoSerializer_.


        :param preceding_culture: The preceding_culture of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._preceding_culture = preceding_culture

    @property
    def acidity_group(self):
        """Gets the acidity_group of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The acidity_group of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._acidity_group

    @acidity_group.setter
    def acidity_group(self, acidity_group):
        """Sets the acidity_group of this NormativeCalculatorParametersDtoSerializer_.


        :param acidity_group: The acidity_group of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._acidity_group = acidity_group

    @property
    def mechanical_composition(self):
        """Gets the mechanical_composition of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The mechanical_composition of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: int
        """
        return self._mechanical_composition

    @mechanical_composition.setter
    def mechanical_composition(self, mechanical_composition):
        """Sets the mechanical_composition of this NormativeCalculatorParametersDtoSerializer_.


        :param mechanical_composition: The mechanical_composition of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: int
        """

        self._mechanical_composition = mechanical_composition

    @property
    def planned_yield(self):
        """Gets the planned_yield of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501


        :return: The planned_yield of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._planned_yield

    @planned_yield.setter
    def planned_yield(self, planned_yield):
        """Sets the planned_yield of this NormativeCalculatorParametersDtoSerializer_.


        :param planned_yield: The planned_yield of this NormativeCalculatorParametersDtoSerializer_.  # noqa: E501
        :type: float
        """

        self._planned_yield = planned_yield

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NormativeCalculatorParametersDtoSerializer_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NormativeCalculatorParametersDtoSerializer_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
