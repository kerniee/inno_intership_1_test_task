# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SeasonStepSBC(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'combination': 'str',
        'culture_group_id': 'int',
        'fertilizer_type': 'str',
        'first_feeding': 'str',
        'id': 'int',
        'main_from_autumn': 'str',
        'second_feeding': 'str',
        'sowing_in_spring': 'str'
    }

    attribute_map = {
        'combination': 'combination',
        'culture_group_id': 'cultureGroupId',
        'fertilizer_type': 'fertilizerType',
        'first_feeding': 'firstFeeding',
        'id': 'id',
        'main_from_autumn': 'mainFromAutumn',
        'second_feeding': 'secondFeeding',
        'sowing_in_spring': 'sowingInSpring'
    }

    def __init__(self, combination=None, culture_group_id=None, fertilizer_type=None, first_feeding=None, id=None, main_from_autumn=None, second_feeding=None, sowing_in_spring=None, _configuration=None):  # noqa: E501
        """SeasonStepSBC - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._combination = None
        self._culture_group_id = None
        self._fertilizer_type = None
        self._first_feeding = None
        self._id = None
        self._main_from_autumn = None
        self._second_feeding = None
        self._sowing_in_spring = None
        self.discriminator = None

        if combination is not None:
            self.combination = combination
        if culture_group_id is not None:
            self.culture_group_id = culture_group_id
        if fertilizer_type is not None:
            self.fertilizer_type = fertilizer_type
        if first_feeding is not None:
            self.first_feeding = first_feeding
        if id is not None:
            self.id = id
        if main_from_autumn is not None:
            self.main_from_autumn = main_from_autumn
        if second_feeding is not None:
            self.second_feeding = second_feeding
        if sowing_in_spring is not None:
            self.sowing_in_spring = sowing_in_spring

    @property
    def combination(self):
        """Gets the combination of this SeasonStepSBC.  # noqa: E501


        :return: The combination of this SeasonStepSBC.  # noqa: E501
        :rtype: str
        """
        return self._combination

    @combination.setter
    def combination(self, combination):
        """Sets the combination of this SeasonStepSBC.


        :param combination: The combination of this SeasonStepSBC.  # noqa: E501
        :type: str
        """

        self._combination = combination

    @property
    def culture_group_id(self):
        """Gets the culture_group_id of this SeasonStepSBC.  # noqa: E501


        :return: The culture_group_id of this SeasonStepSBC.  # noqa: E501
        :rtype: int
        """
        return self._culture_group_id

    @culture_group_id.setter
    def culture_group_id(self, culture_group_id):
        """Sets the culture_group_id of this SeasonStepSBC.


        :param culture_group_id: The culture_group_id of this SeasonStepSBC.  # noqa: E501
        :type: int
        """

        self._culture_group_id = culture_group_id

    @property
    def fertilizer_type(self):
        """Gets the fertilizer_type of this SeasonStepSBC.  # noqa: E501


        :return: The fertilizer_type of this SeasonStepSBC.  # noqa: E501
        :rtype: str
        """
        return self._fertilizer_type

    @fertilizer_type.setter
    def fertilizer_type(self, fertilizer_type):
        """Sets the fertilizer_type of this SeasonStepSBC.


        :param fertilizer_type: The fertilizer_type of this SeasonStepSBC.  # noqa: E501
        :type: str
        """

        self._fertilizer_type = fertilizer_type

    @property
    def first_feeding(self):
        """Gets the first_feeding of this SeasonStepSBC.  # noqa: E501


        :return: The first_feeding of this SeasonStepSBC.  # noqa: E501
        :rtype: str
        """
        return self._first_feeding

    @first_feeding.setter
    def first_feeding(self, first_feeding):
        """Sets the first_feeding of this SeasonStepSBC.


        :param first_feeding: The first_feeding of this SeasonStepSBC.  # noqa: E501
        :type: str
        """

        self._first_feeding = first_feeding

    @property
    def id(self):
        """Gets the id of this SeasonStepSBC.  # noqa: E501


        :return: The id of this SeasonStepSBC.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SeasonStepSBC.


        :param id: The id of this SeasonStepSBC.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def main_from_autumn(self):
        """Gets the main_from_autumn of this SeasonStepSBC.  # noqa: E501


        :return: The main_from_autumn of this SeasonStepSBC.  # noqa: E501
        :rtype: str
        """
        return self._main_from_autumn

    @main_from_autumn.setter
    def main_from_autumn(self, main_from_autumn):
        """Sets the main_from_autumn of this SeasonStepSBC.


        :param main_from_autumn: The main_from_autumn of this SeasonStepSBC.  # noqa: E501
        :type: str
        """

        self._main_from_autumn = main_from_autumn

    @property
    def second_feeding(self):
        """Gets the second_feeding of this SeasonStepSBC.  # noqa: E501


        :return: The second_feeding of this SeasonStepSBC.  # noqa: E501
        :rtype: str
        """
        return self._second_feeding

    @second_feeding.setter
    def second_feeding(self, second_feeding):
        """Sets the second_feeding of this SeasonStepSBC.


        :param second_feeding: The second_feeding of this SeasonStepSBC.  # noqa: E501
        :type: str
        """

        self._second_feeding = second_feeding

    @property
    def sowing_in_spring(self):
        """Gets the sowing_in_spring of this SeasonStepSBC.  # noqa: E501


        :return: The sowing_in_spring of this SeasonStepSBC.  # noqa: E501
        :rtype: str
        """
        return self._sowing_in_spring

    @sowing_in_spring.setter
    def sowing_in_spring(self, sowing_in_spring):
        """Sets the sowing_in_spring of this SeasonStepSBC.


        :param sowing_in_spring: The sowing_in_spring of this SeasonStepSBC.  # noqa: E501
        :type: str
        """

        self._sowing_in_spring = sowing_in_spring

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SeasonStepSBC, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeasonStepSBC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SeasonStepSBC):
            return True

        return self.to_dict() != other.to_dict()
