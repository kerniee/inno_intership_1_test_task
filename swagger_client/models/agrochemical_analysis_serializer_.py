# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AgrochemicalAnalysisSerializer_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ph_water': 'float',
        'ph_salt': 'float',
        'nh4': 'float',
        'no3': 'float',
        'organic_substances': 'float',
        'calc_no3': 'bool',
        'calc_organic_substances': 'bool',
        'p2o5': 'float',
        'k2o': 'float',
        's': 'float',
        'ca': 'float',
        'mg': 'float',
        'na': 'float',
        'so4': 'float',
        'cl': 'float',
        'salt_conductivity': 'float',
        'method': 'str'
    }

    attribute_map = {
        'ph_water': 'ph_water',
        'ph_salt': 'ph_salt',
        'nh4': 'nh4',
        'no3': 'no3',
        'organic_substances': 'organic_substances',
        'calc_no3': 'calc_no3',
        'calc_organic_substances': 'calc_organic_substances',
        'p2o5': 'p2o5',
        'k2o': 'k2o',
        's': 's',
        'ca': 'ca',
        'mg': 'mg',
        'na': 'na',
        'so4': 'so4',
        'cl': 'cl',
        'salt_conductivity': 'salt_conductivity',
        'method': 'method'
    }

    def __init__(self, ph_water=None, ph_salt=None, nh4=None, no3=None, organic_substances=None, calc_no3=None, calc_organic_substances=None, p2o5=None, k2o=None, s=None, ca=None, mg=None, na=None, so4=None, cl=None, salt_conductivity=None, method=''):  # noqa: E501
        """AgrochemicalAnalysisSerializer_ - a model defined in Swagger"""  # noqa: E501
        self._ph_water = None
        self._ph_salt = None
        self._nh4 = None
        self._no3 = None
        self._organic_substances = None
        self._calc_no3 = None
        self._calc_organic_substances = None
        self._p2o5 = None
        self._k2o = None
        self._s = None
        self._ca = None
        self._mg = None
        self._na = None
        self._so4 = None
        self._cl = None
        self._salt_conductivity = None
        self._method = None
        self.discriminator = None
        if ph_water is not None:
            self.ph_water = ph_water
        if ph_salt is not None:
            self.ph_salt = ph_salt
        if nh4 is not None:
            self.nh4 = nh4
        if no3 is not None:
            self.no3 = no3
        if organic_substances is not None:
            self.organic_substances = organic_substances
        if calc_no3 is not None:
            self.calc_no3 = calc_no3
        if calc_organic_substances is not None:
            self.calc_organic_substances = calc_organic_substances
        if p2o5 is not None:
            self.p2o5 = p2o5
        if k2o is not None:
            self.k2o = k2o
        if s is not None:
            self.s = s
        if ca is not None:
            self.ca = ca
        if mg is not None:
            self.mg = mg
        if na is not None:
            self.na = na
        if so4 is not None:
            self.so4 = so4
        if cl is not None:
            self.cl = cl
        if salt_conductivity is not None:
            self.salt_conductivity = salt_conductivity
        if method is not None:
            self.method = method

    @property
    def ph_water(self):
        """Gets the ph_water of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The ph_water of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._ph_water

    @ph_water.setter
    def ph_water(self, ph_water):
        """Sets the ph_water of this AgrochemicalAnalysisSerializer_.


        :param ph_water: The ph_water of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._ph_water = ph_water

    @property
    def ph_salt(self):
        """Gets the ph_salt of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The ph_salt of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._ph_salt

    @ph_salt.setter
    def ph_salt(self, ph_salt):
        """Sets the ph_salt of this AgrochemicalAnalysisSerializer_.


        :param ph_salt: The ph_salt of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._ph_salt = ph_salt

    @property
    def nh4(self):
        """Gets the nh4 of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The nh4 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._nh4

    @nh4.setter
    def nh4(self, nh4):
        """Sets the nh4 of this AgrochemicalAnalysisSerializer_.


        :param nh4: The nh4 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._nh4 = nh4

    @property
    def no3(self):
        """Gets the no3 of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The no3 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._no3

    @no3.setter
    def no3(self, no3):
        """Sets the no3 of this AgrochemicalAnalysisSerializer_.


        :param no3: The no3 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._no3 = no3

    @property
    def organic_substances(self):
        """Gets the organic_substances of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The organic_substances of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._organic_substances

    @organic_substances.setter
    def organic_substances(self, organic_substances):
        """Sets the organic_substances of this AgrochemicalAnalysisSerializer_.


        :param organic_substances: The organic_substances of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._organic_substances = organic_substances

    @property
    def calc_no3(self):
        """Gets the calc_no3 of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The calc_no3 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: bool
        """
        return self._calc_no3

    @calc_no3.setter
    def calc_no3(self, calc_no3):
        """Sets the calc_no3 of this AgrochemicalAnalysisSerializer_.


        :param calc_no3: The calc_no3 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: bool
        """

        self._calc_no3 = calc_no3

    @property
    def calc_organic_substances(self):
        """Gets the calc_organic_substances of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The calc_organic_substances of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: bool
        """
        return self._calc_organic_substances

    @calc_organic_substances.setter
    def calc_organic_substances(self, calc_organic_substances):
        """Sets the calc_organic_substances of this AgrochemicalAnalysisSerializer_.


        :param calc_organic_substances: The calc_organic_substances of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: bool
        """

        self._calc_organic_substances = calc_organic_substances

    @property
    def p2o5(self):
        """Gets the p2o5 of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The p2o5 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._p2o5

    @p2o5.setter
    def p2o5(self, p2o5):
        """Sets the p2o5 of this AgrochemicalAnalysisSerializer_.


        :param p2o5: The p2o5 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._p2o5 = p2o5

    @property
    def k2o(self):
        """Gets the k2o of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The k2o of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._k2o

    @k2o.setter
    def k2o(self, k2o):
        """Sets the k2o of this AgrochemicalAnalysisSerializer_.


        :param k2o: The k2o of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._k2o = k2o

    @property
    def s(self):
        """Gets the s of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The s of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this AgrochemicalAnalysisSerializer_.


        :param s: The s of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._s = s

    @property
    def ca(self):
        """Gets the ca of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The ca of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this AgrochemicalAnalysisSerializer_.


        :param ca: The ca of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._ca = ca

    @property
    def mg(self):
        """Gets the mg of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The mg of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._mg

    @mg.setter
    def mg(self, mg):
        """Sets the mg of this AgrochemicalAnalysisSerializer_.


        :param mg: The mg of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._mg = mg

    @property
    def na(self):
        """Gets the na of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The na of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._na

    @na.setter
    def na(self, na):
        """Sets the na of this AgrochemicalAnalysisSerializer_.


        :param na: The na of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._na = na

    @property
    def so4(self):
        """Gets the so4 of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The so4 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._so4

    @so4.setter
    def so4(self, so4):
        """Sets the so4 of this AgrochemicalAnalysisSerializer_.


        :param so4: The so4 of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._so4 = so4

    @property
    def cl(self):
        """Gets the cl of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The cl of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._cl

    @cl.setter
    def cl(self, cl):
        """Sets the cl of this AgrochemicalAnalysisSerializer_.


        :param cl: The cl of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._cl = cl

    @property
    def salt_conductivity(self):
        """Gets the salt_conductivity of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The salt_conductivity of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: float
        """
        return self._salt_conductivity

    @salt_conductivity.setter
    def salt_conductivity(self, salt_conductivity):
        """Sets the salt_conductivity of this AgrochemicalAnalysisSerializer_.


        :param salt_conductivity: The salt_conductivity of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: float
        """

        self._salt_conductivity = salt_conductivity

    @property
    def method(self):
        """Gets the method of this AgrochemicalAnalysisSerializer_.  # noqa: E501


        :return: The method of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this AgrochemicalAnalysisSerializer_.


        :param method: The method of this AgrochemicalAnalysisSerializer_.  # noqa: E501
        :type: str
        """

        self._method = method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgrochemicalAnalysisSerializer_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgrochemicalAnalysisSerializer_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
