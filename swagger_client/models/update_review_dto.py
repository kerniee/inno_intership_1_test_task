# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UpdateReviewDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disadvantages': 'str',
        'id': 'int',
        'message': 'str',
        'rate': 'int',
        'region': 'int',
        'steps': 'str',
        'virtues': 'str',
        'year': 'int'
    }

    attribute_map = {
        'disadvantages': 'disadvantages',
        'id': 'id',
        'message': 'message',
        'rate': 'rate',
        'region': 'region',
        'steps': 'steps',
        'virtues': 'virtues',
        'year': 'year'
    }

    def __init__(self, disadvantages=None, id=None, message=None, rate=None, region=None, steps=None, virtues=None, year=None, _configuration=None):  # noqa: E501
        """UpdateReviewDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._disadvantages = None
        self._id = None
        self._message = None
        self._rate = None
        self._region = None
        self._steps = None
        self._virtues = None
        self._year = None
        self.discriminator = None

        if disadvantages is not None:
            self.disadvantages = disadvantages
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if rate is not None:
            self.rate = rate
        if region is not None:
            self.region = region
        if steps is not None:
            self.steps = steps
        if virtues is not None:
            self.virtues = virtues
        if year is not None:
            self.year = year

    @property
    def disadvantages(self):
        """Gets the disadvantages of this UpdateReviewDto.  # noqa: E501


        :return: The disadvantages of this UpdateReviewDto.  # noqa: E501
        :rtype: str
        """
        return self._disadvantages

    @disadvantages.setter
    def disadvantages(self, disadvantages):
        """Sets the disadvantages of this UpdateReviewDto.


        :param disadvantages: The disadvantages of this UpdateReviewDto.  # noqa: E501
        :type: str
        """

        self._disadvantages = disadvantages

    @property
    def id(self):
        """Gets the id of this UpdateReviewDto.  # noqa: E501


        :return: The id of this UpdateReviewDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateReviewDto.


        :param id: The id of this UpdateReviewDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this UpdateReviewDto.  # noqa: E501


        :return: The message of this UpdateReviewDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UpdateReviewDto.


        :param message: The message of this UpdateReviewDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def rate(self):
        """Gets the rate of this UpdateReviewDto.  # noqa: E501


        :return: The rate of this UpdateReviewDto.  # noqa: E501
        :rtype: int
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this UpdateReviewDto.


        :param rate: The rate of this UpdateReviewDto.  # noqa: E501
        :type: int
        """

        self._rate = rate

    @property
    def region(self):
        """Gets the region of this UpdateReviewDto.  # noqa: E501


        :return: The region of this UpdateReviewDto.  # noqa: E501
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this UpdateReviewDto.


        :param region: The region of this UpdateReviewDto.  # noqa: E501
        :type: int
        """

        self._region = region

    @property
    def steps(self):
        """Gets the steps of this UpdateReviewDto.  # noqa: E501


        :return: The steps of this UpdateReviewDto.  # noqa: E501
        :rtype: str
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this UpdateReviewDto.


        :param steps: The steps of this UpdateReviewDto.  # noqa: E501
        :type: str
        """

        self._steps = steps

    @property
    def virtues(self):
        """Gets the virtues of this UpdateReviewDto.  # noqa: E501


        :return: The virtues of this UpdateReviewDto.  # noqa: E501
        :rtype: str
        """
        return self._virtues

    @virtues.setter
    def virtues(self, virtues):
        """Sets the virtues of this UpdateReviewDto.


        :param virtues: The virtues of this UpdateReviewDto.  # noqa: E501
        :type: str
        """

        self._virtues = virtues

    @property
    def year(self):
        """Gets the year of this UpdateReviewDto.  # noqa: E501


        :return: The year of this UpdateReviewDto.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this UpdateReviewDto.


        :param year: The year of this UpdateReviewDto.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateReviewDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateReviewDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateReviewDto):
            return True

        return self.to_dict() != other.to_dict()
