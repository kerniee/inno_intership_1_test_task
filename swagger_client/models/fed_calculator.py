# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FedCalculator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'creation_date': 'datetime',
        'is_done': 'bool',
        'stress_level': 'float',
        'c_k2': 'float',
        'c_n': 'float',
        'c_p': 'float',
        'c_ks': 'float',
        'c_kcl': 'float',
        'c_k3': 'float',
        'c_ca': 'float',
        'c_mg': 'float',
        'c_b': 'float',
        'c_cu': 'float',
        'c_k4': 'float',
        'c_zn': 'float',
        'c_mn': 'float',
        'c_fe': 'float',
        'c_k5': 'float',
        'c_mo': 'float',
        'c_co': 'float',
        'c_i': 'float',
        'c_k6': 'float',
        'd_k2': 'float',
        'd_n': 'float',
        'd_p': 'float',
        'd_ks': 'float',
        'd_kcl': 'float',
        'd_k3': 'float',
        'd_ca': 'float',
        'd_mg': 'float',
        'd_b': 'float',
        'd_cu': 'float',
        'd_k4': 'float',
        'd_zn': 'float',
        'd_mn': 'float',
        'd_fe': 'float',
        'd_k5': 'float',
        'd_mo': 'float',
        'd_co': 'float',
        'd_i': 'float',
        'd_k6': 'float',
        'e_k2': 'float',
        'e_n': 'float',
        'e_p': 'float',
        'e_ks': 'float',
        'e_kcl': 'float',
        'e_k3': 'float',
        'e_ca': 'float',
        'e_mg': 'float',
        'e_b': 'float',
        'e_cu': 'float',
        'e_k4': 'float',
        'e_zn': 'float',
        'e_mn': 'float',
        'e_fe': 'float',
        'e_k5': 'float',
        'e_mo': 'float',
        'e_co': 'float',
        'e_i': 'float',
        'e_k6': 'float',
        'g_k2': 'float',
        'g_n': 'float',
        'g_p': 'float',
        'g_ks': 'float',
        'g_kcl': 'float',
        'g_k3': 'float',
        'f_k3': 'float',
        'f_ca': 'float',
        'f_mg': 'float',
        'f_b': 'float',
        'f_cu': 'float',
        'f_k4': 'float',
        'g_k4': 'float',
        'g_zn': 'float',
        'g_mn': 'float',
        'g_fe': 'float',
        'g_k5': 'float',
        'f_k5': 'float',
        'f_mo': 'float',
        'f_co': 'float',
        'f_i': 'float',
        'f_k6': 'float',
        'h_n': 'float',
        'h_p': 'float',
        'h_ks': 'float',
        'h_kcl': 'float',
        'h_ca': 'float',
        'h_mg': 'float',
        'h_b': 'float',
        'h_cu': 'float',
        'h_zn': 'float',
        'h_mn': 'float',
        'h_fe': 'float',
        'h_mo': 'float',
        'h_co': 'float',
        'h_i': 'float',
        'user': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'creation_date': 'creation_date',
        'is_done': 'is_done',
        'stress_level': 'stress_level',
        'c_k2': 'c_k2',
        'c_n': 'c_n',
        'c_p': 'c_p',
        'c_ks': 'c_ks',
        'c_kcl': 'c_kcl',
        'c_k3': 'c_k3',
        'c_ca': 'c_ca',
        'c_mg': 'c_mg',
        'c_b': 'c_b',
        'c_cu': 'c_cu',
        'c_k4': 'c_k4',
        'c_zn': 'c_zn',
        'c_mn': 'c_mn',
        'c_fe': 'c_fe',
        'c_k5': 'c_k5',
        'c_mo': 'c_mo',
        'c_co': 'c_co',
        'c_i': 'c_i',
        'c_k6': 'c_k6',
        'd_k2': 'd_k2',
        'd_n': 'd_n',
        'd_p': 'd_p',
        'd_ks': 'd_ks',
        'd_kcl': 'd_kcl',
        'd_k3': 'd_k3',
        'd_ca': 'd_ca',
        'd_mg': 'd_mg',
        'd_b': 'd_b',
        'd_cu': 'd_cu',
        'd_k4': 'd_k4',
        'd_zn': 'd_zn',
        'd_mn': 'd_mn',
        'd_fe': 'd_fe',
        'd_k5': 'd_k5',
        'd_mo': 'd_mo',
        'd_co': 'd_co',
        'd_i': 'd_i',
        'd_k6': 'd_k6',
        'e_k2': 'e_k2',
        'e_n': 'e_n',
        'e_p': 'e_p',
        'e_ks': 'e_ks',
        'e_kcl': 'e_kcl',
        'e_k3': 'e_k3',
        'e_ca': 'e_ca',
        'e_mg': 'e_mg',
        'e_b': 'e_b',
        'e_cu': 'e_cu',
        'e_k4': 'e_k4',
        'e_zn': 'e_zn',
        'e_mn': 'e_mn',
        'e_fe': 'e_fe',
        'e_k5': 'e_k5',
        'e_mo': 'e_mo',
        'e_co': 'e_co',
        'e_i': 'e_i',
        'e_k6': 'e_k6',
        'g_k2': 'g_k2',
        'g_n': 'g_n',
        'g_p': 'g_p',
        'g_ks': 'g_ks',
        'g_kcl': 'g_kcl',
        'g_k3': 'g_k3',
        'f_k3': 'f_k3',
        'f_ca': 'f_ca',
        'f_mg': 'f_mg',
        'f_b': 'f_b',
        'f_cu': 'f_cu',
        'f_k4': 'f_k4',
        'g_k4': 'g_k4',
        'g_zn': 'g_zn',
        'g_mn': 'g_mn',
        'g_fe': 'g_fe',
        'g_k5': 'g_k5',
        'f_k5': 'f_k5',
        'f_mo': 'f_mo',
        'f_co': 'f_co',
        'f_i': 'f_i',
        'f_k6': 'f_k6',
        'h_n': 'h_n',
        'h_p': 'h_p',
        'h_ks': 'h_ks',
        'h_kcl': 'h_kcl',
        'h_ca': 'h_ca',
        'h_mg': 'h_mg',
        'h_b': 'h_b',
        'h_cu': 'h_cu',
        'h_zn': 'h_zn',
        'h_mn': 'h_mn',
        'h_fe': 'h_fe',
        'h_mo': 'h_mo',
        'h_co': 'h_co',
        'h_i': 'h_i',
        'user': 'user'
    }

    def __init__(self, id=None, name=None, creation_date=None, is_done=None, stress_level=None, c_k2=None, c_n=None, c_p=None, c_ks=None, c_kcl=None, c_k3=None, c_ca=None, c_mg=None, c_b=None, c_cu=None, c_k4=None, c_zn=None, c_mn=None, c_fe=None, c_k5=None, c_mo=None, c_co=None, c_i=None, c_k6=None, d_k2=None, d_n=None, d_p=None, d_ks=None, d_kcl=None, d_k3=None, d_ca=None, d_mg=None, d_b=None, d_cu=None, d_k4=None, d_zn=None, d_mn=None, d_fe=None, d_k5=None, d_mo=None, d_co=None, d_i=None, d_k6=None, e_k2=None, e_n=None, e_p=None, e_ks=None, e_kcl=None, e_k3=None, e_ca=None, e_mg=None, e_b=None, e_cu=None, e_k4=None, e_zn=None, e_mn=None, e_fe=None, e_k5=None, e_mo=None, e_co=None, e_i=None, e_k6=None, g_k2=None, g_n=None, g_p=None, g_ks=None, g_kcl=None, g_k3=None, f_k3=None, f_ca=None, f_mg=None, f_b=None, f_cu=None, f_k4=None, g_k4=None, g_zn=None, g_mn=None, g_fe=None, g_k5=None, f_k5=None, f_mo=None, f_co=None, f_i=None, f_k6=None, h_n=None, h_p=None, h_ks=None, h_kcl=None, h_ca=None, h_mg=None, h_b=None, h_cu=None, h_zn=None, h_mn=None, h_fe=None, h_mo=None, h_co=None, h_i=None, user=None):  # noqa: E501
        """FedCalculator - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._creation_date = None
        self._is_done = None
        self._stress_level = None
        self._c_k2 = None
        self._c_n = None
        self._c_p = None
        self._c_ks = None
        self._c_kcl = None
        self._c_k3 = None
        self._c_ca = None
        self._c_mg = None
        self._c_b = None
        self._c_cu = None
        self._c_k4 = None
        self._c_zn = None
        self._c_mn = None
        self._c_fe = None
        self._c_k5 = None
        self._c_mo = None
        self._c_co = None
        self._c_i = None
        self._c_k6 = None
        self._d_k2 = None
        self._d_n = None
        self._d_p = None
        self._d_ks = None
        self._d_kcl = None
        self._d_k3 = None
        self._d_ca = None
        self._d_mg = None
        self._d_b = None
        self._d_cu = None
        self._d_k4 = None
        self._d_zn = None
        self._d_mn = None
        self._d_fe = None
        self._d_k5 = None
        self._d_mo = None
        self._d_co = None
        self._d_i = None
        self._d_k6 = None
        self._e_k2 = None
        self._e_n = None
        self._e_p = None
        self._e_ks = None
        self._e_kcl = None
        self._e_k3 = None
        self._e_ca = None
        self._e_mg = None
        self._e_b = None
        self._e_cu = None
        self._e_k4 = None
        self._e_zn = None
        self._e_mn = None
        self._e_fe = None
        self._e_k5 = None
        self._e_mo = None
        self._e_co = None
        self._e_i = None
        self._e_k6 = None
        self._g_k2 = None
        self._g_n = None
        self._g_p = None
        self._g_ks = None
        self._g_kcl = None
        self._g_k3 = None
        self._f_k3 = None
        self._f_ca = None
        self._f_mg = None
        self._f_b = None
        self._f_cu = None
        self._f_k4 = None
        self._g_k4 = None
        self._g_zn = None
        self._g_mn = None
        self._g_fe = None
        self._g_k5 = None
        self._f_k5 = None
        self._f_mo = None
        self._f_co = None
        self._f_i = None
        self._f_k6 = None
        self._h_n = None
        self._h_p = None
        self._h_ks = None
        self._h_kcl = None
        self._h_ca = None
        self._h_mg = None
        self._h_b = None
        self._h_cu = None
        self._h_zn = None
        self._h_mn = None
        self._h_fe = None
        self._h_mo = None
        self._h_co = None
        self._h_i = None
        self._user = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.creation_date = creation_date
        self.is_done = is_done
        self.stress_level = stress_level
        self.c_k2 = c_k2
        self.c_n = c_n
        self.c_p = c_p
        self.c_ks = c_ks
        self.c_kcl = c_kcl
        self.c_k3 = c_k3
        self.c_ca = c_ca
        self.c_mg = c_mg
        self.c_b = c_b
        self.c_cu = c_cu
        self.c_k4 = c_k4
        self.c_zn = c_zn
        self.c_mn = c_mn
        self.c_fe = c_fe
        self.c_k5 = c_k5
        self.c_mo = c_mo
        self.c_co = c_co
        self.c_i = c_i
        self.c_k6 = c_k6
        self.d_k2 = d_k2
        self.d_n = d_n
        self.d_p = d_p
        self.d_ks = d_ks
        self.d_kcl = d_kcl
        self.d_k3 = d_k3
        self.d_ca = d_ca
        self.d_mg = d_mg
        self.d_b = d_b
        self.d_cu = d_cu
        self.d_k4 = d_k4
        self.d_zn = d_zn
        self.d_mn = d_mn
        self.d_fe = d_fe
        self.d_k5 = d_k5
        self.d_mo = d_mo
        self.d_co = d_co
        self.d_i = d_i
        self.d_k6 = d_k6
        self.e_k2 = e_k2
        self.e_n = e_n
        self.e_p = e_p
        self.e_ks = e_ks
        self.e_kcl = e_kcl
        self.e_k3 = e_k3
        self.e_ca = e_ca
        self.e_mg = e_mg
        self.e_b = e_b
        self.e_cu = e_cu
        self.e_k4 = e_k4
        self.e_zn = e_zn
        self.e_mn = e_mn
        self.e_fe = e_fe
        self.e_k5 = e_k5
        self.e_mo = e_mo
        self.e_co = e_co
        self.e_i = e_i
        self.e_k6 = e_k6
        self.g_k2 = g_k2
        self.g_n = g_n
        self.g_p = g_p
        self.g_ks = g_ks
        self.g_kcl = g_kcl
        self.g_k3 = g_k3
        self.f_k3 = f_k3
        self.f_ca = f_ca
        self.f_mg = f_mg
        self.f_b = f_b
        self.f_cu = f_cu
        self.f_k4 = f_k4
        self.g_k4 = g_k4
        self.g_zn = g_zn
        self.g_mn = g_mn
        self.g_fe = g_fe
        self.g_k5 = g_k5
        self.f_k5 = f_k5
        self.f_mo = f_mo
        self.f_co = f_co
        self.f_i = f_i
        self.f_k6 = f_k6
        self.h_n = h_n
        self.h_p = h_p
        self.h_ks = h_ks
        self.h_kcl = h_kcl
        self.h_ca = h_ca
        self.h_mg = h_mg
        self.h_b = h_b
        self.h_cu = h_cu
        self.h_zn = h_zn
        self.h_mn = h_mn
        self.h_fe = h_fe
        self.h_mo = h_mo
        self.h_co = h_co
        self.h_i = h_i
        self.user = user

    @property
    def id(self):
        """Gets the id of this FedCalculator.  # noqa: E501


        :return: The id of this FedCalculator.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FedCalculator.


        :param id: The id of this FedCalculator.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this FedCalculator.  # noqa: E501


        :return: The name of this FedCalculator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FedCalculator.


        :param name: The name of this FedCalculator.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def creation_date(self):
        """Gets the creation_date of this FedCalculator.  # noqa: E501


        :return: The creation_date of this FedCalculator.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this FedCalculator.


        :param creation_date: The creation_date of this FedCalculator.  # noqa: E501
        :type: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def is_done(self):
        """Gets the is_done of this FedCalculator.  # noqa: E501


        :return: The is_done of this FedCalculator.  # noqa: E501
        :rtype: bool
        """
        return self._is_done

    @is_done.setter
    def is_done(self, is_done):
        """Sets the is_done of this FedCalculator.


        :param is_done: The is_done of this FedCalculator.  # noqa: E501
        :type: bool
        """
        if is_done is None:
            raise ValueError("Invalid value for `is_done`, must not be `None`")  # noqa: E501

        self._is_done = is_done

    @property
    def stress_level(self):
        """Gets the stress_level of this FedCalculator.  # noqa: E501


        :return: The stress_level of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._stress_level

    @stress_level.setter
    def stress_level(self, stress_level):
        """Sets the stress_level of this FedCalculator.


        :param stress_level: The stress_level of this FedCalculator.  # noqa: E501
        :type: float
        """
        if stress_level is None:
            raise ValueError("Invalid value for `stress_level`, must not be `None`")  # noqa: E501

        self._stress_level = stress_level

    @property
    def c_k2(self):
        """Gets the c_k2 of this FedCalculator.  # noqa: E501


        :return: The c_k2 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_k2

    @c_k2.setter
    def c_k2(self, c_k2):
        """Sets the c_k2 of this FedCalculator.


        :param c_k2: The c_k2 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_k2 is None:
            raise ValueError("Invalid value for `c_k2`, must not be `None`")  # noqa: E501

        self._c_k2 = c_k2

    @property
    def c_n(self):
        """Gets the c_n of this FedCalculator.  # noqa: E501


        :return: The c_n of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_n

    @c_n.setter
    def c_n(self, c_n):
        """Sets the c_n of this FedCalculator.


        :param c_n: The c_n of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_n is None:
            raise ValueError("Invalid value for `c_n`, must not be `None`")  # noqa: E501

        self._c_n = c_n

    @property
    def c_p(self):
        """Gets the c_p of this FedCalculator.  # noqa: E501


        :return: The c_p of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_p

    @c_p.setter
    def c_p(self, c_p):
        """Sets the c_p of this FedCalculator.


        :param c_p: The c_p of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_p is None:
            raise ValueError("Invalid value for `c_p`, must not be `None`")  # noqa: E501

        self._c_p = c_p

    @property
    def c_ks(self):
        """Gets the c_ks of this FedCalculator.  # noqa: E501


        :return: The c_ks of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_ks

    @c_ks.setter
    def c_ks(self, c_ks):
        """Sets the c_ks of this FedCalculator.


        :param c_ks: The c_ks of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_ks is None:
            raise ValueError("Invalid value for `c_ks`, must not be `None`")  # noqa: E501

        self._c_ks = c_ks

    @property
    def c_kcl(self):
        """Gets the c_kcl of this FedCalculator.  # noqa: E501


        :return: The c_kcl of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_kcl

    @c_kcl.setter
    def c_kcl(self, c_kcl):
        """Sets the c_kcl of this FedCalculator.


        :param c_kcl: The c_kcl of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_kcl is None:
            raise ValueError("Invalid value for `c_kcl`, must not be `None`")  # noqa: E501

        self._c_kcl = c_kcl

    @property
    def c_k3(self):
        """Gets the c_k3 of this FedCalculator.  # noqa: E501


        :return: The c_k3 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_k3

    @c_k3.setter
    def c_k3(self, c_k3):
        """Sets the c_k3 of this FedCalculator.


        :param c_k3: The c_k3 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_k3 is None:
            raise ValueError("Invalid value for `c_k3`, must not be `None`")  # noqa: E501

        self._c_k3 = c_k3

    @property
    def c_ca(self):
        """Gets the c_ca of this FedCalculator.  # noqa: E501


        :return: The c_ca of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_ca

    @c_ca.setter
    def c_ca(self, c_ca):
        """Sets the c_ca of this FedCalculator.


        :param c_ca: The c_ca of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_ca is None:
            raise ValueError("Invalid value for `c_ca`, must not be `None`")  # noqa: E501

        self._c_ca = c_ca

    @property
    def c_mg(self):
        """Gets the c_mg of this FedCalculator.  # noqa: E501


        :return: The c_mg of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_mg

    @c_mg.setter
    def c_mg(self, c_mg):
        """Sets the c_mg of this FedCalculator.


        :param c_mg: The c_mg of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_mg is None:
            raise ValueError("Invalid value for `c_mg`, must not be `None`")  # noqa: E501

        self._c_mg = c_mg

    @property
    def c_b(self):
        """Gets the c_b of this FedCalculator.  # noqa: E501


        :return: The c_b of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_b

    @c_b.setter
    def c_b(self, c_b):
        """Sets the c_b of this FedCalculator.


        :param c_b: The c_b of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_b is None:
            raise ValueError("Invalid value for `c_b`, must not be `None`")  # noqa: E501

        self._c_b = c_b

    @property
    def c_cu(self):
        """Gets the c_cu of this FedCalculator.  # noqa: E501


        :return: The c_cu of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_cu

    @c_cu.setter
    def c_cu(self, c_cu):
        """Sets the c_cu of this FedCalculator.


        :param c_cu: The c_cu of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_cu is None:
            raise ValueError("Invalid value for `c_cu`, must not be `None`")  # noqa: E501

        self._c_cu = c_cu

    @property
    def c_k4(self):
        """Gets the c_k4 of this FedCalculator.  # noqa: E501


        :return: The c_k4 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_k4

    @c_k4.setter
    def c_k4(self, c_k4):
        """Sets the c_k4 of this FedCalculator.


        :param c_k4: The c_k4 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_k4 is None:
            raise ValueError("Invalid value for `c_k4`, must not be `None`")  # noqa: E501

        self._c_k4 = c_k4

    @property
    def c_zn(self):
        """Gets the c_zn of this FedCalculator.  # noqa: E501


        :return: The c_zn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_zn

    @c_zn.setter
    def c_zn(self, c_zn):
        """Sets the c_zn of this FedCalculator.


        :param c_zn: The c_zn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_zn is None:
            raise ValueError("Invalid value for `c_zn`, must not be `None`")  # noqa: E501

        self._c_zn = c_zn

    @property
    def c_mn(self):
        """Gets the c_mn of this FedCalculator.  # noqa: E501


        :return: The c_mn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_mn

    @c_mn.setter
    def c_mn(self, c_mn):
        """Sets the c_mn of this FedCalculator.


        :param c_mn: The c_mn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_mn is None:
            raise ValueError("Invalid value for `c_mn`, must not be `None`")  # noqa: E501

        self._c_mn = c_mn

    @property
    def c_fe(self):
        """Gets the c_fe of this FedCalculator.  # noqa: E501


        :return: The c_fe of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_fe

    @c_fe.setter
    def c_fe(self, c_fe):
        """Sets the c_fe of this FedCalculator.


        :param c_fe: The c_fe of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_fe is None:
            raise ValueError("Invalid value for `c_fe`, must not be `None`")  # noqa: E501

        self._c_fe = c_fe

    @property
    def c_k5(self):
        """Gets the c_k5 of this FedCalculator.  # noqa: E501


        :return: The c_k5 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_k5

    @c_k5.setter
    def c_k5(self, c_k5):
        """Sets the c_k5 of this FedCalculator.


        :param c_k5: The c_k5 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_k5 is None:
            raise ValueError("Invalid value for `c_k5`, must not be `None`")  # noqa: E501

        self._c_k5 = c_k5

    @property
    def c_mo(self):
        """Gets the c_mo of this FedCalculator.  # noqa: E501


        :return: The c_mo of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_mo

    @c_mo.setter
    def c_mo(self, c_mo):
        """Sets the c_mo of this FedCalculator.


        :param c_mo: The c_mo of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_mo is None:
            raise ValueError("Invalid value for `c_mo`, must not be `None`")  # noqa: E501

        self._c_mo = c_mo

    @property
    def c_co(self):
        """Gets the c_co of this FedCalculator.  # noqa: E501


        :return: The c_co of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_co

    @c_co.setter
    def c_co(self, c_co):
        """Sets the c_co of this FedCalculator.


        :param c_co: The c_co of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_co is None:
            raise ValueError("Invalid value for `c_co`, must not be `None`")  # noqa: E501

        self._c_co = c_co

    @property
    def c_i(self):
        """Gets the c_i of this FedCalculator.  # noqa: E501


        :return: The c_i of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_i

    @c_i.setter
    def c_i(self, c_i):
        """Sets the c_i of this FedCalculator.


        :param c_i: The c_i of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_i is None:
            raise ValueError("Invalid value for `c_i`, must not be `None`")  # noqa: E501

        self._c_i = c_i

    @property
    def c_k6(self):
        """Gets the c_k6 of this FedCalculator.  # noqa: E501


        :return: The c_k6 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._c_k6

    @c_k6.setter
    def c_k6(self, c_k6):
        """Sets the c_k6 of this FedCalculator.


        :param c_k6: The c_k6 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if c_k6 is None:
            raise ValueError("Invalid value for `c_k6`, must not be `None`")  # noqa: E501

        self._c_k6 = c_k6

    @property
    def d_k2(self):
        """Gets the d_k2 of this FedCalculator.  # noqa: E501


        :return: The d_k2 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_k2

    @d_k2.setter
    def d_k2(self, d_k2):
        """Sets the d_k2 of this FedCalculator.


        :param d_k2: The d_k2 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_k2 is None:
            raise ValueError("Invalid value for `d_k2`, must not be `None`")  # noqa: E501

        self._d_k2 = d_k2

    @property
    def d_n(self):
        """Gets the d_n of this FedCalculator.  # noqa: E501


        :return: The d_n of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_n

    @d_n.setter
    def d_n(self, d_n):
        """Sets the d_n of this FedCalculator.


        :param d_n: The d_n of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_n is None:
            raise ValueError("Invalid value for `d_n`, must not be `None`")  # noqa: E501

        self._d_n = d_n

    @property
    def d_p(self):
        """Gets the d_p of this FedCalculator.  # noqa: E501


        :return: The d_p of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_p

    @d_p.setter
    def d_p(self, d_p):
        """Sets the d_p of this FedCalculator.


        :param d_p: The d_p of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_p is None:
            raise ValueError("Invalid value for `d_p`, must not be `None`")  # noqa: E501

        self._d_p = d_p

    @property
    def d_ks(self):
        """Gets the d_ks of this FedCalculator.  # noqa: E501


        :return: The d_ks of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_ks

    @d_ks.setter
    def d_ks(self, d_ks):
        """Sets the d_ks of this FedCalculator.


        :param d_ks: The d_ks of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_ks is None:
            raise ValueError("Invalid value for `d_ks`, must not be `None`")  # noqa: E501

        self._d_ks = d_ks

    @property
    def d_kcl(self):
        """Gets the d_kcl of this FedCalculator.  # noqa: E501


        :return: The d_kcl of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_kcl

    @d_kcl.setter
    def d_kcl(self, d_kcl):
        """Sets the d_kcl of this FedCalculator.


        :param d_kcl: The d_kcl of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_kcl is None:
            raise ValueError("Invalid value for `d_kcl`, must not be `None`")  # noqa: E501

        self._d_kcl = d_kcl

    @property
    def d_k3(self):
        """Gets the d_k3 of this FedCalculator.  # noqa: E501


        :return: The d_k3 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_k3

    @d_k3.setter
    def d_k3(self, d_k3):
        """Sets the d_k3 of this FedCalculator.


        :param d_k3: The d_k3 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_k3 is None:
            raise ValueError("Invalid value for `d_k3`, must not be `None`")  # noqa: E501

        self._d_k3 = d_k3

    @property
    def d_ca(self):
        """Gets the d_ca of this FedCalculator.  # noqa: E501


        :return: The d_ca of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_ca

    @d_ca.setter
    def d_ca(self, d_ca):
        """Sets the d_ca of this FedCalculator.


        :param d_ca: The d_ca of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_ca is None:
            raise ValueError("Invalid value for `d_ca`, must not be `None`")  # noqa: E501

        self._d_ca = d_ca

    @property
    def d_mg(self):
        """Gets the d_mg of this FedCalculator.  # noqa: E501


        :return: The d_mg of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_mg

    @d_mg.setter
    def d_mg(self, d_mg):
        """Sets the d_mg of this FedCalculator.


        :param d_mg: The d_mg of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_mg is None:
            raise ValueError("Invalid value for `d_mg`, must not be `None`")  # noqa: E501

        self._d_mg = d_mg

    @property
    def d_b(self):
        """Gets the d_b of this FedCalculator.  # noqa: E501


        :return: The d_b of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_b

    @d_b.setter
    def d_b(self, d_b):
        """Sets the d_b of this FedCalculator.


        :param d_b: The d_b of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_b is None:
            raise ValueError("Invalid value for `d_b`, must not be `None`")  # noqa: E501

        self._d_b = d_b

    @property
    def d_cu(self):
        """Gets the d_cu of this FedCalculator.  # noqa: E501


        :return: The d_cu of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_cu

    @d_cu.setter
    def d_cu(self, d_cu):
        """Sets the d_cu of this FedCalculator.


        :param d_cu: The d_cu of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_cu is None:
            raise ValueError("Invalid value for `d_cu`, must not be `None`")  # noqa: E501

        self._d_cu = d_cu

    @property
    def d_k4(self):
        """Gets the d_k4 of this FedCalculator.  # noqa: E501


        :return: The d_k4 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_k4

    @d_k4.setter
    def d_k4(self, d_k4):
        """Sets the d_k4 of this FedCalculator.


        :param d_k4: The d_k4 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_k4 is None:
            raise ValueError("Invalid value for `d_k4`, must not be `None`")  # noqa: E501

        self._d_k4 = d_k4

    @property
    def d_zn(self):
        """Gets the d_zn of this FedCalculator.  # noqa: E501


        :return: The d_zn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_zn

    @d_zn.setter
    def d_zn(self, d_zn):
        """Sets the d_zn of this FedCalculator.


        :param d_zn: The d_zn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_zn is None:
            raise ValueError("Invalid value for `d_zn`, must not be `None`")  # noqa: E501

        self._d_zn = d_zn

    @property
    def d_mn(self):
        """Gets the d_mn of this FedCalculator.  # noqa: E501


        :return: The d_mn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_mn

    @d_mn.setter
    def d_mn(self, d_mn):
        """Sets the d_mn of this FedCalculator.


        :param d_mn: The d_mn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_mn is None:
            raise ValueError("Invalid value for `d_mn`, must not be `None`")  # noqa: E501

        self._d_mn = d_mn

    @property
    def d_fe(self):
        """Gets the d_fe of this FedCalculator.  # noqa: E501


        :return: The d_fe of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_fe

    @d_fe.setter
    def d_fe(self, d_fe):
        """Sets the d_fe of this FedCalculator.


        :param d_fe: The d_fe of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_fe is None:
            raise ValueError("Invalid value for `d_fe`, must not be `None`")  # noqa: E501

        self._d_fe = d_fe

    @property
    def d_k5(self):
        """Gets the d_k5 of this FedCalculator.  # noqa: E501


        :return: The d_k5 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_k5

    @d_k5.setter
    def d_k5(self, d_k5):
        """Sets the d_k5 of this FedCalculator.


        :param d_k5: The d_k5 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_k5 is None:
            raise ValueError("Invalid value for `d_k5`, must not be `None`")  # noqa: E501

        self._d_k5 = d_k5

    @property
    def d_mo(self):
        """Gets the d_mo of this FedCalculator.  # noqa: E501


        :return: The d_mo of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_mo

    @d_mo.setter
    def d_mo(self, d_mo):
        """Sets the d_mo of this FedCalculator.


        :param d_mo: The d_mo of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_mo is None:
            raise ValueError("Invalid value for `d_mo`, must not be `None`")  # noqa: E501

        self._d_mo = d_mo

    @property
    def d_co(self):
        """Gets the d_co of this FedCalculator.  # noqa: E501


        :return: The d_co of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_co

    @d_co.setter
    def d_co(self, d_co):
        """Sets the d_co of this FedCalculator.


        :param d_co: The d_co of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_co is None:
            raise ValueError("Invalid value for `d_co`, must not be `None`")  # noqa: E501

        self._d_co = d_co

    @property
    def d_i(self):
        """Gets the d_i of this FedCalculator.  # noqa: E501


        :return: The d_i of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_i

    @d_i.setter
    def d_i(self, d_i):
        """Sets the d_i of this FedCalculator.


        :param d_i: The d_i of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_i is None:
            raise ValueError("Invalid value for `d_i`, must not be `None`")  # noqa: E501

        self._d_i = d_i

    @property
    def d_k6(self):
        """Gets the d_k6 of this FedCalculator.  # noqa: E501


        :return: The d_k6 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._d_k6

    @d_k6.setter
    def d_k6(self, d_k6):
        """Sets the d_k6 of this FedCalculator.


        :param d_k6: The d_k6 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if d_k6 is None:
            raise ValueError("Invalid value for `d_k6`, must not be `None`")  # noqa: E501

        self._d_k6 = d_k6

    @property
    def e_k2(self):
        """Gets the e_k2 of this FedCalculator.  # noqa: E501


        :return: The e_k2 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_k2

    @e_k2.setter
    def e_k2(self, e_k2):
        """Sets the e_k2 of this FedCalculator.


        :param e_k2: The e_k2 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_k2 is None:
            raise ValueError("Invalid value for `e_k2`, must not be `None`")  # noqa: E501

        self._e_k2 = e_k2

    @property
    def e_n(self):
        """Gets the e_n of this FedCalculator.  # noqa: E501


        :return: The e_n of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_n

    @e_n.setter
    def e_n(self, e_n):
        """Sets the e_n of this FedCalculator.


        :param e_n: The e_n of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_n is None:
            raise ValueError("Invalid value for `e_n`, must not be `None`")  # noqa: E501

        self._e_n = e_n

    @property
    def e_p(self):
        """Gets the e_p of this FedCalculator.  # noqa: E501


        :return: The e_p of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_p

    @e_p.setter
    def e_p(self, e_p):
        """Sets the e_p of this FedCalculator.


        :param e_p: The e_p of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_p is None:
            raise ValueError("Invalid value for `e_p`, must not be `None`")  # noqa: E501

        self._e_p = e_p

    @property
    def e_ks(self):
        """Gets the e_ks of this FedCalculator.  # noqa: E501


        :return: The e_ks of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_ks

    @e_ks.setter
    def e_ks(self, e_ks):
        """Sets the e_ks of this FedCalculator.


        :param e_ks: The e_ks of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_ks is None:
            raise ValueError("Invalid value for `e_ks`, must not be `None`")  # noqa: E501

        self._e_ks = e_ks

    @property
    def e_kcl(self):
        """Gets the e_kcl of this FedCalculator.  # noqa: E501


        :return: The e_kcl of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_kcl

    @e_kcl.setter
    def e_kcl(self, e_kcl):
        """Sets the e_kcl of this FedCalculator.


        :param e_kcl: The e_kcl of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_kcl is None:
            raise ValueError("Invalid value for `e_kcl`, must not be `None`")  # noqa: E501

        self._e_kcl = e_kcl

    @property
    def e_k3(self):
        """Gets the e_k3 of this FedCalculator.  # noqa: E501


        :return: The e_k3 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_k3

    @e_k3.setter
    def e_k3(self, e_k3):
        """Sets the e_k3 of this FedCalculator.


        :param e_k3: The e_k3 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_k3 is None:
            raise ValueError("Invalid value for `e_k3`, must not be `None`")  # noqa: E501

        self._e_k3 = e_k3

    @property
    def e_ca(self):
        """Gets the e_ca of this FedCalculator.  # noqa: E501


        :return: The e_ca of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_ca

    @e_ca.setter
    def e_ca(self, e_ca):
        """Sets the e_ca of this FedCalculator.


        :param e_ca: The e_ca of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_ca is None:
            raise ValueError("Invalid value for `e_ca`, must not be `None`")  # noqa: E501

        self._e_ca = e_ca

    @property
    def e_mg(self):
        """Gets the e_mg of this FedCalculator.  # noqa: E501


        :return: The e_mg of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_mg

    @e_mg.setter
    def e_mg(self, e_mg):
        """Sets the e_mg of this FedCalculator.


        :param e_mg: The e_mg of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_mg is None:
            raise ValueError("Invalid value for `e_mg`, must not be `None`")  # noqa: E501

        self._e_mg = e_mg

    @property
    def e_b(self):
        """Gets the e_b of this FedCalculator.  # noqa: E501


        :return: The e_b of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_b

    @e_b.setter
    def e_b(self, e_b):
        """Sets the e_b of this FedCalculator.


        :param e_b: The e_b of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_b is None:
            raise ValueError("Invalid value for `e_b`, must not be `None`")  # noqa: E501

        self._e_b = e_b

    @property
    def e_cu(self):
        """Gets the e_cu of this FedCalculator.  # noqa: E501


        :return: The e_cu of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_cu

    @e_cu.setter
    def e_cu(self, e_cu):
        """Sets the e_cu of this FedCalculator.


        :param e_cu: The e_cu of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_cu is None:
            raise ValueError("Invalid value for `e_cu`, must not be `None`")  # noqa: E501

        self._e_cu = e_cu

    @property
    def e_k4(self):
        """Gets the e_k4 of this FedCalculator.  # noqa: E501


        :return: The e_k4 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_k4

    @e_k4.setter
    def e_k4(self, e_k4):
        """Sets the e_k4 of this FedCalculator.


        :param e_k4: The e_k4 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_k4 is None:
            raise ValueError("Invalid value for `e_k4`, must not be `None`")  # noqa: E501

        self._e_k4 = e_k4

    @property
    def e_zn(self):
        """Gets the e_zn of this FedCalculator.  # noqa: E501


        :return: The e_zn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_zn

    @e_zn.setter
    def e_zn(self, e_zn):
        """Sets the e_zn of this FedCalculator.


        :param e_zn: The e_zn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_zn is None:
            raise ValueError("Invalid value for `e_zn`, must not be `None`")  # noqa: E501

        self._e_zn = e_zn

    @property
    def e_mn(self):
        """Gets the e_mn of this FedCalculator.  # noqa: E501


        :return: The e_mn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_mn

    @e_mn.setter
    def e_mn(self, e_mn):
        """Sets the e_mn of this FedCalculator.


        :param e_mn: The e_mn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_mn is None:
            raise ValueError("Invalid value for `e_mn`, must not be `None`")  # noqa: E501

        self._e_mn = e_mn

    @property
    def e_fe(self):
        """Gets the e_fe of this FedCalculator.  # noqa: E501


        :return: The e_fe of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_fe

    @e_fe.setter
    def e_fe(self, e_fe):
        """Sets the e_fe of this FedCalculator.


        :param e_fe: The e_fe of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_fe is None:
            raise ValueError("Invalid value for `e_fe`, must not be `None`")  # noqa: E501

        self._e_fe = e_fe

    @property
    def e_k5(self):
        """Gets the e_k5 of this FedCalculator.  # noqa: E501


        :return: The e_k5 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_k5

    @e_k5.setter
    def e_k5(self, e_k5):
        """Sets the e_k5 of this FedCalculator.


        :param e_k5: The e_k5 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_k5 is None:
            raise ValueError("Invalid value for `e_k5`, must not be `None`")  # noqa: E501

        self._e_k5 = e_k5

    @property
    def e_mo(self):
        """Gets the e_mo of this FedCalculator.  # noqa: E501


        :return: The e_mo of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_mo

    @e_mo.setter
    def e_mo(self, e_mo):
        """Sets the e_mo of this FedCalculator.


        :param e_mo: The e_mo of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_mo is None:
            raise ValueError("Invalid value for `e_mo`, must not be `None`")  # noqa: E501

        self._e_mo = e_mo

    @property
    def e_co(self):
        """Gets the e_co of this FedCalculator.  # noqa: E501


        :return: The e_co of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_co

    @e_co.setter
    def e_co(self, e_co):
        """Sets the e_co of this FedCalculator.


        :param e_co: The e_co of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_co is None:
            raise ValueError("Invalid value for `e_co`, must not be `None`")  # noqa: E501

        self._e_co = e_co

    @property
    def e_i(self):
        """Gets the e_i of this FedCalculator.  # noqa: E501


        :return: The e_i of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_i

    @e_i.setter
    def e_i(self, e_i):
        """Sets the e_i of this FedCalculator.


        :param e_i: The e_i of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_i is None:
            raise ValueError("Invalid value for `e_i`, must not be `None`")  # noqa: E501

        self._e_i = e_i

    @property
    def e_k6(self):
        """Gets the e_k6 of this FedCalculator.  # noqa: E501


        :return: The e_k6 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._e_k6

    @e_k6.setter
    def e_k6(self, e_k6):
        """Sets the e_k6 of this FedCalculator.


        :param e_k6: The e_k6 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if e_k6 is None:
            raise ValueError("Invalid value for `e_k6`, must not be `None`")  # noqa: E501

        self._e_k6 = e_k6

    @property
    def g_k2(self):
        """Gets the g_k2 of this FedCalculator.  # noqa: E501


        :return: The g_k2 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_k2

    @g_k2.setter
    def g_k2(self, g_k2):
        """Sets the g_k2 of this FedCalculator.


        :param g_k2: The g_k2 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_k2 is None:
            raise ValueError("Invalid value for `g_k2`, must not be `None`")  # noqa: E501

        self._g_k2 = g_k2

    @property
    def g_n(self):
        """Gets the g_n of this FedCalculator.  # noqa: E501


        :return: The g_n of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_n

    @g_n.setter
    def g_n(self, g_n):
        """Sets the g_n of this FedCalculator.


        :param g_n: The g_n of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_n is None:
            raise ValueError("Invalid value for `g_n`, must not be `None`")  # noqa: E501

        self._g_n = g_n

    @property
    def g_p(self):
        """Gets the g_p of this FedCalculator.  # noqa: E501


        :return: The g_p of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_p

    @g_p.setter
    def g_p(self, g_p):
        """Sets the g_p of this FedCalculator.


        :param g_p: The g_p of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_p is None:
            raise ValueError("Invalid value for `g_p`, must not be `None`")  # noqa: E501

        self._g_p = g_p

    @property
    def g_ks(self):
        """Gets the g_ks of this FedCalculator.  # noqa: E501


        :return: The g_ks of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_ks

    @g_ks.setter
    def g_ks(self, g_ks):
        """Sets the g_ks of this FedCalculator.


        :param g_ks: The g_ks of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_ks is None:
            raise ValueError("Invalid value for `g_ks`, must not be `None`")  # noqa: E501

        self._g_ks = g_ks

    @property
    def g_kcl(self):
        """Gets the g_kcl of this FedCalculator.  # noqa: E501


        :return: The g_kcl of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_kcl

    @g_kcl.setter
    def g_kcl(self, g_kcl):
        """Sets the g_kcl of this FedCalculator.


        :param g_kcl: The g_kcl of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_kcl is None:
            raise ValueError("Invalid value for `g_kcl`, must not be `None`")  # noqa: E501

        self._g_kcl = g_kcl

    @property
    def g_k3(self):
        """Gets the g_k3 of this FedCalculator.  # noqa: E501


        :return: The g_k3 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_k3

    @g_k3.setter
    def g_k3(self, g_k3):
        """Sets the g_k3 of this FedCalculator.


        :param g_k3: The g_k3 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_k3 is None:
            raise ValueError("Invalid value for `g_k3`, must not be `None`")  # noqa: E501

        self._g_k3 = g_k3

    @property
    def f_k3(self):
        """Gets the f_k3 of this FedCalculator.  # noqa: E501


        :return: The f_k3 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_k3

    @f_k3.setter
    def f_k3(self, f_k3):
        """Sets the f_k3 of this FedCalculator.


        :param f_k3: The f_k3 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_k3 is None:
            raise ValueError("Invalid value for `f_k3`, must not be `None`")  # noqa: E501

        self._f_k3 = f_k3

    @property
    def f_ca(self):
        """Gets the f_ca of this FedCalculator.  # noqa: E501


        :return: The f_ca of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_ca

    @f_ca.setter
    def f_ca(self, f_ca):
        """Sets the f_ca of this FedCalculator.


        :param f_ca: The f_ca of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_ca is None:
            raise ValueError("Invalid value for `f_ca`, must not be `None`")  # noqa: E501

        self._f_ca = f_ca

    @property
    def f_mg(self):
        """Gets the f_mg of this FedCalculator.  # noqa: E501


        :return: The f_mg of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_mg

    @f_mg.setter
    def f_mg(self, f_mg):
        """Sets the f_mg of this FedCalculator.


        :param f_mg: The f_mg of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_mg is None:
            raise ValueError("Invalid value for `f_mg`, must not be `None`")  # noqa: E501

        self._f_mg = f_mg

    @property
    def f_b(self):
        """Gets the f_b of this FedCalculator.  # noqa: E501


        :return: The f_b of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_b

    @f_b.setter
    def f_b(self, f_b):
        """Sets the f_b of this FedCalculator.


        :param f_b: The f_b of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_b is None:
            raise ValueError("Invalid value for `f_b`, must not be `None`")  # noqa: E501

        self._f_b = f_b

    @property
    def f_cu(self):
        """Gets the f_cu of this FedCalculator.  # noqa: E501


        :return: The f_cu of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_cu

    @f_cu.setter
    def f_cu(self, f_cu):
        """Sets the f_cu of this FedCalculator.


        :param f_cu: The f_cu of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_cu is None:
            raise ValueError("Invalid value for `f_cu`, must not be `None`")  # noqa: E501

        self._f_cu = f_cu

    @property
    def f_k4(self):
        """Gets the f_k4 of this FedCalculator.  # noqa: E501


        :return: The f_k4 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_k4

    @f_k4.setter
    def f_k4(self, f_k4):
        """Sets the f_k4 of this FedCalculator.


        :param f_k4: The f_k4 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_k4 is None:
            raise ValueError("Invalid value for `f_k4`, must not be `None`")  # noqa: E501

        self._f_k4 = f_k4

    @property
    def g_k4(self):
        """Gets the g_k4 of this FedCalculator.  # noqa: E501


        :return: The g_k4 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_k4

    @g_k4.setter
    def g_k4(self, g_k4):
        """Sets the g_k4 of this FedCalculator.


        :param g_k4: The g_k4 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_k4 is None:
            raise ValueError("Invalid value for `g_k4`, must not be `None`")  # noqa: E501

        self._g_k4 = g_k4

    @property
    def g_zn(self):
        """Gets the g_zn of this FedCalculator.  # noqa: E501


        :return: The g_zn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_zn

    @g_zn.setter
    def g_zn(self, g_zn):
        """Sets the g_zn of this FedCalculator.


        :param g_zn: The g_zn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_zn is None:
            raise ValueError("Invalid value for `g_zn`, must not be `None`")  # noqa: E501

        self._g_zn = g_zn

    @property
    def g_mn(self):
        """Gets the g_mn of this FedCalculator.  # noqa: E501


        :return: The g_mn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_mn

    @g_mn.setter
    def g_mn(self, g_mn):
        """Sets the g_mn of this FedCalculator.


        :param g_mn: The g_mn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_mn is None:
            raise ValueError("Invalid value for `g_mn`, must not be `None`")  # noqa: E501

        self._g_mn = g_mn

    @property
    def g_fe(self):
        """Gets the g_fe of this FedCalculator.  # noqa: E501


        :return: The g_fe of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_fe

    @g_fe.setter
    def g_fe(self, g_fe):
        """Sets the g_fe of this FedCalculator.


        :param g_fe: The g_fe of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_fe is None:
            raise ValueError("Invalid value for `g_fe`, must not be `None`")  # noqa: E501

        self._g_fe = g_fe

    @property
    def g_k5(self):
        """Gets the g_k5 of this FedCalculator.  # noqa: E501


        :return: The g_k5 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._g_k5

    @g_k5.setter
    def g_k5(self, g_k5):
        """Sets the g_k5 of this FedCalculator.


        :param g_k5: The g_k5 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if g_k5 is None:
            raise ValueError("Invalid value for `g_k5`, must not be `None`")  # noqa: E501

        self._g_k5 = g_k5

    @property
    def f_k5(self):
        """Gets the f_k5 of this FedCalculator.  # noqa: E501


        :return: The f_k5 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_k5

    @f_k5.setter
    def f_k5(self, f_k5):
        """Sets the f_k5 of this FedCalculator.


        :param f_k5: The f_k5 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_k5 is None:
            raise ValueError("Invalid value for `f_k5`, must not be `None`")  # noqa: E501

        self._f_k5 = f_k5

    @property
    def f_mo(self):
        """Gets the f_mo of this FedCalculator.  # noqa: E501


        :return: The f_mo of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_mo

    @f_mo.setter
    def f_mo(self, f_mo):
        """Sets the f_mo of this FedCalculator.


        :param f_mo: The f_mo of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_mo is None:
            raise ValueError("Invalid value for `f_mo`, must not be `None`")  # noqa: E501

        self._f_mo = f_mo

    @property
    def f_co(self):
        """Gets the f_co of this FedCalculator.  # noqa: E501


        :return: The f_co of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_co

    @f_co.setter
    def f_co(self, f_co):
        """Sets the f_co of this FedCalculator.


        :param f_co: The f_co of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_co is None:
            raise ValueError("Invalid value for `f_co`, must not be `None`")  # noqa: E501

        self._f_co = f_co

    @property
    def f_i(self):
        """Gets the f_i of this FedCalculator.  # noqa: E501


        :return: The f_i of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_i

    @f_i.setter
    def f_i(self, f_i):
        """Sets the f_i of this FedCalculator.


        :param f_i: The f_i of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_i is None:
            raise ValueError("Invalid value for `f_i`, must not be `None`")  # noqa: E501

        self._f_i = f_i

    @property
    def f_k6(self):
        """Gets the f_k6 of this FedCalculator.  # noqa: E501


        :return: The f_k6 of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._f_k6

    @f_k6.setter
    def f_k6(self, f_k6):
        """Sets the f_k6 of this FedCalculator.


        :param f_k6: The f_k6 of this FedCalculator.  # noqa: E501
        :type: float
        """
        if f_k6 is None:
            raise ValueError("Invalid value for `f_k6`, must not be `None`")  # noqa: E501

        self._f_k6 = f_k6

    @property
    def h_n(self):
        """Gets the h_n of this FedCalculator.  # noqa: E501


        :return: The h_n of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_n

    @h_n.setter
    def h_n(self, h_n):
        """Sets the h_n of this FedCalculator.


        :param h_n: The h_n of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_n is None:
            raise ValueError("Invalid value for `h_n`, must not be `None`")  # noqa: E501

        self._h_n = h_n

    @property
    def h_p(self):
        """Gets the h_p of this FedCalculator.  # noqa: E501


        :return: The h_p of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_p

    @h_p.setter
    def h_p(self, h_p):
        """Sets the h_p of this FedCalculator.


        :param h_p: The h_p of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_p is None:
            raise ValueError("Invalid value for `h_p`, must not be `None`")  # noqa: E501

        self._h_p = h_p

    @property
    def h_ks(self):
        """Gets the h_ks of this FedCalculator.  # noqa: E501


        :return: The h_ks of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_ks

    @h_ks.setter
    def h_ks(self, h_ks):
        """Sets the h_ks of this FedCalculator.


        :param h_ks: The h_ks of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_ks is None:
            raise ValueError("Invalid value for `h_ks`, must not be `None`")  # noqa: E501

        self._h_ks = h_ks

    @property
    def h_kcl(self):
        """Gets the h_kcl of this FedCalculator.  # noqa: E501


        :return: The h_kcl of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_kcl

    @h_kcl.setter
    def h_kcl(self, h_kcl):
        """Sets the h_kcl of this FedCalculator.


        :param h_kcl: The h_kcl of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_kcl is None:
            raise ValueError("Invalid value for `h_kcl`, must not be `None`")  # noqa: E501

        self._h_kcl = h_kcl

    @property
    def h_ca(self):
        """Gets the h_ca of this FedCalculator.  # noqa: E501


        :return: The h_ca of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_ca

    @h_ca.setter
    def h_ca(self, h_ca):
        """Sets the h_ca of this FedCalculator.


        :param h_ca: The h_ca of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_ca is None:
            raise ValueError("Invalid value for `h_ca`, must not be `None`")  # noqa: E501

        self._h_ca = h_ca

    @property
    def h_mg(self):
        """Gets the h_mg of this FedCalculator.  # noqa: E501


        :return: The h_mg of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_mg

    @h_mg.setter
    def h_mg(self, h_mg):
        """Sets the h_mg of this FedCalculator.


        :param h_mg: The h_mg of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_mg is None:
            raise ValueError("Invalid value for `h_mg`, must not be `None`")  # noqa: E501

        self._h_mg = h_mg

    @property
    def h_b(self):
        """Gets the h_b of this FedCalculator.  # noqa: E501


        :return: The h_b of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_b

    @h_b.setter
    def h_b(self, h_b):
        """Sets the h_b of this FedCalculator.


        :param h_b: The h_b of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_b is None:
            raise ValueError("Invalid value for `h_b`, must not be `None`")  # noqa: E501

        self._h_b = h_b

    @property
    def h_cu(self):
        """Gets the h_cu of this FedCalculator.  # noqa: E501


        :return: The h_cu of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_cu

    @h_cu.setter
    def h_cu(self, h_cu):
        """Sets the h_cu of this FedCalculator.


        :param h_cu: The h_cu of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_cu is None:
            raise ValueError("Invalid value for `h_cu`, must not be `None`")  # noqa: E501

        self._h_cu = h_cu

    @property
    def h_zn(self):
        """Gets the h_zn of this FedCalculator.  # noqa: E501


        :return: The h_zn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_zn

    @h_zn.setter
    def h_zn(self, h_zn):
        """Sets the h_zn of this FedCalculator.


        :param h_zn: The h_zn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_zn is None:
            raise ValueError("Invalid value for `h_zn`, must not be `None`")  # noqa: E501

        self._h_zn = h_zn

    @property
    def h_mn(self):
        """Gets the h_mn of this FedCalculator.  # noqa: E501


        :return: The h_mn of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_mn

    @h_mn.setter
    def h_mn(self, h_mn):
        """Sets the h_mn of this FedCalculator.


        :param h_mn: The h_mn of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_mn is None:
            raise ValueError("Invalid value for `h_mn`, must not be `None`")  # noqa: E501

        self._h_mn = h_mn

    @property
    def h_fe(self):
        """Gets the h_fe of this FedCalculator.  # noqa: E501


        :return: The h_fe of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_fe

    @h_fe.setter
    def h_fe(self, h_fe):
        """Sets the h_fe of this FedCalculator.


        :param h_fe: The h_fe of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_fe is None:
            raise ValueError("Invalid value for `h_fe`, must not be `None`")  # noqa: E501

        self._h_fe = h_fe

    @property
    def h_mo(self):
        """Gets the h_mo of this FedCalculator.  # noqa: E501


        :return: The h_mo of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_mo

    @h_mo.setter
    def h_mo(self, h_mo):
        """Sets the h_mo of this FedCalculator.


        :param h_mo: The h_mo of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_mo is None:
            raise ValueError("Invalid value for `h_mo`, must not be `None`")  # noqa: E501

        self._h_mo = h_mo

    @property
    def h_co(self):
        """Gets the h_co of this FedCalculator.  # noqa: E501


        :return: The h_co of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_co

    @h_co.setter
    def h_co(self, h_co):
        """Sets the h_co of this FedCalculator.


        :param h_co: The h_co of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_co is None:
            raise ValueError("Invalid value for `h_co`, must not be `None`")  # noqa: E501

        self._h_co = h_co

    @property
    def h_i(self):
        """Gets the h_i of this FedCalculator.  # noqa: E501


        :return: The h_i of this FedCalculator.  # noqa: E501
        :rtype: float
        """
        return self._h_i

    @h_i.setter
    def h_i(self, h_i):
        """Sets the h_i of this FedCalculator.


        :param h_i: The h_i of this FedCalculator.  # noqa: E501
        :type: float
        """
        if h_i is None:
            raise ValueError("Invalid value for `h_i`, must not be `None`")  # noqa: E501

        self._h_i = h_i

    @property
    def user(self):
        """Gets the user of this FedCalculator.  # noqa: E501


        :return: The user of this FedCalculator.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this FedCalculator.


        :param user: The user of this FedCalculator.  # noqa: E501
        :type: int
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FedCalculator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FedCalculator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
