# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PotatoQuestionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'answers': 'list[PotatoAnswerDto]',
        'culture': 'Culture',
        'disease_number': 'str',
        'id': 'int',
        'is_terminal': 'bool',
        'number': 'str',
        'text': 'str'
    }

    attribute_map = {
        'answers': 'answers',
        'culture': 'culture',
        'disease_number': 'diseaseNumber',
        'id': 'id',
        'is_terminal': 'isTerminal',
        'number': 'number',
        'text': 'text'
    }

    def __init__(self, answers=None, culture=None, disease_number=None, id=None, is_terminal=None, number=None, text=None, _configuration=None):  # noqa: E501
        """PotatoQuestionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._answers = None
        self._culture = None
        self._disease_number = None
        self._id = None
        self._is_terminal = None
        self._number = None
        self._text = None
        self.discriminator = None

        if answers is not None:
            self.answers = answers
        if culture is not None:
            self.culture = culture
        if disease_number is not None:
            self.disease_number = disease_number
        if id is not None:
            self.id = id
        if is_terminal is not None:
            self.is_terminal = is_terminal
        if number is not None:
            self.number = number
        if text is not None:
            self.text = text

    @property
    def answers(self):
        """Gets the answers of this PotatoQuestionDto.  # noqa: E501


        :return: The answers of this PotatoQuestionDto.  # noqa: E501
        :rtype: list[PotatoAnswerDto]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this PotatoQuestionDto.


        :param answers: The answers of this PotatoQuestionDto.  # noqa: E501
        :type: list[PotatoAnswerDto]
        """

        self._answers = answers

    @property
    def culture(self):
        """Gets the culture of this PotatoQuestionDto.  # noqa: E501


        :return: The culture of this PotatoQuestionDto.  # noqa: E501
        :rtype: Culture
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this PotatoQuestionDto.


        :param culture: The culture of this PotatoQuestionDto.  # noqa: E501
        :type: Culture
        """

        self._culture = culture

    @property
    def disease_number(self):
        """Gets the disease_number of this PotatoQuestionDto.  # noqa: E501


        :return: The disease_number of this PotatoQuestionDto.  # noqa: E501
        :rtype: str
        """
        return self._disease_number

    @disease_number.setter
    def disease_number(self, disease_number):
        """Sets the disease_number of this PotatoQuestionDto.


        :param disease_number: The disease_number of this PotatoQuestionDto.  # noqa: E501
        :type: str
        """

        self._disease_number = disease_number

    @property
    def id(self):
        """Gets the id of this PotatoQuestionDto.  # noqa: E501


        :return: The id of this PotatoQuestionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PotatoQuestionDto.


        :param id: The id of this PotatoQuestionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_terminal(self):
        """Gets the is_terminal of this PotatoQuestionDto.  # noqa: E501


        :return: The is_terminal of this PotatoQuestionDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_terminal

    @is_terminal.setter
    def is_terminal(self, is_terminal):
        """Sets the is_terminal of this PotatoQuestionDto.


        :param is_terminal: The is_terminal of this PotatoQuestionDto.  # noqa: E501
        :type: bool
        """

        self._is_terminal = is_terminal

    @property
    def number(self):
        """Gets the number of this PotatoQuestionDto.  # noqa: E501


        :return: The number of this PotatoQuestionDto.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PotatoQuestionDto.


        :param number: The number of this PotatoQuestionDto.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def text(self):
        """Gets the text of this PotatoQuestionDto.  # noqa: E501


        :return: The text of this PotatoQuestionDto.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PotatoQuestionDto.


        :param text: The text of this PotatoQuestionDto.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PotatoQuestionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PotatoQuestionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PotatoQuestionDto):
            return True

        return self.to_dict() != other.to_dict()
