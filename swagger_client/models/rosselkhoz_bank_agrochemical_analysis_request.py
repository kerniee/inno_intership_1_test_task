# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RosselkhozBankAgrochemicalAnalysisRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_uid': 'str',
        'status': 'str',
        'created': 'datetime',
        'updated': 'datetime',
        'client_uid': 'str',
        'name': 'str',
        'phone': 'str',
        'region': 'int',
        'district': 'str',
        'address': 'str',
        'field_number': 'str',
        'sampling_date': 'date',
        'sampling_coordinates': 'str',
        'sampling_depth': 'int',
        'delivery_method': 'str',
        'pickup_address': 'str',
        'agrochemical_calculator': 'AllOfRosselkhozBankAgrochemicalAnalysisRequestAgrochemicalCalculator',
        'url_for_pdf': 'str'
    }

    attribute_map = {
        'request_uid': 'request_uid',
        'status': 'status',
        'created': 'created',
        'updated': 'updated',
        'client_uid': 'client_uid',
        'name': 'name',
        'phone': 'phone',
        'region': 'region',
        'district': 'district',
        'address': 'address',
        'field_number': 'field_number',
        'sampling_date': 'sampling_date',
        'sampling_coordinates': 'sampling_coordinates',
        'sampling_depth': 'sampling_depth',
        'delivery_method': 'delivery_method',
        'pickup_address': 'pickup_address',
        'agrochemical_calculator': 'agrochemical_calculator',
        'url_for_pdf': 'url_for_pdf'
    }

    def __init__(self, request_uid=None, status=None, created=None, updated=None, client_uid=None, name=None, phone=None, region=None, district=None, address=None, field_number=None, sampling_date=None, sampling_coordinates=None, sampling_depth=None, delivery_method=None, pickup_address=None, agrochemical_calculator=None, url_for_pdf=None):  # noqa: E501
        """RosselkhozBankAgrochemicalAnalysisRequest - a model defined in Swagger"""  # noqa: E501
        self._request_uid = None
        self._status = None
        self._created = None
        self._updated = None
        self._client_uid = None
        self._name = None
        self._phone = None
        self._region = None
        self._district = None
        self._address = None
        self._field_number = None
        self._sampling_date = None
        self._sampling_coordinates = None
        self._sampling_depth = None
        self._delivery_method = None
        self._pickup_address = None
        self._agrochemical_calculator = None
        self._url_for_pdf = None
        self.discriminator = None
        self.request_uid = request_uid
        if status is not None:
            self.status = status
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        self.client_uid = client_uid
        self.name = name
        if phone is not None:
            self.phone = phone
        self.region = region
        if district is not None:
            self.district = district
        if address is not None:
            self.address = address
        if field_number is not None:
            self.field_number = field_number
        if sampling_date is not None:
            self.sampling_date = sampling_date
        if sampling_coordinates is not None:
            self.sampling_coordinates = sampling_coordinates
        self.sampling_depth = sampling_depth
        if delivery_method is not None:
            self.delivery_method = delivery_method
        if pickup_address is not None:
            self.pickup_address = pickup_address
        self.agrochemical_calculator = agrochemical_calculator
        if url_for_pdf is not None:
            self.url_for_pdf = url_for_pdf

    @property
    def request_uid(self):
        """Gets the request_uid of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The request_uid of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_uid

    @request_uid.setter
    def request_uid(self, request_uid):
        """Sets the request_uid of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param request_uid: The request_uid of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """
        if request_uid is None:
            raise ValueError("Invalid value for `request_uid`, must not be `None`")  # noqa: E501

        self._request_uid = request_uid

    @property
    def status(self):
        """Gets the status of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The status of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param status: The status of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["created", "delivery", "research", "done", ""]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created(self):
        """Gets the created of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The created of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param created: The created of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The updated of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param updated: The updated of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def client_uid(self):
        """Gets the client_uid of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The client_uid of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_uid

    @client_uid.setter
    def client_uid(self, client_uid):
        """Sets the client_uid of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param client_uid: The client_uid of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """
        if client_uid is None:
            raise ValueError("Invalid value for `client_uid`, must not be `None`")  # noqa: E501

        self._client_uid = client_uid

    @property
    def name(self):
        """Gets the name of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The name of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param name: The name of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The phone of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param phone: The phone of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def region(self):
        """Gets the region of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The region of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param region: The region of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: int
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def district(self):
        """Gets the district of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The district of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param district: The district of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def address(self):
        """Gets the address of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The address of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param address: The address of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def field_number(self):
        """Gets the field_number of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The field_number of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._field_number

    @field_number.setter
    def field_number(self, field_number):
        """Sets the field_number of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param field_number: The field_number of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._field_number = field_number

    @property
    def sampling_date(self):
        """Gets the sampling_date of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The sampling_date of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: date
        """
        return self._sampling_date

    @sampling_date.setter
    def sampling_date(self, sampling_date):
        """Sets the sampling_date of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param sampling_date: The sampling_date of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: date
        """

        self._sampling_date = sampling_date

    @property
    def sampling_coordinates(self):
        """Gets the sampling_coordinates of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The sampling_coordinates of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._sampling_coordinates

    @sampling_coordinates.setter
    def sampling_coordinates(self, sampling_coordinates):
        """Sets the sampling_coordinates of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param sampling_coordinates: The sampling_coordinates of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._sampling_coordinates = sampling_coordinates

    @property
    def sampling_depth(self):
        """Gets the sampling_depth of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The sampling_depth of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: int
        """
        return self._sampling_depth

    @sampling_depth.setter
    def sampling_depth(self, sampling_depth):
        """Sets the sampling_depth of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param sampling_depth: The sampling_depth of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: int
        """
        if sampling_depth is None:
            raise ValueError("Invalid value for `sampling_depth`, must not be `None`")  # noqa: E501

        self._sampling_depth = sampling_depth

    @property
    def delivery_method(self):
        """Gets the delivery_method of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The delivery_method of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param delivery_method: The delivery_method of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["self", "courier", ""]  # noqa: E501
        if delivery_method not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_method` ({0}), must be one of {1}"  # noqa: E501
                .format(delivery_method, allowed_values)
            )

        self._delivery_method = delivery_method

    @property
    def pickup_address(self):
        """Gets the pickup_address of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The pickup_address of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._pickup_address

    @pickup_address.setter
    def pickup_address(self, pickup_address):
        """Sets the pickup_address of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param pickup_address: The pickup_address of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._pickup_address = pickup_address

    @property
    def agrochemical_calculator(self):
        """Gets the agrochemical_calculator of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The agrochemical_calculator of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: AllOfRosselkhozBankAgrochemicalAnalysisRequestAgrochemicalCalculator
        """
        return self._agrochemical_calculator

    @agrochemical_calculator.setter
    def agrochemical_calculator(self, agrochemical_calculator):
        """Sets the agrochemical_calculator of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param agrochemical_calculator: The agrochemical_calculator of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: AllOfRosselkhozBankAgrochemicalAnalysisRequestAgrochemicalCalculator
        """
        if agrochemical_calculator is None:
            raise ValueError("Invalid value for `agrochemical_calculator`, must not be `None`")  # noqa: E501

        self._agrochemical_calculator = agrochemical_calculator

    @property
    def url_for_pdf(self):
        """Gets the url_for_pdf of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501


        :return: The url_for_pdf of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._url_for_pdf

    @url_for_pdf.setter
    def url_for_pdf(self, url_for_pdf):
        """Sets the url_for_pdf of this RosselkhozBankAgrochemicalAnalysisRequest.


        :param url_for_pdf: The url_for_pdf of this RosselkhozBankAgrochemicalAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._url_for_pdf = url_for_pdf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RosselkhozBankAgrochemicalAnalysisRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RosselkhozBankAgrochemicalAnalysisRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
