# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlantProtectionProductToRegistration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'registrant': 'PlantProtectionRegistrant',
        'registration_number': 'str',
        'expiration_date': 'date',
        'plant_protection_product': 'int'
    }

    attribute_map = {
        'id': 'id',
        'registrant': 'registrant',
        'registration_number': 'registration_number',
        'expiration_date': 'expiration_date',
        'plant_protection_product': 'plant_protection_product'
    }

    def __init__(self, id=None, registrant=None, registration_number=None, expiration_date=None, plant_protection_product=None):  # noqa: E501
        """PlantProtectionProductToRegistration - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._registrant = None
        self._registration_number = None
        self._expiration_date = None
        self._plant_protection_product = None
        self.discriminator = None
        self.id = id
        self.registrant = registrant
        self.registration_number = registration_number
        self.expiration_date = expiration_date
        self.plant_protection_product = plant_protection_product

    @property
    def id(self):
        """Gets the id of this PlantProtectionProductToRegistration.  # noqa: E501


        :return: The id of this PlantProtectionProductToRegistration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlantProtectionProductToRegistration.


        :param id: The id of this PlantProtectionProductToRegistration.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def registrant(self):
        """Gets the registrant of this PlantProtectionProductToRegistration.  # noqa: E501


        :return: The registrant of this PlantProtectionProductToRegistration.  # noqa: E501
        :rtype: PlantProtectionRegistrant
        """
        return self._registrant

    @registrant.setter
    def registrant(self, registrant):
        """Sets the registrant of this PlantProtectionProductToRegistration.


        :param registrant: The registrant of this PlantProtectionProductToRegistration.  # noqa: E501
        :type: PlantProtectionRegistrant
        """
        if registrant is None:
            raise ValueError("Invalid value for `registrant`, must not be `None`")  # noqa: E501

        self._registrant = registrant

    @property
    def registration_number(self):
        """Gets the registration_number of this PlantProtectionProductToRegistration.  # noqa: E501


        :return: The registration_number of this PlantProtectionProductToRegistration.  # noqa: E501
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this PlantProtectionProductToRegistration.


        :param registration_number: The registration_number of this PlantProtectionProductToRegistration.  # noqa: E501
        :type: str
        """
        if registration_number is None:
            raise ValueError("Invalid value for `registration_number`, must not be `None`")  # noqa: E501

        self._registration_number = registration_number

    @property
    def expiration_date(self):
        """Gets the expiration_date of this PlantProtectionProductToRegistration.  # noqa: E501


        :return: The expiration_date of this PlantProtectionProductToRegistration.  # noqa: E501
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this PlantProtectionProductToRegistration.


        :param expiration_date: The expiration_date of this PlantProtectionProductToRegistration.  # noqa: E501
        :type: date
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")  # noqa: E501

        self._expiration_date = expiration_date

    @property
    def plant_protection_product(self):
        """Gets the plant_protection_product of this PlantProtectionProductToRegistration.  # noqa: E501


        :return: The plant_protection_product of this PlantProtectionProductToRegistration.  # noqa: E501
        :rtype: int
        """
        return self._plant_protection_product

    @plant_protection_product.setter
    def plant_protection_product(self, plant_protection_product):
        """Sets the plant_protection_product of this PlantProtectionProductToRegistration.


        :param plant_protection_product: The plant_protection_product of this PlantProtectionProductToRegistration.  # noqa: E501
        :type: int
        """
        if plant_protection_product is None:
            raise ValueError("Invalid value for `plant_protection_product`, must not be `None`")  # noqa: E501

        self._plant_protection_product = plant_protection_product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlantProtectionProductToRegistration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlantProtectionProductToRegistration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
