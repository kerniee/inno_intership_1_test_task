# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LiquidCalculatorControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_pesticide_using_put(self, calculator_id, pesticide_id, **kwargs):  # noqa: E501
        """addPesticide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pesticide_using_put(calculator_id, pesticide_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int calculator_id: calculatorId (required)
        :param int pesticide_id: pesticideId (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_pesticide_using_put_with_http_info(calculator_id, pesticide_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_pesticide_using_put_with_http_info(calculator_id, pesticide_id, **kwargs)  # noqa: E501
            return data

    def add_pesticide_using_put_with_http_info(self, calculator_id, pesticide_id, **kwargs):  # noqa: E501
        """addPesticide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pesticide_using_put_with_http_info(calculator_id, pesticide_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int calculator_id: calculatorId (required)
        :param int pesticide_id: pesticideId (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calculator_id', 'pesticide_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_pesticide_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calculator_id' is set
        if self.api_client.client_side_validation and ('calculator_id' not in params or
                                                       params['calculator_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `calculator_id` when calling `add_pesticide_using_put`")  # noqa: E501
        # verify the required parameter 'pesticide_id' is set
        if self.api_client.client_side_validation and ('pesticide_id' not in params or
                                                       params['pesticide_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pesticide_id` when calling `add_pesticide_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'calculator_id' in params:
            query_params.append(('calculatorId', params['calculator_id']))  # noqa: E501
        if 'pesticide_id' in params:
            query_params.append(('pesticideId', params['pesticide_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/liquid-calculators/add-pesticide', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LiquidCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_status_using_put3(self, status, calculator_id, **kwargs):  # noqa: E501
        """changeStatus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_status_using_put3(status, calculator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: status (required)
        :param int calculator_id: calculatorId (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_status_using_put3_with_http_info(status, calculator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_status_using_put3_with_http_info(status, calculator_id, **kwargs)  # noqa: E501
            return data

    def change_status_using_put3_with_http_info(self, status, calculator_id, **kwargs):  # noqa: E501
        """changeStatus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_status_using_put3_with_http_info(status, calculator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: status (required)
        :param int calculator_id: calculatorId (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'calculator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_status_using_put3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status' is set
        if self.api_client.client_side_validation and ('status' not in params or
                                                       params['status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `status` when calling `change_status_using_put3`")  # noqa: E501
        # verify the required parameter 'calculator_id' is set
        if self.api_client.client_side_validation and ('calculator_id' not in params or
                                                       params['calculator_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `calculator_id` when calling `change_status_using_put3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'calculator_id' in params:
            query_params.append(('calculatorId', params['calculator_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/liquid-calculators/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LiquidCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_using_post1(self, create_calculator_dto, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post1(create_calculator_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLiquidCalculatorDto create_calculator_dto: createCalculatorDto (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_using_post1_with_http_info(create_calculator_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.create_using_post1_with_http_info(create_calculator_dto, **kwargs)  # noqa: E501
            return data

    def create_using_post1_with_http_info(self, create_calculator_dto, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post1_with_http_info(create_calculator_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLiquidCalculatorDto create_calculator_dto: createCalculatorDto (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_calculator_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_calculator_dto' is set
        if self.api_client.client_side_validation and ('create_calculator_dto' not in params or
                                                       params['create_calculator_dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_calculator_dto` when calling `create_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_calculator_dto' in params:
            body_params = params['create_calculator_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/liquid-calculators', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LiquidCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_using_delete3(self, id, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete3(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_using_delete3_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_using_delete3_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_using_delete3_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete3_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_using_delete3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_using_delete3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/liquid-calculators/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_using_get9(self, **kwargs):  # noqa: E501
        """getAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_using_get9(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime date_from: dateFrom
        :param datetime date_to: dateTo
        :param int page_num: pageNum
        :param int per_page: perPage
        :param str statuses: statuses
        :param str sort: sort
        :return: PageLiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_using_get9_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_using_get9_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_using_get9_with_http_info(self, **kwargs):  # noqa: E501
        """getAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_using_get9_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime date_from: dateFrom
        :param datetime date_to: dateTo
        :param int page_num: pageNum
        :param int per_page: perPage
        :param str statuses: statuses
        :param str sort: sort
        :return: PageLiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'date_to', 'page_num', 'per_page', 'statuses', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_using_get9" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'page_num' in params:
            query_params.append(('pageNum', params['page_num']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/liquid-calculators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageLiquidCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_using_get4(self, id, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get4(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_using_get4_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_using_get4_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_using_get4_with_http_info(self, id, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get4_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_using_get4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_using_get4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/liquid-calculators/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LiquidCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_using_put1(self, id, save_calculator_dto, **kwargs):  # noqa: E501
        """save  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_using_put1(id, save_calculator_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :param SaveLiquidCalculatorDto save_calculator_dto: saveCalculatorDto (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_using_put1_with_http_info(id, save_calculator_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.save_using_put1_with_http_info(id, save_calculator_dto, **kwargs)  # noqa: E501
            return data

    def save_using_put1_with_http_info(self, id, save_calculator_dto, **kwargs):  # noqa: E501
        """save  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_using_put1_with_http_info(id, save_calculator_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :param SaveLiquidCalculatorDto save_calculator_dto: saveCalculatorDto (required)
        :return: LiquidCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'save_calculator_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_using_put1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `save_using_put1`")  # noqa: E501
        # verify the required parameter 'save_calculator_dto' is set
        if self.api_client.client_side_validation and ('save_calculator_dto' not in params or
                                                       params['save_calculator_dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `save_calculator_dto` when calling `save_using_put1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'save_calculator_dto' in params:
            body_params = params['save_calculator_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/liquid-calculators', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LiquidCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
