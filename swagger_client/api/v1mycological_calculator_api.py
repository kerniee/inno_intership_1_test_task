# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class V1mycologicalCalculatorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def mycological_calculator_close_create(self, id, **kwargs):  # noqa: E501
        """mycological_calculator_close_create  # noqa: E501

         Завершает работу с калькулятором       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_close_create(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_close_create_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_close_create_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def mycological_calculator_close_create_with_http_info(self, id, **kwargs):  # noqa: E501
        """mycological_calculator_close_create  # noqa: E501

         Завершает работу с калькулятором       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_close_create_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_close_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mycological_calculator_close_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/{id}/close/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MycologicalCalculatorDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mycological_calculator_create_calculator_create(self, body, **kwargs):  # noqa: E501
        """mycological_calculator_create_calculator_create  # noqa: E501

         Создает калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_create_calculator_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MycologicalcalculatorCreateCalculator body: (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_create_calculator_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_create_calculator_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def mycological_calculator_create_calculator_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """mycological_calculator_create_calculator_create  # noqa: E501

         Создает калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_create_calculator_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MycologicalcalculatorCreateCalculator body: (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_create_calculator_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mycological_calculator_create_calculator_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/create_calculator/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MycologicalCalculatorDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mycological_calculator_create_calculator_create(self, name2, name, **kwargs):  # noqa: E501
        """mycological_calculator_create_calculator_create  # noqa: E501

         Создает калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_create_calculator_create(name2, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str name: (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_create_calculator_create_with_http_info(name2, name, **kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_create_calculator_create_with_http_info(name2, name, **kwargs)  # noqa: E501
            return data

    def mycological_calculator_create_calculator_create_with_http_info(self, name2, name, **kwargs):  # noqa: E501
        """mycological_calculator_create_calculator_create  # noqa: E501

         Создает калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_create_calculator_create_with_http_info(name2, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str name: (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name2', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_create_calculator_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `mycological_calculator_create_calculator_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `mycological_calculator_create_calculator_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/create_calculator/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MycologicalCalculatorDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mycological_calculator_create_calculator_create(self, name2, name, **kwargs):  # noqa: E501
        """mycological_calculator_create_calculator_create  # noqa: E501

         Создает калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_create_calculator_create(name2, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str name: (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_create_calculator_create_with_http_info(name2, name, **kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_create_calculator_create_with_http_info(name2, name, **kwargs)  # noqa: E501
            return data

    def mycological_calculator_create_calculator_create_with_http_info(self, name2, name, **kwargs):  # noqa: E501
        """mycological_calculator_create_calculator_create  # noqa: E501

         Создает калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_create_calculator_create_with_http_info(name2, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str name: (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name2', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_create_calculator_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `mycological_calculator_create_calculator_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `mycological_calculator_create_calculator_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/create_calculator/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MycologicalCalculatorDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mycological_calculator_destroy(self, id, **kwargs):  # noqa: E501
        """mycological_calculator_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_destroy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_destroy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_destroy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def mycological_calculator_destroy_with_http_info(self, id, **kwargs):  # noqa: E501
        """mycological_calculator_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mycological_calculator_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mycological_calculator_list(self, **kwargs):  # noqa: E501
        """mycological_calculator_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedMycologicalCalculatorList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def mycological_calculator_list_with_http_info(self, **kwargs):  # noqa: E501
        """mycological_calculator_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedMycologicalCalculatorList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distinct', 'filter', 'page', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'distinct' in params:
            query_params.append(('distinct', params['distinct']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedMycologicalCalculatorList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mycological_calculator_retrieve(self, id, **kwargs):  # noqa: E501
        """mycological_calculator_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def mycological_calculator_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """mycological_calculator_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mycological_calculator_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MycologicalCalculatorDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mycological_calculator_set_parameters_create(self, body, id, **kwargs):  # noqa: E501
        """mycological_calculator_set_parameters_create  # noqa: E501

         Производит интерпретацию результатов отчета       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_set_parameters_create(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MycologicalcalculatorSetParameters body: (required)
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_set_parameters_create_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_set_parameters_create_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def mycological_calculator_set_parameters_create_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """mycological_calculator_set_parameters_create  # noqa: E501

         Производит интерпретацию результатов отчета       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_set_parameters_create_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MycologicalcalculatorSetParameters body: (required)
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_set_parameters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'probe_number' in params:
            form_params.append(('probe_number', params['probe_number']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'report' in params:
            form_params.append(('report', params['report']))  # noqa: E501
            collection_formats['report'] = 'multi'  # noqa: E501
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'probe_number' in params:
            form_params.append(('probe_number', params['probe_number']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'report' in params:
            form_params.append(('report', params['report']))  # noqa: E501
            collection_formats['report'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/{id}/set_parameters/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MycologicalCalculatorDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mycological_calculator_set_parameters_create(self, sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, **kwargs):  # noqa: E501
        """mycological_calculator_set_parameters_create  # noqa: E501

         Производит интерпретацию результатов отчета       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_set_parameters_create(sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sampling_coordinates2: (required)
        :param int probe_number2: (required)
        :param int preceding_culture2: (required)
        :param int culture2: (required)
        :param list[MicroorganismsGenusDtoSerializer_] report2: (required)
        :param str sampling_coordinates: (required)
        :param int probe_number: (required)
        :param int preceding_culture: (required)
        :param int culture: (required)
        :param list[MicroorganismsGenusDtoSerializer_] report: (required)
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_set_parameters_create_with_http_info(sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, **kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_set_parameters_create_with_http_info(sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, **kwargs)  # noqa: E501
            return data

    def mycological_calculator_set_parameters_create_with_http_info(self, sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, **kwargs):  # noqa: E501
        """mycological_calculator_set_parameters_create  # noqa: E501

         Производит интерпретацию результатов отчета       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_set_parameters_create_with_http_info(sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sampling_coordinates2: (required)
        :param int probe_number2: (required)
        :param int preceding_culture2: (required)
        :param int culture2: (required)
        :param list[MicroorganismsGenusDtoSerializer_] report2: (required)
        :param str sampling_coordinates: (required)
        :param int probe_number: (required)
        :param int preceding_culture: (required)
        :param int culture: (required)
        :param list[MicroorganismsGenusDtoSerializer_] report: (required)
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sampling_coordinates2', 'probe_number2', 'preceding_culture2', 'culture2', 'report2', 'sampling_coordinates', 'probe_number', 'preceding_culture', 'culture', 'report', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_set_parameters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sampling_coordinates2' is set
        if ('sampling_coordinates2' not in params or
                params['sampling_coordinates2'] is None):
            raise ValueError("Missing the required parameter `sampling_coordinates2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'probe_number2' is set
        if ('probe_number2' not in params or
                params['probe_number2'] is None):
            raise ValueError("Missing the required parameter `probe_number2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture2' is set
        if ('preceding_culture2' not in params or
                params['preceding_culture2'] is None):
            raise ValueError("Missing the required parameter `preceding_culture2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'culture2' is set
        if ('culture2' not in params or
                params['culture2'] is None):
            raise ValueError("Missing the required parameter `culture2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'report2' is set
        if ('report2' not in params or
                params['report2'] is None):
            raise ValueError("Missing the required parameter `report2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'sampling_coordinates' is set
        if ('sampling_coordinates' not in params or
                params['sampling_coordinates'] is None):
            raise ValueError("Missing the required parameter `sampling_coordinates` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'probe_number' is set
        if ('probe_number' not in params or
                params['probe_number'] is None):
            raise ValueError("Missing the required parameter `probe_number` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture' is set
        if ('preceding_culture' not in params or
                params['preceding_culture'] is None):
            raise ValueError("Missing the required parameter `preceding_culture` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'culture' is set
        if ('culture' not in params or
                params['culture'] is None):
            raise ValueError("Missing the required parameter `culture` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'report' is set
        if ('report' not in params or
                params['report'] is None):
            raise ValueError("Missing the required parameter `report` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'probe_number' in params:
            form_params.append(('probe_number', params['probe_number']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'report' in params:
            form_params.append(('report', params['report']))  # noqa: E501
            collection_formats['report'] = 'multi'  # noqa: E501
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'probe_number' in params:
            form_params.append(('probe_number', params['probe_number']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'report' in params:
            form_params.append(('report', params['report']))  # noqa: E501
            collection_formats['report'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/{id}/set_parameters/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MycologicalCalculatorDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mycological_calculator_set_parameters_create(self, sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, **kwargs):  # noqa: E501
        """mycological_calculator_set_parameters_create  # noqa: E501

         Производит интерпретацию результатов отчета       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_set_parameters_create(sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sampling_coordinates2: (required)
        :param int probe_number2: (required)
        :param int preceding_culture2: (required)
        :param int culture2: (required)
        :param list[MicroorganismsGenusDtoSerializer_] report2: (required)
        :param str sampling_coordinates: (required)
        :param int probe_number: (required)
        :param int preceding_culture: (required)
        :param int culture: (required)
        :param list[MicroorganismsGenusDtoSerializer_] report: (required)
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mycological_calculator_set_parameters_create_with_http_info(sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, **kwargs)  # noqa: E501
        else:
            (data) = self.mycological_calculator_set_parameters_create_with_http_info(sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, **kwargs)  # noqa: E501
            return data

    def mycological_calculator_set_parameters_create_with_http_info(self, sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, **kwargs):  # noqa: E501
        """mycological_calculator_set_parameters_create  # noqa: E501

         Производит интерпретацию результатов отчета       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mycological_calculator_set_parameters_create_with_http_info(sampling_coordinates2, probe_number2, preceding_culture2, culture2, report2, sampling_coordinates, probe_number, preceding_culture, culture, report, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sampling_coordinates2: (required)
        :param int probe_number2: (required)
        :param int preceding_culture2: (required)
        :param int culture2: (required)
        :param list[MicroorganismsGenusDtoSerializer_] report2: (required)
        :param str sampling_coordinates: (required)
        :param int probe_number: (required)
        :param int preceding_culture: (required)
        :param int culture: (required)
        :param list[MicroorganismsGenusDtoSerializer_] report: (required)
        :param int id: A unique integer value identifying this Интерпретация микологического анализа почвы. (required)
        :return: MycologicalCalculatorDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sampling_coordinates2', 'probe_number2', 'preceding_culture2', 'culture2', 'report2', 'sampling_coordinates', 'probe_number', 'preceding_culture', 'culture', 'report', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mycological_calculator_set_parameters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sampling_coordinates2' is set
        if ('sampling_coordinates2' not in params or
                params['sampling_coordinates2'] is None):
            raise ValueError("Missing the required parameter `sampling_coordinates2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'probe_number2' is set
        if ('probe_number2' not in params or
                params['probe_number2'] is None):
            raise ValueError("Missing the required parameter `probe_number2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture2' is set
        if ('preceding_culture2' not in params or
                params['preceding_culture2'] is None):
            raise ValueError("Missing the required parameter `preceding_culture2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'culture2' is set
        if ('culture2' not in params or
                params['culture2'] is None):
            raise ValueError("Missing the required parameter `culture2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'report2' is set
        if ('report2' not in params or
                params['report2'] is None):
            raise ValueError("Missing the required parameter `report2` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'sampling_coordinates' is set
        if ('sampling_coordinates' not in params or
                params['sampling_coordinates'] is None):
            raise ValueError("Missing the required parameter `sampling_coordinates` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'probe_number' is set
        if ('probe_number' not in params or
                params['probe_number'] is None):
            raise ValueError("Missing the required parameter `probe_number` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture' is set
        if ('preceding_culture' not in params or
                params['preceding_culture'] is None):
            raise ValueError("Missing the required parameter `preceding_culture` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'culture' is set
        if ('culture' not in params or
                params['culture'] is None):
            raise ValueError("Missing the required parameter `culture` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'report' is set
        if ('report' not in params or
                params['report'] is None):
            raise ValueError("Missing the required parameter `report` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mycological_calculator_set_parameters_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'probe_number' in params:
            form_params.append(('probe_number', params['probe_number']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'report' in params:
            form_params.append(('report', params['report']))  # noqa: E501
            collection_formats['report'] = 'multi'  # noqa: E501
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'probe_number' in params:
            form_params.append(('probe_number', params['probe_number']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'report' in params:
            form_params.append(('report', params['report']))  # noqa: E501
            collection_formats['report'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/mycological_calculator/mycological_calculator/{id}/set_parameters/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MycologicalCalculatorDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
