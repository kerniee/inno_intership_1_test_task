# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ReviewControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_using_post4(self, create_review_dto, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post4(create_review_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateReviewDto create_review_dto: createReviewDto (required)
        :return: Review
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_using_post4_with_http_info(create_review_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.create_using_post4_with_http_info(create_review_dto, **kwargs)  # noqa: E501
            return data

    def create_using_post4_with_http_info(self, create_review_dto, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post4_with_http_info(create_review_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateReviewDto create_review_dto: createReviewDto (required)
        :return: Review
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_review_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_using_post4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_review_dto' is set
        if self.api_client.client_side_validation and ('create_review_dto' not in params or
                                                       params['create_review_dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_review_dto` when calling `create_using_post4`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_review_dto' in params:
            body_params = params['create_review_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/review', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Review',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_all_using_delete5(self, fertilizer_id, **kwargs):  # noqa: E501
        """deleteAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_using_delete5(fertilizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fertilizer_id: fertilizerId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_all_using_delete5_with_http_info(fertilizer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_all_using_delete5_with_http_info(fertilizer_id, **kwargs)  # noqa: E501
            return data

    def delete_all_using_delete5_with_http_info(self, fertilizer_id, **kwargs):  # noqa: E501
        """deleteAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_using_delete5_with_http_info(fertilizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fertilizer_id: fertilizerId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fertilizer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_using_delete5" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fertilizer_id' is set
        if self.api_client.client_side_validation and ('fertilizer_id' not in params or
                                                       params['fertilizer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fertilizer_id` when calling `delete_all_using_delete5`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fertilizer_id' in params:
            query_params.append(('fertilizerId', params['fertilizer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/review', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_using_delete7(self, id, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete7(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_using_delete7_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_using_delete7_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_using_delete7_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete7_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_using_delete7" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_using_delete7`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/review/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_using_get14(self, fertilizer_id, **kwargs):  # noqa: E501
        """getAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_using_get14(fertilizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fertilizer_id: fertilizerId (required)
        :param int page_num: pageNum
        :param int per_page: perPage
        :param list[int] rate: rate
        :param list[int] region: region
        :param str steps: steps
        :return: PageReview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_using_get14_with_http_info(fertilizer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_using_get14_with_http_info(fertilizer_id, **kwargs)  # noqa: E501
            return data

    def get_all_using_get14_with_http_info(self, fertilizer_id, **kwargs):  # noqa: E501
        """getAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_using_get14_with_http_info(fertilizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fertilizer_id: fertilizerId (required)
        :param int page_num: pageNum
        :param int per_page: perPage
        :param list[int] rate: rate
        :param list[int] region: region
        :param str steps: steps
        :return: PageReview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fertilizer_id', 'page_num', 'per_page', 'rate', 'region', 'steps']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_using_get14" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fertilizer_id' is set
        if self.api_client.client_side_validation and ('fertilizer_id' not in params or
                                                       params['fertilizer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fertilizer_id` when calling `get_all_using_get14`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_num' in params:
            query_params.append(('pageNum', params['page_num']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501
        if 'rate' in params:
            query_params.append(('rate', params['rate']))  # noqa: E501
            collection_formats['rate'] = 'multi'  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
            collection_formats['region'] = 'multi'  # noqa: E501
        if 'steps' in params:
            query_params.append(('steps', params['steps']))  # noqa: E501
        if 'fertilizer_id' in params:
            query_params.append(('fertilizerId', params['fertilizer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/review', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageReview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_average_rate_using_get(self, fertilizer_id, **kwargs):  # noqa: E501
        """getAverageRate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_average_rate_using_get(fertilizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fertilizer_id: fertilizerId (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_average_rate_using_get_with_http_info(fertilizer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_average_rate_using_get_with_http_info(fertilizer_id, **kwargs)  # noqa: E501
            return data

    def get_average_rate_using_get_with_http_info(self, fertilizer_id, **kwargs):  # noqa: E501
        """getAverageRate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_average_rate_using_get_with_http_info(fertilizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fertilizer_id: fertilizerId (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fertilizer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_average_rate_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fertilizer_id' is set
        if self.api_client.client_side_validation and ('fertilizer_id' not in params or
                                                       params['fertilizer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fertilizer_id` when calling `get_average_rate_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fertilizer_id' in params:
            query_params.append(('fertilizerId', params['fertilizer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/review/average-rate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_using_get8(self, id, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get8(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: Review
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_using_get8_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_using_get8_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_using_get8_with_http_info(self, id, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get8_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :return: Review
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_using_get8" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_using_get8`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/review/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Review',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_using_put3(self, update_review_dto, **kwargs):  # noqa: E501
        """save  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_using_put3(update_review_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateReviewDto update_review_dto: updateReviewDto (required)
        :return: Review
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_using_put3_with_http_info(update_review_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.save_using_put3_with_http_info(update_review_dto, **kwargs)  # noqa: E501
            return data

    def save_using_put3_with_http_info(self, update_review_dto, **kwargs):  # noqa: E501
        """save  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_using_put3_with_http_info(update_review_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateReviewDto update_review_dto: updateReviewDto (required)
        :return: Review
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_review_dto']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_using_put3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_review_dto' is set
        if self.api_client.client_side_validation and ('update_review_dto' not in params or
                                                       params['update_review_dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_review_dto` when calling `save_using_put3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_review_dto' in params:
            body_params = params['update_review_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/review', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Review',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
