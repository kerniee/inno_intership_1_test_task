# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class V1complexAnalysisRequestApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def complex_analysis_request_create_complex_analysis_request_create(self, body, **kwargs):  # noqa: E501
        """complex_analysis_request_create_complex_analysis_request_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_create_complex_analysis_request_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosselkhozBankCreateComplexAnalysisRequestCommand body: (required)
        :return: RosselkhozBankCreateComplexAnalysisRequestCommand
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complex_analysis_request_create_complex_analysis_request_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.complex_analysis_request_create_complex_analysis_request_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def complex_analysis_request_create_complex_analysis_request_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """complex_analysis_request_create_complex_analysis_request_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_create_complex_analysis_request_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RosselkhozBankCreateComplexAnalysisRequestCommand body: (required)
        :return: RosselkhozBankCreateComplexAnalysisRequestCommand
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complex_analysis_request_create_complex_analysis_request_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_uid' in params:
            form_params.append(('request_uid', params['request_uid']))  # noqa: E501
        if 'client_uid' in params:
            form_params.append(('client_uid', params['client_uid']))  # noqa: E501
        if 'sampling_date' in params:
            form_params.append(('sampling_date', params['sampling_date']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'district' in params:
            form_params.append(('district', params['district']))  # noqa: E501
        if 'address' in params:
            form_params.append(('address', params['address']))  # noqa: E501
        if 'field_number' in params:
            form_params.append(('field_number', params['field_number']))  # noqa: E501
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'sampling_depth' in params:
            form_params.append(('sampling_depth', params['sampling_depth']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'planned_yield' in params:
            form_params.append(('planned_yield', params['planned_yield']))  # noqa: E501
        if 'degree_of_soil_moisture' in params:
            form_params.append(('degree_of_soil_moisture', params['degree_of_soil_moisture']))  # noqa: E501
        if 'fertilizer_action_year' in params:
            form_params.append(('fertilizer_action_year', params['fertilizer_action_year']))  # noqa: E501
        if 'mechanical_composition' in params:
            form_params.append(('mechanical_composition', params['mechanical_composition']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'depth_of_arable_layer' in params:
            form_params.append(('depth_of_arable_layer', params['depth_of_arable_layer']))  # noqa: E501
        if 'preceding_culture_yield' in params:
            form_params.append(('preceding_culture_yield', params['preceding_culture_yield']))  # noqa: E501
        if 'ph_water' in params:
            form_params.append(('ph_water', params['ph_water']))  # noqa: E501
        if 'ph_salt' in params:
            form_params.append(('ph_salt', params['ph_salt']))  # noqa: E501
        if 'nh4' in params:
            form_params.append(('nh4', params['nh4']))  # noqa: E501
        if 'no3' in params:
            form_params.append(('no3', params['no3']))  # noqa: E501
        if 'p2o5' in params:
            form_params.append(('p2o5', params['p2o5']))  # noqa: E501
        if 'k2o' in params:
            form_params.append(('k2o', params['k2o']))  # noqa: E501
        if 'method' in params:
            form_params.append(('method', params['method']))  # noqa: E501
        if 's' in params:
            form_params.append(('s', params['s']))  # noqa: E501
        if 'ca' in params:
            form_params.append(('ca', params['ca']))  # noqa: E501
        if 'mg' in params:
            form_params.append(('mg', params['mg']))  # noqa: E501
        if 'na' in params:
            form_params.append(('na', params['na']))  # noqa: E501
        if 'so4' in params:
            form_params.append(('so4', params['so4']))  # noqa: E501
        if 'cl' in params:
            form_params.append(('cl', params['cl']))  # noqa: E501
        if 'organic_substances' in params:
            form_params.append(('organic_substances', params['organic_substances']))  # noqa: E501
        if 'salt_conductivity' in params:
            form_params.append(('salt_conductivity', params['salt_conductivity']))  # noqa: E501
        if 'request_uid' in params:
            form_params.append(('request_uid', params['request_uid']))  # noqa: E501
        if 'client_uid' in params:
            form_params.append(('client_uid', params['client_uid']))  # noqa: E501
        if 'sampling_date' in params:
            form_params.append(('sampling_date', params['sampling_date']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'district' in params:
            form_params.append(('district', params['district']))  # noqa: E501
        if 'address' in params:
            form_params.append(('address', params['address']))  # noqa: E501
        if 'field_number' in params:
            form_params.append(('field_number', params['field_number']))  # noqa: E501
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'sampling_depth' in params:
            form_params.append(('sampling_depth', params['sampling_depth']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'planned_yield' in params:
            form_params.append(('planned_yield', params['planned_yield']))  # noqa: E501
        if 'degree_of_soil_moisture' in params:
            form_params.append(('degree_of_soil_moisture', params['degree_of_soil_moisture']))  # noqa: E501
        if 'fertilizer_action_year' in params:
            form_params.append(('fertilizer_action_year', params['fertilizer_action_year']))  # noqa: E501
        if 'mechanical_composition' in params:
            form_params.append(('mechanical_composition', params['mechanical_composition']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'depth_of_arable_layer' in params:
            form_params.append(('depth_of_arable_layer', params['depth_of_arable_layer']))  # noqa: E501
        if 'preceding_culture_yield' in params:
            form_params.append(('preceding_culture_yield', params['preceding_culture_yield']))  # noqa: E501
        if 'ph_water' in params:
            form_params.append(('ph_water', params['ph_water']))  # noqa: E501
        if 'ph_salt' in params:
            form_params.append(('ph_salt', params['ph_salt']))  # noqa: E501
        if 'nh4' in params:
            form_params.append(('nh4', params['nh4']))  # noqa: E501
        if 'no3' in params:
            form_params.append(('no3', params['no3']))  # noqa: E501
        if 'p2o5' in params:
            form_params.append(('p2o5', params['p2o5']))  # noqa: E501
        if 'k2o' in params:
            form_params.append(('k2o', params['k2o']))  # noqa: E501
        if 'method' in params:
            form_params.append(('method', params['method']))  # noqa: E501
        if 's' in params:
            form_params.append(('s', params['s']))  # noqa: E501
        if 'ca' in params:
            form_params.append(('ca', params['ca']))  # noqa: E501
        if 'mg' in params:
            form_params.append(('mg', params['mg']))  # noqa: E501
        if 'na' in params:
            form_params.append(('na', params['na']))  # noqa: E501
        if 'so4' in params:
            form_params.append(('so4', params['so4']))  # noqa: E501
        if 'cl' in params:
            form_params.append(('cl', params['cl']))  # noqa: E501
        if 'organic_substances' in params:
            form_params.append(('organic_substances', params['organic_substances']))  # noqa: E501
        if 'salt_conductivity' in params:
            form_params.append(('salt_conductivity', params['salt_conductivity']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/rosselkhoz_bank/complex_analysis_request/create_complex_analysis_request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosselkhozBankCreateComplexAnalysisRequestCommand',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def complex_analysis_request_create_complex_analysis_request_create(self, request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, **kwargs):  # noqa: E501
        """complex_analysis_request_create_complex_analysis_request_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_create_complex_analysis_request_create(request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request_uid2: (required)
        :param str client_uid2: (required)
        :param date sampling_date2: (required)
        :param str name2: (required)
        :param str phone2: (required)
        :param int region2: (required)
        :param str district2: (required)
        :param str address2: (required)
        :param str field_number2: (required)
        :param str sampling_coordinates2: (required)
        :param int sampling_depth2: (required)
        :param int culture2: (required)
        :param float planned_yield2: (required)
        :param int degree_of_soil_moisture2: (required)
        :param int fertilizer_action_year2: (required)
        :param int mechanical_composition2: (required)
        :param int preceding_culture2: (required)
        :param int depth_of_arable_layer2: (required)
        :param float preceding_culture_yield2: (required)
        :param float ph_water2: (required)
        :param float ph_salt2: (required)
        :param float nh5: (required)
        :param float no4: (required)
        :param float p2o6: (required)
        :param float k2o2: (required)
        :param str method2: (required)
        :param float s2: (required)
        :param float ca2: (required)
        :param float mg2: (required)
        :param float na2: (required)
        :param float so5: (required)
        :param float cl2: (required)
        :param float organic_substances2: (required)
        :param float salt_conductivity2: (required)
        :param str request_uid: (required)
        :param str client_uid: (required)
        :param date sampling_date: (required)
        :param str name: (required)
        :param str phone: (required)
        :param int region: (required)
        :param str district: (required)
        :param str address: (required)
        :param str field_number: (required)
        :param str sampling_coordinates: (required)
        :param int sampling_depth: (required)
        :param int culture: (required)
        :param float planned_yield: (required)
        :param int degree_of_soil_moisture: (required)
        :param int fertilizer_action_year: (required)
        :param int mechanical_composition: (required)
        :param int preceding_culture: (required)
        :param int depth_of_arable_layer: (required)
        :param float preceding_culture_yield: (required)
        :param float ph_water: (required)
        :param float ph_salt: (required)
        :param float nh4: (required)
        :param float no3: (required)
        :param float p2o5: (required)
        :param float k2o: (required)
        :param str method: (required)
        :param float s: (required)
        :param float ca: (required)
        :param float mg: (required)
        :param float na: (required)
        :param float so4: (required)
        :param float cl: (required)
        :param float organic_substances: (required)
        :param float salt_conductivity: (required)
        :return: RosselkhozBankCreateComplexAnalysisRequestCommand
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complex_analysis_request_create_complex_analysis_request_create_with_http_info(request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, **kwargs)  # noqa: E501
        else:
            (data) = self.complex_analysis_request_create_complex_analysis_request_create_with_http_info(request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, **kwargs)  # noqa: E501
            return data

    def complex_analysis_request_create_complex_analysis_request_create_with_http_info(self, request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, **kwargs):  # noqa: E501
        """complex_analysis_request_create_complex_analysis_request_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_create_complex_analysis_request_create_with_http_info(request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request_uid2: (required)
        :param str client_uid2: (required)
        :param date sampling_date2: (required)
        :param str name2: (required)
        :param str phone2: (required)
        :param int region2: (required)
        :param str district2: (required)
        :param str address2: (required)
        :param str field_number2: (required)
        :param str sampling_coordinates2: (required)
        :param int sampling_depth2: (required)
        :param int culture2: (required)
        :param float planned_yield2: (required)
        :param int degree_of_soil_moisture2: (required)
        :param int fertilizer_action_year2: (required)
        :param int mechanical_composition2: (required)
        :param int preceding_culture2: (required)
        :param int depth_of_arable_layer2: (required)
        :param float preceding_culture_yield2: (required)
        :param float ph_water2: (required)
        :param float ph_salt2: (required)
        :param float nh5: (required)
        :param float no4: (required)
        :param float p2o6: (required)
        :param float k2o2: (required)
        :param str method2: (required)
        :param float s2: (required)
        :param float ca2: (required)
        :param float mg2: (required)
        :param float na2: (required)
        :param float so5: (required)
        :param float cl2: (required)
        :param float organic_substances2: (required)
        :param float salt_conductivity2: (required)
        :param str request_uid: (required)
        :param str client_uid: (required)
        :param date sampling_date: (required)
        :param str name: (required)
        :param str phone: (required)
        :param int region: (required)
        :param str district: (required)
        :param str address: (required)
        :param str field_number: (required)
        :param str sampling_coordinates: (required)
        :param int sampling_depth: (required)
        :param int culture: (required)
        :param float planned_yield: (required)
        :param int degree_of_soil_moisture: (required)
        :param int fertilizer_action_year: (required)
        :param int mechanical_composition: (required)
        :param int preceding_culture: (required)
        :param int depth_of_arable_layer: (required)
        :param float preceding_culture_yield: (required)
        :param float ph_water: (required)
        :param float ph_salt: (required)
        :param float nh4: (required)
        :param float no3: (required)
        :param float p2o5: (required)
        :param float k2o: (required)
        :param str method: (required)
        :param float s: (required)
        :param float ca: (required)
        :param float mg: (required)
        :param float na: (required)
        :param float so4: (required)
        :param float cl: (required)
        :param float organic_substances: (required)
        :param float salt_conductivity: (required)
        :return: RosselkhozBankCreateComplexAnalysisRequestCommand
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_uid2', 'client_uid2', 'sampling_date2', 'name2', 'phone2', 'region2', 'district2', 'address2', 'field_number2', 'sampling_coordinates2', 'sampling_depth2', 'culture2', 'planned_yield2', 'degree_of_soil_moisture2', 'fertilizer_action_year2', 'mechanical_composition2', 'preceding_culture2', 'depth_of_arable_layer2', 'preceding_culture_yield2', 'ph_water2', 'ph_salt2', 'nh5', 'no4', 'p2o6', 'k2o2', 'method2', 's2', 'ca2', 'mg2', 'na2', 'so5', 'cl2', 'organic_substances2', 'salt_conductivity2', 'request_uid', 'client_uid', 'sampling_date', 'name', 'phone', 'region', 'district', 'address', 'field_number', 'sampling_coordinates', 'sampling_depth', 'culture', 'planned_yield', 'degree_of_soil_moisture', 'fertilizer_action_year', 'mechanical_composition', 'preceding_culture', 'depth_of_arable_layer', 'preceding_culture_yield', 'ph_water', 'ph_salt', 'nh4', 'no3', 'p2o5', 'k2o', 'method', 's', 'ca', 'mg', 'na', 'so4', 'cl', 'organic_substances', 'salt_conductivity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complex_analysis_request_create_complex_analysis_request_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_uid2' is set
        if ('request_uid2' not in params or
                params['request_uid2'] is None):
            raise ValueError("Missing the required parameter `request_uid2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'client_uid2' is set
        if ('client_uid2' not in params or
                params['client_uid2'] is None):
            raise ValueError("Missing the required parameter `client_uid2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_date2' is set
        if ('sampling_date2' not in params or
                params['sampling_date2'] is None):
            raise ValueError("Missing the required parameter `sampling_date2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'phone2' is set
        if ('phone2' not in params or
                params['phone2'] is None):
            raise ValueError("Missing the required parameter `phone2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'region2' is set
        if ('region2' not in params or
                params['region2'] is None):
            raise ValueError("Missing the required parameter `region2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'district2' is set
        if ('district2' not in params or
                params['district2'] is None):
            raise ValueError("Missing the required parameter `district2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'address2' is set
        if ('address2' not in params or
                params['address2'] is None):
            raise ValueError("Missing the required parameter `address2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'field_number2' is set
        if ('field_number2' not in params or
                params['field_number2'] is None):
            raise ValueError("Missing the required parameter `field_number2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_coordinates2' is set
        if ('sampling_coordinates2' not in params or
                params['sampling_coordinates2'] is None):
            raise ValueError("Missing the required parameter `sampling_coordinates2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_depth2' is set
        if ('sampling_depth2' not in params or
                params['sampling_depth2'] is None):
            raise ValueError("Missing the required parameter `sampling_depth2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'culture2' is set
        if ('culture2' not in params or
                params['culture2'] is None):
            raise ValueError("Missing the required parameter `culture2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'planned_yield2' is set
        if ('planned_yield2' not in params or
                params['planned_yield2'] is None):
            raise ValueError("Missing the required parameter `planned_yield2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'degree_of_soil_moisture2' is set
        if ('degree_of_soil_moisture2' not in params or
                params['degree_of_soil_moisture2'] is None):
            raise ValueError("Missing the required parameter `degree_of_soil_moisture2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'fertilizer_action_year2' is set
        if ('fertilizer_action_year2' not in params or
                params['fertilizer_action_year2'] is None):
            raise ValueError("Missing the required parameter `fertilizer_action_year2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'mechanical_composition2' is set
        if ('mechanical_composition2' not in params or
                params['mechanical_composition2'] is None):
            raise ValueError("Missing the required parameter `mechanical_composition2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture2' is set
        if ('preceding_culture2' not in params or
                params['preceding_culture2'] is None):
            raise ValueError("Missing the required parameter `preceding_culture2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'depth_of_arable_layer2' is set
        if ('depth_of_arable_layer2' not in params or
                params['depth_of_arable_layer2'] is None):
            raise ValueError("Missing the required parameter `depth_of_arable_layer2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture_yield2' is set
        if ('preceding_culture_yield2' not in params or
                params['preceding_culture_yield2'] is None):
            raise ValueError("Missing the required parameter `preceding_culture_yield2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ph_water2' is set
        if ('ph_water2' not in params or
                params['ph_water2'] is None):
            raise ValueError("Missing the required parameter `ph_water2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ph_salt2' is set
        if ('ph_salt2' not in params or
                params['ph_salt2'] is None):
            raise ValueError("Missing the required parameter `ph_salt2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'nh5' is set
        if ('nh5' not in params or
                params['nh5'] is None):
            raise ValueError("Missing the required parameter `nh5` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'no4' is set
        if ('no4' not in params or
                params['no4'] is None):
            raise ValueError("Missing the required parameter `no4` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'p2o6' is set
        if ('p2o6' not in params or
                params['p2o6'] is None):
            raise ValueError("Missing the required parameter `p2o6` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'k2o2' is set
        if ('k2o2' not in params or
                params['k2o2'] is None):
            raise ValueError("Missing the required parameter `k2o2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'method2' is set
        if ('method2' not in params or
                params['method2'] is None):
            raise ValueError("Missing the required parameter `method2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 's2' is set
        if ('s2' not in params or
                params['s2'] is None):
            raise ValueError("Missing the required parameter `s2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ca2' is set
        if ('ca2' not in params or
                params['ca2'] is None):
            raise ValueError("Missing the required parameter `ca2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'mg2' is set
        if ('mg2' not in params or
                params['mg2'] is None):
            raise ValueError("Missing the required parameter `mg2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'na2' is set
        if ('na2' not in params or
                params['na2'] is None):
            raise ValueError("Missing the required parameter `na2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'so5' is set
        if ('so5' not in params or
                params['so5'] is None):
            raise ValueError("Missing the required parameter `so5` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'cl2' is set
        if ('cl2' not in params or
                params['cl2'] is None):
            raise ValueError("Missing the required parameter `cl2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'organic_substances2' is set
        if ('organic_substances2' not in params or
                params['organic_substances2'] is None):
            raise ValueError("Missing the required parameter `organic_substances2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'salt_conductivity2' is set
        if ('salt_conductivity2' not in params or
                params['salt_conductivity2'] is None):
            raise ValueError("Missing the required parameter `salt_conductivity2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'request_uid' is set
        if ('request_uid' not in params or
                params['request_uid'] is None):
            raise ValueError("Missing the required parameter `request_uid` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'client_uid' is set
        if ('client_uid' not in params or
                params['client_uid'] is None):
            raise ValueError("Missing the required parameter `client_uid` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_date' is set
        if ('sampling_date' not in params or
                params['sampling_date'] is None):
            raise ValueError("Missing the required parameter `sampling_date` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'phone' is set
        if ('phone' not in params or
                params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'region' is set
        if ('region' not in params or
                params['region'] is None):
            raise ValueError("Missing the required parameter `region` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'district' is set
        if ('district' not in params or
                params['district'] is None):
            raise ValueError("Missing the required parameter `district` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'field_number' is set
        if ('field_number' not in params or
                params['field_number'] is None):
            raise ValueError("Missing the required parameter `field_number` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_coordinates' is set
        if ('sampling_coordinates' not in params or
                params['sampling_coordinates'] is None):
            raise ValueError("Missing the required parameter `sampling_coordinates` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_depth' is set
        if ('sampling_depth' not in params or
                params['sampling_depth'] is None):
            raise ValueError("Missing the required parameter `sampling_depth` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'culture' is set
        if ('culture' not in params or
                params['culture'] is None):
            raise ValueError("Missing the required parameter `culture` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'planned_yield' is set
        if ('planned_yield' not in params or
                params['planned_yield'] is None):
            raise ValueError("Missing the required parameter `planned_yield` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'degree_of_soil_moisture' is set
        if ('degree_of_soil_moisture' not in params or
                params['degree_of_soil_moisture'] is None):
            raise ValueError("Missing the required parameter `degree_of_soil_moisture` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'fertilizer_action_year' is set
        if ('fertilizer_action_year' not in params or
                params['fertilizer_action_year'] is None):
            raise ValueError("Missing the required parameter `fertilizer_action_year` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'mechanical_composition' is set
        if ('mechanical_composition' not in params or
                params['mechanical_composition'] is None):
            raise ValueError("Missing the required parameter `mechanical_composition` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture' is set
        if ('preceding_culture' not in params or
                params['preceding_culture'] is None):
            raise ValueError("Missing the required parameter `preceding_culture` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'depth_of_arable_layer' is set
        if ('depth_of_arable_layer' not in params or
                params['depth_of_arable_layer'] is None):
            raise ValueError("Missing the required parameter `depth_of_arable_layer` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture_yield' is set
        if ('preceding_culture_yield' not in params or
                params['preceding_culture_yield'] is None):
            raise ValueError("Missing the required parameter `preceding_culture_yield` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ph_water' is set
        if ('ph_water' not in params or
                params['ph_water'] is None):
            raise ValueError("Missing the required parameter `ph_water` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ph_salt' is set
        if ('ph_salt' not in params or
                params['ph_salt'] is None):
            raise ValueError("Missing the required parameter `ph_salt` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'nh4' is set
        if ('nh4' not in params or
                params['nh4'] is None):
            raise ValueError("Missing the required parameter `nh4` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'no3' is set
        if ('no3' not in params or
                params['no3'] is None):
            raise ValueError("Missing the required parameter `no3` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'p2o5' is set
        if ('p2o5' not in params or
                params['p2o5'] is None):
            raise ValueError("Missing the required parameter `p2o5` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'k2o' is set
        if ('k2o' not in params or
                params['k2o'] is None):
            raise ValueError("Missing the required parameter `k2o` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'method' is set
        if ('method' not in params or
                params['method'] is None):
            raise ValueError("Missing the required parameter `method` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 's' is set
        if ('s' not in params or
                params['s'] is None):
            raise ValueError("Missing the required parameter `s` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ca' is set
        if ('ca' not in params or
                params['ca'] is None):
            raise ValueError("Missing the required parameter `ca` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'mg' is set
        if ('mg' not in params or
                params['mg'] is None):
            raise ValueError("Missing the required parameter `mg` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'na' is set
        if ('na' not in params or
                params['na'] is None):
            raise ValueError("Missing the required parameter `na` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'so4' is set
        if ('so4' not in params or
                params['so4'] is None):
            raise ValueError("Missing the required parameter `so4` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'cl' is set
        if ('cl' not in params or
                params['cl'] is None):
            raise ValueError("Missing the required parameter `cl` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'organic_substances' is set
        if ('organic_substances' not in params or
                params['organic_substances'] is None):
            raise ValueError("Missing the required parameter `organic_substances` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'salt_conductivity' is set
        if ('salt_conductivity' not in params or
                params['salt_conductivity'] is None):
            raise ValueError("Missing the required parameter `salt_conductivity` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_uid' in params:
            form_params.append(('request_uid', params['request_uid']))  # noqa: E501
        if 'client_uid' in params:
            form_params.append(('client_uid', params['client_uid']))  # noqa: E501
        if 'sampling_date' in params:
            form_params.append(('sampling_date', params['sampling_date']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'district' in params:
            form_params.append(('district', params['district']))  # noqa: E501
        if 'address' in params:
            form_params.append(('address', params['address']))  # noqa: E501
        if 'field_number' in params:
            form_params.append(('field_number', params['field_number']))  # noqa: E501
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'sampling_depth' in params:
            form_params.append(('sampling_depth', params['sampling_depth']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'planned_yield' in params:
            form_params.append(('planned_yield', params['planned_yield']))  # noqa: E501
        if 'degree_of_soil_moisture' in params:
            form_params.append(('degree_of_soil_moisture', params['degree_of_soil_moisture']))  # noqa: E501
        if 'fertilizer_action_year' in params:
            form_params.append(('fertilizer_action_year', params['fertilizer_action_year']))  # noqa: E501
        if 'mechanical_composition' in params:
            form_params.append(('mechanical_composition', params['mechanical_composition']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'depth_of_arable_layer' in params:
            form_params.append(('depth_of_arable_layer', params['depth_of_arable_layer']))  # noqa: E501
        if 'preceding_culture_yield' in params:
            form_params.append(('preceding_culture_yield', params['preceding_culture_yield']))  # noqa: E501
        if 'ph_water' in params:
            form_params.append(('ph_water', params['ph_water']))  # noqa: E501
        if 'ph_salt' in params:
            form_params.append(('ph_salt', params['ph_salt']))  # noqa: E501
        if 'nh4' in params:
            form_params.append(('nh4', params['nh4']))  # noqa: E501
        if 'no3' in params:
            form_params.append(('no3', params['no3']))  # noqa: E501
        if 'p2o5' in params:
            form_params.append(('p2o5', params['p2o5']))  # noqa: E501
        if 'k2o' in params:
            form_params.append(('k2o', params['k2o']))  # noqa: E501
        if 'method' in params:
            form_params.append(('method', params['method']))  # noqa: E501
        if 's' in params:
            form_params.append(('s', params['s']))  # noqa: E501
        if 'ca' in params:
            form_params.append(('ca', params['ca']))  # noqa: E501
        if 'mg' in params:
            form_params.append(('mg', params['mg']))  # noqa: E501
        if 'na' in params:
            form_params.append(('na', params['na']))  # noqa: E501
        if 'so4' in params:
            form_params.append(('so4', params['so4']))  # noqa: E501
        if 'cl' in params:
            form_params.append(('cl', params['cl']))  # noqa: E501
        if 'organic_substances' in params:
            form_params.append(('organic_substances', params['organic_substances']))  # noqa: E501
        if 'salt_conductivity' in params:
            form_params.append(('salt_conductivity', params['salt_conductivity']))  # noqa: E501
        if 'request_uid' in params:
            form_params.append(('request_uid', params['request_uid']))  # noqa: E501
        if 'client_uid' in params:
            form_params.append(('client_uid', params['client_uid']))  # noqa: E501
        if 'sampling_date' in params:
            form_params.append(('sampling_date', params['sampling_date']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'district' in params:
            form_params.append(('district', params['district']))  # noqa: E501
        if 'address' in params:
            form_params.append(('address', params['address']))  # noqa: E501
        if 'field_number' in params:
            form_params.append(('field_number', params['field_number']))  # noqa: E501
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'sampling_depth' in params:
            form_params.append(('sampling_depth', params['sampling_depth']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'planned_yield' in params:
            form_params.append(('planned_yield', params['planned_yield']))  # noqa: E501
        if 'degree_of_soil_moisture' in params:
            form_params.append(('degree_of_soil_moisture', params['degree_of_soil_moisture']))  # noqa: E501
        if 'fertilizer_action_year' in params:
            form_params.append(('fertilizer_action_year', params['fertilizer_action_year']))  # noqa: E501
        if 'mechanical_composition' in params:
            form_params.append(('mechanical_composition', params['mechanical_composition']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'depth_of_arable_layer' in params:
            form_params.append(('depth_of_arable_layer', params['depth_of_arable_layer']))  # noqa: E501
        if 'preceding_culture_yield' in params:
            form_params.append(('preceding_culture_yield', params['preceding_culture_yield']))  # noqa: E501
        if 'ph_water' in params:
            form_params.append(('ph_water', params['ph_water']))  # noqa: E501
        if 'ph_salt' in params:
            form_params.append(('ph_salt', params['ph_salt']))  # noqa: E501
        if 'nh4' in params:
            form_params.append(('nh4', params['nh4']))  # noqa: E501
        if 'no3' in params:
            form_params.append(('no3', params['no3']))  # noqa: E501
        if 'p2o5' in params:
            form_params.append(('p2o5', params['p2o5']))  # noqa: E501
        if 'k2o' in params:
            form_params.append(('k2o', params['k2o']))  # noqa: E501
        if 'method' in params:
            form_params.append(('method', params['method']))  # noqa: E501
        if 's' in params:
            form_params.append(('s', params['s']))  # noqa: E501
        if 'ca' in params:
            form_params.append(('ca', params['ca']))  # noqa: E501
        if 'mg' in params:
            form_params.append(('mg', params['mg']))  # noqa: E501
        if 'na' in params:
            form_params.append(('na', params['na']))  # noqa: E501
        if 'so4' in params:
            form_params.append(('so4', params['so4']))  # noqa: E501
        if 'cl' in params:
            form_params.append(('cl', params['cl']))  # noqa: E501
        if 'organic_substances' in params:
            form_params.append(('organic_substances', params['organic_substances']))  # noqa: E501
        if 'salt_conductivity' in params:
            form_params.append(('salt_conductivity', params['salt_conductivity']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/rosselkhoz_bank/complex_analysis_request/create_complex_analysis_request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosselkhozBankCreateComplexAnalysisRequestCommand',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def complex_analysis_request_create_complex_analysis_request_create(self, request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, **kwargs):  # noqa: E501
        """complex_analysis_request_create_complex_analysis_request_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_create_complex_analysis_request_create(request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request_uid2: (required)
        :param str client_uid2: (required)
        :param date sampling_date2: (required)
        :param str name2: (required)
        :param str phone2: (required)
        :param int region2: (required)
        :param str district2: (required)
        :param str address2: (required)
        :param str field_number2: (required)
        :param str sampling_coordinates2: (required)
        :param int sampling_depth2: (required)
        :param int culture2: (required)
        :param float planned_yield2: (required)
        :param int degree_of_soil_moisture2: (required)
        :param int fertilizer_action_year2: (required)
        :param int mechanical_composition2: (required)
        :param int preceding_culture2: (required)
        :param int depth_of_arable_layer2: (required)
        :param float preceding_culture_yield2: (required)
        :param float ph_water2: (required)
        :param float ph_salt2: (required)
        :param float nh5: (required)
        :param float no4: (required)
        :param float p2o6: (required)
        :param float k2o2: (required)
        :param str method2: (required)
        :param float s2: (required)
        :param float ca2: (required)
        :param float mg2: (required)
        :param float na2: (required)
        :param float so5: (required)
        :param float cl2: (required)
        :param float organic_substances2: (required)
        :param float salt_conductivity2: (required)
        :param str request_uid: (required)
        :param str client_uid: (required)
        :param date sampling_date: (required)
        :param str name: (required)
        :param str phone: (required)
        :param int region: (required)
        :param str district: (required)
        :param str address: (required)
        :param str field_number: (required)
        :param str sampling_coordinates: (required)
        :param int sampling_depth: (required)
        :param int culture: (required)
        :param float planned_yield: (required)
        :param int degree_of_soil_moisture: (required)
        :param int fertilizer_action_year: (required)
        :param int mechanical_composition: (required)
        :param int preceding_culture: (required)
        :param int depth_of_arable_layer: (required)
        :param float preceding_culture_yield: (required)
        :param float ph_water: (required)
        :param float ph_salt: (required)
        :param float nh4: (required)
        :param float no3: (required)
        :param float p2o5: (required)
        :param float k2o: (required)
        :param str method: (required)
        :param float s: (required)
        :param float ca: (required)
        :param float mg: (required)
        :param float na: (required)
        :param float so4: (required)
        :param float cl: (required)
        :param float organic_substances: (required)
        :param float salt_conductivity: (required)
        :return: RosselkhozBankCreateComplexAnalysisRequestCommand
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complex_analysis_request_create_complex_analysis_request_create_with_http_info(request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, **kwargs)  # noqa: E501
        else:
            (data) = self.complex_analysis_request_create_complex_analysis_request_create_with_http_info(request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, **kwargs)  # noqa: E501
            return data

    def complex_analysis_request_create_complex_analysis_request_create_with_http_info(self, request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, **kwargs):  # noqa: E501
        """complex_analysis_request_create_complex_analysis_request_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_create_complex_analysis_request_create_with_http_info(request_uid2, client_uid2, sampling_date2, name2, phone2, region2, district2, address2, field_number2, sampling_coordinates2, sampling_depth2, culture2, planned_yield2, degree_of_soil_moisture2, fertilizer_action_year2, mechanical_composition2, preceding_culture2, depth_of_arable_layer2, preceding_culture_yield2, ph_water2, ph_salt2, nh5, no4, p2o6, k2o2, method2, s2, ca2, mg2, na2, so5, cl2, organic_substances2, salt_conductivity2, request_uid, client_uid, sampling_date, name, phone, region, district, address, field_number, sampling_coordinates, sampling_depth, culture, planned_yield, degree_of_soil_moisture, fertilizer_action_year, mechanical_composition, preceding_culture, depth_of_arable_layer, preceding_culture_yield, ph_water, ph_salt, nh4, no3, p2o5, k2o, method, s, ca, mg, na, so4, cl, organic_substances, salt_conductivity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request_uid2: (required)
        :param str client_uid2: (required)
        :param date sampling_date2: (required)
        :param str name2: (required)
        :param str phone2: (required)
        :param int region2: (required)
        :param str district2: (required)
        :param str address2: (required)
        :param str field_number2: (required)
        :param str sampling_coordinates2: (required)
        :param int sampling_depth2: (required)
        :param int culture2: (required)
        :param float planned_yield2: (required)
        :param int degree_of_soil_moisture2: (required)
        :param int fertilizer_action_year2: (required)
        :param int mechanical_composition2: (required)
        :param int preceding_culture2: (required)
        :param int depth_of_arable_layer2: (required)
        :param float preceding_culture_yield2: (required)
        :param float ph_water2: (required)
        :param float ph_salt2: (required)
        :param float nh5: (required)
        :param float no4: (required)
        :param float p2o6: (required)
        :param float k2o2: (required)
        :param str method2: (required)
        :param float s2: (required)
        :param float ca2: (required)
        :param float mg2: (required)
        :param float na2: (required)
        :param float so5: (required)
        :param float cl2: (required)
        :param float organic_substances2: (required)
        :param float salt_conductivity2: (required)
        :param str request_uid: (required)
        :param str client_uid: (required)
        :param date sampling_date: (required)
        :param str name: (required)
        :param str phone: (required)
        :param int region: (required)
        :param str district: (required)
        :param str address: (required)
        :param str field_number: (required)
        :param str sampling_coordinates: (required)
        :param int sampling_depth: (required)
        :param int culture: (required)
        :param float planned_yield: (required)
        :param int degree_of_soil_moisture: (required)
        :param int fertilizer_action_year: (required)
        :param int mechanical_composition: (required)
        :param int preceding_culture: (required)
        :param int depth_of_arable_layer: (required)
        :param float preceding_culture_yield: (required)
        :param float ph_water: (required)
        :param float ph_salt: (required)
        :param float nh4: (required)
        :param float no3: (required)
        :param float p2o5: (required)
        :param float k2o: (required)
        :param str method: (required)
        :param float s: (required)
        :param float ca: (required)
        :param float mg: (required)
        :param float na: (required)
        :param float so4: (required)
        :param float cl: (required)
        :param float organic_substances: (required)
        :param float salt_conductivity: (required)
        :return: RosselkhozBankCreateComplexAnalysisRequestCommand
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_uid2', 'client_uid2', 'sampling_date2', 'name2', 'phone2', 'region2', 'district2', 'address2', 'field_number2', 'sampling_coordinates2', 'sampling_depth2', 'culture2', 'planned_yield2', 'degree_of_soil_moisture2', 'fertilizer_action_year2', 'mechanical_composition2', 'preceding_culture2', 'depth_of_arable_layer2', 'preceding_culture_yield2', 'ph_water2', 'ph_salt2', 'nh5', 'no4', 'p2o6', 'k2o2', 'method2', 's2', 'ca2', 'mg2', 'na2', 'so5', 'cl2', 'organic_substances2', 'salt_conductivity2', 'request_uid', 'client_uid', 'sampling_date', 'name', 'phone', 'region', 'district', 'address', 'field_number', 'sampling_coordinates', 'sampling_depth', 'culture', 'planned_yield', 'degree_of_soil_moisture', 'fertilizer_action_year', 'mechanical_composition', 'preceding_culture', 'depth_of_arable_layer', 'preceding_culture_yield', 'ph_water', 'ph_salt', 'nh4', 'no3', 'p2o5', 'k2o', 'method', 's', 'ca', 'mg', 'na', 'so4', 'cl', 'organic_substances', 'salt_conductivity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complex_analysis_request_create_complex_analysis_request_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_uid2' is set
        if ('request_uid2' not in params or
                params['request_uid2'] is None):
            raise ValueError("Missing the required parameter `request_uid2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'client_uid2' is set
        if ('client_uid2' not in params or
                params['client_uid2'] is None):
            raise ValueError("Missing the required parameter `client_uid2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_date2' is set
        if ('sampling_date2' not in params or
                params['sampling_date2'] is None):
            raise ValueError("Missing the required parameter `sampling_date2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'phone2' is set
        if ('phone2' not in params or
                params['phone2'] is None):
            raise ValueError("Missing the required parameter `phone2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'region2' is set
        if ('region2' not in params or
                params['region2'] is None):
            raise ValueError("Missing the required parameter `region2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'district2' is set
        if ('district2' not in params or
                params['district2'] is None):
            raise ValueError("Missing the required parameter `district2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'address2' is set
        if ('address2' not in params or
                params['address2'] is None):
            raise ValueError("Missing the required parameter `address2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'field_number2' is set
        if ('field_number2' not in params or
                params['field_number2'] is None):
            raise ValueError("Missing the required parameter `field_number2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_coordinates2' is set
        if ('sampling_coordinates2' not in params or
                params['sampling_coordinates2'] is None):
            raise ValueError("Missing the required parameter `sampling_coordinates2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_depth2' is set
        if ('sampling_depth2' not in params or
                params['sampling_depth2'] is None):
            raise ValueError("Missing the required parameter `sampling_depth2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'culture2' is set
        if ('culture2' not in params or
                params['culture2'] is None):
            raise ValueError("Missing the required parameter `culture2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'planned_yield2' is set
        if ('planned_yield2' not in params or
                params['planned_yield2'] is None):
            raise ValueError("Missing the required parameter `planned_yield2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'degree_of_soil_moisture2' is set
        if ('degree_of_soil_moisture2' not in params or
                params['degree_of_soil_moisture2'] is None):
            raise ValueError("Missing the required parameter `degree_of_soil_moisture2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'fertilizer_action_year2' is set
        if ('fertilizer_action_year2' not in params or
                params['fertilizer_action_year2'] is None):
            raise ValueError("Missing the required parameter `fertilizer_action_year2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'mechanical_composition2' is set
        if ('mechanical_composition2' not in params or
                params['mechanical_composition2'] is None):
            raise ValueError("Missing the required parameter `mechanical_composition2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture2' is set
        if ('preceding_culture2' not in params or
                params['preceding_culture2'] is None):
            raise ValueError("Missing the required parameter `preceding_culture2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'depth_of_arable_layer2' is set
        if ('depth_of_arable_layer2' not in params or
                params['depth_of_arable_layer2'] is None):
            raise ValueError("Missing the required parameter `depth_of_arable_layer2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture_yield2' is set
        if ('preceding_culture_yield2' not in params or
                params['preceding_culture_yield2'] is None):
            raise ValueError("Missing the required parameter `preceding_culture_yield2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ph_water2' is set
        if ('ph_water2' not in params or
                params['ph_water2'] is None):
            raise ValueError("Missing the required parameter `ph_water2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ph_salt2' is set
        if ('ph_salt2' not in params or
                params['ph_salt2'] is None):
            raise ValueError("Missing the required parameter `ph_salt2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'nh5' is set
        if ('nh5' not in params or
                params['nh5'] is None):
            raise ValueError("Missing the required parameter `nh5` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'no4' is set
        if ('no4' not in params or
                params['no4'] is None):
            raise ValueError("Missing the required parameter `no4` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'p2o6' is set
        if ('p2o6' not in params or
                params['p2o6'] is None):
            raise ValueError("Missing the required parameter `p2o6` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'k2o2' is set
        if ('k2o2' not in params or
                params['k2o2'] is None):
            raise ValueError("Missing the required parameter `k2o2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'method2' is set
        if ('method2' not in params or
                params['method2'] is None):
            raise ValueError("Missing the required parameter `method2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 's2' is set
        if ('s2' not in params or
                params['s2'] is None):
            raise ValueError("Missing the required parameter `s2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ca2' is set
        if ('ca2' not in params or
                params['ca2'] is None):
            raise ValueError("Missing the required parameter `ca2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'mg2' is set
        if ('mg2' not in params or
                params['mg2'] is None):
            raise ValueError("Missing the required parameter `mg2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'na2' is set
        if ('na2' not in params or
                params['na2'] is None):
            raise ValueError("Missing the required parameter `na2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'so5' is set
        if ('so5' not in params or
                params['so5'] is None):
            raise ValueError("Missing the required parameter `so5` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'cl2' is set
        if ('cl2' not in params or
                params['cl2'] is None):
            raise ValueError("Missing the required parameter `cl2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'organic_substances2' is set
        if ('organic_substances2' not in params or
                params['organic_substances2'] is None):
            raise ValueError("Missing the required parameter `organic_substances2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'salt_conductivity2' is set
        if ('salt_conductivity2' not in params or
                params['salt_conductivity2'] is None):
            raise ValueError("Missing the required parameter `salt_conductivity2` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'request_uid' is set
        if ('request_uid' not in params or
                params['request_uid'] is None):
            raise ValueError("Missing the required parameter `request_uid` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'client_uid' is set
        if ('client_uid' not in params or
                params['client_uid'] is None):
            raise ValueError("Missing the required parameter `client_uid` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_date' is set
        if ('sampling_date' not in params or
                params['sampling_date'] is None):
            raise ValueError("Missing the required parameter `sampling_date` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'phone' is set
        if ('phone' not in params or
                params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'region' is set
        if ('region' not in params or
                params['region'] is None):
            raise ValueError("Missing the required parameter `region` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'district' is set
        if ('district' not in params or
                params['district'] is None):
            raise ValueError("Missing the required parameter `district` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'field_number' is set
        if ('field_number' not in params or
                params['field_number'] is None):
            raise ValueError("Missing the required parameter `field_number` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_coordinates' is set
        if ('sampling_coordinates' not in params or
                params['sampling_coordinates'] is None):
            raise ValueError("Missing the required parameter `sampling_coordinates` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'sampling_depth' is set
        if ('sampling_depth' not in params or
                params['sampling_depth'] is None):
            raise ValueError("Missing the required parameter `sampling_depth` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'culture' is set
        if ('culture' not in params or
                params['culture'] is None):
            raise ValueError("Missing the required parameter `culture` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'planned_yield' is set
        if ('planned_yield' not in params or
                params['planned_yield'] is None):
            raise ValueError("Missing the required parameter `planned_yield` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'degree_of_soil_moisture' is set
        if ('degree_of_soil_moisture' not in params or
                params['degree_of_soil_moisture'] is None):
            raise ValueError("Missing the required parameter `degree_of_soil_moisture` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'fertilizer_action_year' is set
        if ('fertilizer_action_year' not in params or
                params['fertilizer_action_year'] is None):
            raise ValueError("Missing the required parameter `fertilizer_action_year` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'mechanical_composition' is set
        if ('mechanical_composition' not in params or
                params['mechanical_composition'] is None):
            raise ValueError("Missing the required parameter `mechanical_composition` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture' is set
        if ('preceding_culture' not in params or
                params['preceding_culture'] is None):
            raise ValueError("Missing the required parameter `preceding_culture` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'depth_of_arable_layer' is set
        if ('depth_of_arable_layer' not in params or
                params['depth_of_arable_layer'] is None):
            raise ValueError("Missing the required parameter `depth_of_arable_layer` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'preceding_culture_yield' is set
        if ('preceding_culture_yield' not in params or
                params['preceding_culture_yield'] is None):
            raise ValueError("Missing the required parameter `preceding_culture_yield` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ph_water' is set
        if ('ph_water' not in params or
                params['ph_water'] is None):
            raise ValueError("Missing the required parameter `ph_water` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ph_salt' is set
        if ('ph_salt' not in params or
                params['ph_salt'] is None):
            raise ValueError("Missing the required parameter `ph_salt` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'nh4' is set
        if ('nh4' not in params or
                params['nh4'] is None):
            raise ValueError("Missing the required parameter `nh4` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'no3' is set
        if ('no3' not in params or
                params['no3'] is None):
            raise ValueError("Missing the required parameter `no3` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'p2o5' is set
        if ('p2o5' not in params or
                params['p2o5'] is None):
            raise ValueError("Missing the required parameter `p2o5` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'k2o' is set
        if ('k2o' not in params or
                params['k2o'] is None):
            raise ValueError("Missing the required parameter `k2o` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'method' is set
        if ('method' not in params or
                params['method'] is None):
            raise ValueError("Missing the required parameter `method` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 's' is set
        if ('s' not in params or
                params['s'] is None):
            raise ValueError("Missing the required parameter `s` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'ca' is set
        if ('ca' not in params or
                params['ca'] is None):
            raise ValueError("Missing the required parameter `ca` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'mg' is set
        if ('mg' not in params or
                params['mg'] is None):
            raise ValueError("Missing the required parameter `mg` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'na' is set
        if ('na' not in params or
                params['na'] is None):
            raise ValueError("Missing the required parameter `na` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'so4' is set
        if ('so4' not in params or
                params['so4'] is None):
            raise ValueError("Missing the required parameter `so4` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'cl' is set
        if ('cl' not in params or
                params['cl'] is None):
            raise ValueError("Missing the required parameter `cl` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'organic_substances' is set
        if ('organic_substances' not in params or
                params['organic_substances'] is None):
            raise ValueError("Missing the required parameter `organic_substances` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501
        # verify the required parameter 'salt_conductivity' is set
        if ('salt_conductivity' not in params or
                params['salt_conductivity'] is None):
            raise ValueError("Missing the required parameter `salt_conductivity` when calling `complex_analysis_request_create_complex_analysis_request_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_uid' in params:
            form_params.append(('request_uid', params['request_uid']))  # noqa: E501
        if 'client_uid' in params:
            form_params.append(('client_uid', params['client_uid']))  # noqa: E501
        if 'sampling_date' in params:
            form_params.append(('sampling_date', params['sampling_date']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'district' in params:
            form_params.append(('district', params['district']))  # noqa: E501
        if 'address' in params:
            form_params.append(('address', params['address']))  # noqa: E501
        if 'field_number' in params:
            form_params.append(('field_number', params['field_number']))  # noqa: E501
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'sampling_depth' in params:
            form_params.append(('sampling_depth', params['sampling_depth']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'planned_yield' in params:
            form_params.append(('planned_yield', params['planned_yield']))  # noqa: E501
        if 'degree_of_soil_moisture' in params:
            form_params.append(('degree_of_soil_moisture', params['degree_of_soil_moisture']))  # noqa: E501
        if 'fertilizer_action_year' in params:
            form_params.append(('fertilizer_action_year', params['fertilizer_action_year']))  # noqa: E501
        if 'mechanical_composition' in params:
            form_params.append(('mechanical_composition', params['mechanical_composition']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'depth_of_arable_layer' in params:
            form_params.append(('depth_of_arable_layer', params['depth_of_arable_layer']))  # noqa: E501
        if 'preceding_culture_yield' in params:
            form_params.append(('preceding_culture_yield', params['preceding_culture_yield']))  # noqa: E501
        if 'ph_water' in params:
            form_params.append(('ph_water', params['ph_water']))  # noqa: E501
        if 'ph_salt' in params:
            form_params.append(('ph_salt', params['ph_salt']))  # noqa: E501
        if 'nh4' in params:
            form_params.append(('nh4', params['nh4']))  # noqa: E501
        if 'no3' in params:
            form_params.append(('no3', params['no3']))  # noqa: E501
        if 'p2o5' in params:
            form_params.append(('p2o5', params['p2o5']))  # noqa: E501
        if 'k2o' in params:
            form_params.append(('k2o', params['k2o']))  # noqa: E501
        if 'method' in params:
            form_params.append(('method', params['method']))  # noqa: E501
        if 's' in params:
            form_params.append(('s', params['s']))  # noqa: E501
        if 'ca' in params:
            form_params.append(('ca', params['ca']))  # noqa: E501
        if 'mg' in params:
            form_params.append(('mg', params['mg']))  # noqa: E501
        if 'na' in params:
            form_params.append(('na', params['na']))  # noqa: E501
        if 'so4' in params:
            form_params.append(('so4', params['so4']))  # noqa: E501
        if 'cl' in params:
            form_params.append(('cl', params['cl']))  # noqa: E501
        if 'organic_substances' in params:
            form_params.append(('organic_substances', params['organic_substances']))  # noqa: E501
        if 'salt_conductivity' in params:
            form_params.append(('salt_conductivity', params['salt_conductivity']))  # noqa: E501
        if 'request_uid' in params:
            form_params.append(('request_uid', params['request_uid']))  # noqa: E501
        if 'client_uid' in params:
            form_params.append(('client_uid', params['client_uid']))  # noqa: E501
        if 'sampling_date' in params:
            form_params.append(('sampling_date', params['sampling_date']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'district' in params:
            form_params.append(('district', params['district']))  # noqa: E501
        if 'address' in params:
            form_params.append(('address', params['address']))  # noqa: E501
        if 'field_number' in params:
            form_params.append(('field_number', params['field_number']))  # noqa: E501
        if 'sampling_coordinates' in params:
            form_params.append(('sampling_coordinates', params['sampling_coordinates']))  # noqa: E501
        if 'sampling_depth' in params:
            form_params.append(('sampling_depth', params['sampling_depth']))  # noqa: E501
        if 'culture' in params:
            form_params.append(('culture', params['culture']))  # noqa: E501
        if 'planned_yield' in params:
            form_params.append(('planned_yield', params['planned_yield']))  # noqa: E501
        if 'degree_of_soil_moisture' in params:
            form_params.append(('degree_of_soil_moisture', params['degree_of_soil_moisture']))  # noqa: E501
        if 'fertilizer_action_year' in params:
            form_params.append(('fertilizer_action_year', params['fertilizer_action_year']))  # noqa: E501
        if 'mechanical_composition' in params:
            form_params.append(('mechanical_composition', params['mechanical_composition']))  # noqa: E501
        if 'preceding_culture' in params:
            form_params.append(('preceding_culture', params['preceding_culture']))  # noqa: E501
        if 'depth_of_arable_layer' in params:
            form_params.append(('depth_of_arable_layer', params['depth_of_arable_layer']))  # noqa: E501
        if 'preceding_culture_yield' in params:
            form_params.append(('preceding_culture_yield', params['preceding_culture_yield']))  # noqa: E501
        if 'ph_water' in params:
            form_params.append(('ph_water', params['ph_water']))  # noqa: E501
        if 'ph_salt' in params:
            form_params.append(('ph_salt', params['ph_salt']))  # noqa: E501
        if 'nh4' in params:
            form_params.append(('nh4', params['nh4']))  # noqa: E501
        if 'no3' in params:
            form_params.append(('no3', params['no3']))  # noqa: E501
        if 'p2o5' in params:
            form_params.append(('p2o5', params['p2o5']))  # noqa: E501
        if 'k2o' in params:
            form_params.append(('k2o', params['k2o']))  # noqa: E501
        if 'method' in params:
            form_params.append(('method', params['method']))  # noqa: E501
        if 's' in params:
            form_params.append(('s', params['s']))  # noqa: E501
        if 'ca' in params:
            form_params.append(('ca', params['ca']))  # noqa: E501
        if 'mg' in params:
            form_params.append(('mg', params['mg']))  # noqa: E501
        if 'na' in params:
            form_params.append(('na', params['na']))  # noqa: E501
        if 'so4' in params:
            form_params.append(('so4', params['so4']))  # noqa: E501
        if 'cl' in params:
            form_params.append(('cl', params['cl']))  # noqa: E501
        if 'organic_substances' in params:
            form_params.append(('organic_substances', params['organic_substances']))  # noqa: E501
        if 'salt_conductivity' in params:
            form_params.append(('salt_conductivity', params['salt_conductivity']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/rosselkhoz_bank/complex_analysis_request/create_complex_analysis_request/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosselkhozBankCreateComplexAnalysisRequestCommand',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def complex_analysis_request_list(self, **kwargs):  # noqa: E501
        """complex_analysis_request_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedRosselkhozBankComplexAnalysisRequestList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complex_analysis_request_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.complex_analysis_request_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def complex_analysis_request_list_with_http_info(self, **kwargs):  # noqa: E501
        """complex_analysis_request_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedRosselkhozBankComplexAnalysisRequestList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distinct', 'filter', 'page', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complex_analysis_request_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'distinct' in params:
            query_params.append(('distinct', params['distinct']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/rosselkhoz_bank/complex_analysis_request/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedRosselkhozBankComplexAnalysisRequestList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def complex_analysis_request_retrieve(self, id, **kwargs):  # noqa: E501
        """complex_analysis_request_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Заявка на комплексный анализ. (required)
        :return: RosselkhozBankComplexAnalysisRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complex_analysis_request_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.complex_analysis_request_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def complex_analysis_request_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """complex_analysis_request_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complex_analysis_request_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Заявка на комплексный анализ. (required)
        :return: RosselkhozBankComplexAnalysisRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complex_analysis_request_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `complex_analysis_request_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/rosselkhoz_bank/complex_analysis_request/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RosselkhozBankComplexAnalysisRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
