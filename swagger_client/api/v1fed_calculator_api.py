# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class V1fedCalculatorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def fed_calculator_close_create(self, id, **kwargs):  # noqa: E501
        """fed_calculator_close_create  # noqa: E501

         Завершает работу с калькулятором       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_close_create(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_close_create_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_close_create_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fed_calculator_close_create_with_http_info(self, id, **kwargs):  # noqa: E501
        """fed_calculator_close_create  # noqa: E501

         Завершает работу с калькулятором       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_close_create_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_close_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fed_calculator_close_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/{id}/close/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FedCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fed_calculator_create_calculator_create(self, body, **kwargs):  # noqa: E501
        """fed_calculator_create_calculator_create  # noqa: E501

         Создает ФЭД калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_create_calculator_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FedcalculatorCreateCalculator body: (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_create_calculator_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_create_calculator_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def fed_calculator_create_calculator_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """fed_calculator_create_calculator_create  # noqa: E501

         Создает ФЭД калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_create_calculator_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FedcalculatorCreateCalculator body: (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_create_calculator_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `fed_calculator_create_calculator_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/create_calculator/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FedCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fed_calculator_create_calculator_create(self, name2, name, **kwargs):  # noqa: E501
        """fed_calculator_create_calculator_create  # noqa: E501

         Создает ФЭД калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_create_calculator_create(name2, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str name: (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_create_calculator_create_with_http_info(name2, name, **kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_create_calculator_create_with_http_info(name2, name, **kwargs)  # noqa: E501
            return data

    def fed_calculator_create_calculator_create_with_http_info(self, name2, name, **kwargs):  # noqa: E501
        """fed_calculator_create_calculator_create  # noqa: E501

         Создает ФЭД калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_create_calculator_create_with_http_info(name2, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str name: (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name2', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_create_calculator_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `fed_calculator_create_calculator_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `fed_calculator_create_calculator_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/create_calculator/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FedCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fed_calculator_create_calculator_create(self, name2, name, **kwargs):  # noqa: E501
        """fed_calculator_create_calculator_create  # noqa: E501

         Создает ФЭД калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_create_calculator_create(name2, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str name: (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_create_calculator_create_with_http_info(name2, name, **kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_create_calculator_create_with_http_info(name2, name, **kwargs)  # noqa: E501
            return data

    def fed_calculator_create_calculator_create_with_http_info(self, name2, name, **kwargs):  # noqa: E501
        """fed_calculator_create_calculator_create  # noqa: E501

         Создает ФЭД калькулятор       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_create_calculator_create_with_http_info(name2, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str name: (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name2', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_create_calculator_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `fed_calculator_create_calculator_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `fed_calculator_create_calculator_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/create_calculator/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FedCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fed_calculator_destroy(self, id, **kwargs):  # noqa: E501
        """fed_calculator_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_destroy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_destroy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_destroy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fed_calculator_destroy_with_http_info(self, id, **kwargs):  # noqa: E501
        """fed_calculator_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fed_calculator_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fed_calculator_list(self, **kwargs):  # noqa: E501
        """fed_calculator_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedFedCalculatorList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def fed_calculator_list_with_http_info(self, **kwargs):  # noqa: E501
        """fed_calculator_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedFedCalculatorList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distinct', 'filter', 'page', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'distinct' in params:
            query_params.append(('distinct', params['distinct']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedFedCalculatorList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fed_calculator_retrieve(self, id, **kwargs):  # noqa: E501
        """fed_calculator_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fed_calculator_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """fed_calculator_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fed_calculator_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FedCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fed_calculator_set_parameters_create(self, id, **kwargs):  # noqa: E501
        """fed_calculator_set_parameters_create  # noqa: E501

         Устанавливает параметры расчета для ФЭД калькулятора       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_set_parameters_create(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :param FedcalculatorSetParameters body:
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_set_parameters_create_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_set_parameters_create_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fed_calculator_set_parameters_create_with_http_info(self, id, **kwargs):  # noqa: E501
        """fed_calculator_set_parameters_create  # noqa: E501

         Устанавливает параметры расчета для ФЭД калькулятора       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_set_parameters_create_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :param FedcalculatorSetParameters body:
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_set_parameters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fed_calculator_set_parameters_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'c_k2' in params:
            form_params.append(('c_k2', params['c_k2']))  # noqa: E501
        if 'c_n' in params:
            form_params.append(('c_n', params['c_n']))  # noqa: E501
        if 'c_p' in params:
            form_params.append(('c_p', params['c_p']))  # noqa: E501
        if 'c_ks' in params:
            form_params.append(('c_ks', params['c_ks']))  # noqa: E501
        if 'c_kcl' in params:
            form_params.append(('c_kcl', params['c_kcl']))  # noqa: E501
        if 'c_k3' in params:
            form_params.append(('c_k3', params['c_k3']))  # noqa: E501
        if 'c_ca' in params:
            form_params.append(('c_ca', params['c_ca']))  # noqa: E501
        if 'c_mg' in params:
            form_params.append(('c_mg', params['c_mg']))  # noqa: E501
        if 'c_b' in params:
            form_params.append(('c_b', params['c_b']))  # noqa: E501
        if 'c_cu' in params:
            form_params.append(('c_cu', params['c_cu']))  # noqa: E501
        if 'c_k4' in params:
            form_params.append(('c_k4', params['c_k4']))  # noqa: E501
        if 'c_zn' in params:
            form_params.append(('c_zn', params['c_zn']))  # noqa: E501
        if 'c_mn' in params:
            form_params.append(('c_mn', params['c_mn']))  # noqa: E501
        if 'c_fe' in params:
            form_params.append(('c_fe', params['c_fe']))  # noqa: E501
        if 'c_k5' in params:
            form_params.append(('c_k5', params['c_k5']))  # noqa: E501
        if 'c_mo' in params:
            form_params.append(('c_mo', params['c_mo']))  # noqa: E501
        if 'c_co' in params:
            form_params.append(('c_co', params['c_co']))  # noqa: E501
        if 'c_i' in params:
            form_params.append(('c_i', params['c_i']))  # noqa: E501
        if 'c_k6' in params:
            form_params.append(('c_k6', params['c_k6']))  # noqa: E501
        if 'd_k2' in params:
            form_params.append(('d_k2', params['d_k2']))  # noqa: E501
        if 'd_n' in params:
            form_params.append(('d_n', params['d_n']))  # noqa: E501
        if 'd_p' in params:
            form_params.append(('d_p', params['d_p']))  # noqa: E501
        if 'd_ks' in params:
            form_params.append(('d_ks', params['d_ks']))  # noqa: E501
        if 'd_kcl' in params:
            form_params.append(('d_kcl', params['d_kcl']))  # noqa: E501
        if 'd_k3' in params:
            form_params.append(('d_k3', params['d_k3']))  # noqa: E501
        if 'd_ca' in params:
            form_params.append(('d_ca', params['d_ca']))  # noqa: E501
        if 'd_mg' in params:
            form_params.append(('d_mg', params['d_mg']))  # noqa: E501
        if 'd_b' in params:
            form_params.append(('d_b', params['d_b']))  # noqa: E501
        if 'd_cu' in params:
            form_params.append(('d_cu', params['d_cu']))  # noqa: E501
        if 'd_k4' in params:
            form_params.append(('d_k4', params['d_k4']))  # noqa: E501
        if 'd_zn' in params:
            form_params.append(('d_zn', params['d_zn']))  # noqa: E501
        if 'd_mn' in params:
            form_params.append(('d_mn', params['d_mn']))  # noqa: E501
        if 'd_fe' in params:
            form_params.append(('d_fe', params['d_fe']))  # noqa: E501
        if 'd_k5' in params:
            form_params.append(('d_k5', params['d_k5']))  # noqa: E501
        if 'd_mo' in params:
            form_params.append(('d_mo', params['d_mo']))  # noqa: E501
        if 'd_co' in params:
            form_params.append(('d_co', params['d_co']))  # noqa: E501
        if 'd_i' in params:
            form_params.append(('d_i', params['d_i']))  # noqa: E501
        if 'd_k6' in params:
            form_params.append(('d_k6', params['d_k6']))  # noqa: E501
        if 'c_k2' in params:
            form_params.append(('c_k2', params['c_k2']))  # noqa: E501
        if 'c_n' in params:
            form_params.append(('c_n', params['c_n']))  # noqa: E501
        if 'c_p' in params:
            form_params.append(('c_p', params['c_p']))  # noqa: E501
        if 'c_ks' in params:
            form_params.append(('c_ks', params['c_ks']))  # noqa: E501
        if 'c_kcl' in params:
            form_params.append(('c_kcl', params['c_kcl']))  # noqa: E501
        if 'c_k3' in params:
            form_params.append(('c_k3', params['c_k3']))  # noqa: E501
        if 'c_ca' in params:
            form_params.append(('c_ca', params['c_ca']))  # noqa: E501
        if 'c_mg' in params:
            form_params.append(('c_mg', params['c_mg']))  # noqa: E501
        if 'c_b' in params:
            form_params.append(('c_b', params['c_b']))  # noqa: E501
        if 'c_cu' in params:
            form_params.append(('c_cu', params['c_cu']))  # noqa: E501
        if 'c_k4' in params:
            form_params.append(('c_k4', params['c_k4']))  # noqa: E501
        if 'c_zn' in params:
            form_params.append(('c_zn', params['c_zn']))  # noqa: E501
        if 'c_mn' in params:
            form_params.append(('c_mn', params['c_mn']))  # noqa: E501
        if 'c_fe' in params:
            form_params.append(('c_fe', params['c_fe']))  # noqa: E501
        if 'c_k5' in params:
            form_params.append(('c_k5', params['c_k5']))  # noqa: E501
        if 'c_mo' in params:
            form_params.append(('c_mo', params['c_mo']))  # noqa: E501
        if 'c_co' in params:
            form_params.append(('c_co', params['c_co']))  # noqa: E501
        if 'c_i' in params:
            form_params.append(('c_i', params['c_i']))  # noqa: E501
        if 'c_k6' in params:
            form_params.append(('c_k6', params['c_k6']))  # noqa: E501
        if 'd_k2' in params:
            form_params.append(('d_k2', params['d_k2']))  # noqa: E501
        if 'd_n' in params:
            form_params.append(('d_n', params['d_n']))  # noqa: E501
        if 'd_p' in params:
            form_params.append(('d_p', params['d_p']))  # noqa: E501
        if 'd_ks' in params:
            form_params.append(('d_ks', params['d_ks']))  # noqa: E501
        if 'd_kcl' in params:
            form_params.append(('d_kcl', params['d_kcl']))  # noqa: E501
        if 'd_k3' in params:
            form_params.append(('d_k3', params['d_k3']))  # noqa: E501
        if 'd_ca' in params:
            form_params.append(('d_ca', params['d_ca']))  # noqa: E501
        if 'd_mg' in params:
            form_params.append(('d_mg', params['d_mg']))  # noqa: E501
        if 'd_b' in params:
            form_params.append(('d_b', params['d_b']))  # noqa: E501
        if 'd_cu' in params:
            form_params.append(('d_cu', params['d_cu']))  # noqa: E501
        if 'd_k4' in params:
            form_params.append(('d_k4', params['d_k4']))  # noqa: E501
        if 'd_zn' in params:
            form_params.append(('d_zn', params['d_zn']))  # noqa: E501
        if 'd_mn' in params:
            form_params.append(('d_mn', params['d_mn']))  # noqa: E501
        if 'd_fe' in params:
            form_params.append(('d_fe', params['d_fe']))  # noqa: E501
        if 'd_k5' in params:
            form_params.append(('d_k5', params['d_k5']))  # noqa: E501
        if 'd_mo' in params:
            form_params.append(('d_mo', params['d_mo']))  # noqa: E501
        if 'd_co' in params:
            form_params.append(('d_co', params['d_co']))  # noqa: E501
        if 'd_i' in params:
            form_params.append(('d_i', params['d_i']))  # noqa: E501
        if 'd_k6' in params:
            form_params.append(('d_k6', params['d_k6']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/{id}/set_parameters/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FedCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fed_calculator_set_parameters_create(self, id, **kwargs):  # noqa: E501
        """fed_calculator_set_parameters_create  # noqa: E501

         Устанавливает параметры расчета для ФЭД калькулятора       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_set_parameters_create(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :param float c_k3:
        :param float c_n2:
        :param float c_p2:
        :param float c_ks2:
        :param float c_kcl2:
        :param float c_k4:
        :param float c_ca2:
        :param float c_mg2:
        :param float c_b2:
        :param float c_cu2:
        :param float c_k5:
        :param float c_zn2:
        :param float c_mn2:
        :param float c_fe2:
        :param float c_k6:
        :param float c_mo2:
        :param float c_co2:
        :param float c_i2:
        :param float c_k7:
        :param float d_k3:
        :param float d_n2:
        :param float d_p2:
        :param float d_ks2:
        :param float d_kcl2:
        :param float d_k4:
        :param float d_ca2:
        :param float d_mg2:
        :param float d_b2:
        :param float d_cu2:
        :param float d_k5:
        :param float d_zn2:
        :param float d_mn2:
        :param float d_fe2:
        :param float d_k6:
        :param float d_mo2:
        :param float d_co2:
        :param float d_i2:
        :param float d_k7:
        :param float c_k2:
        :param float c_n:
        :param float c_p:
        :param float c_ks:
        :param float c_kcl:
        :param float c_k4:
        :param float c_ca:
        :param float c_mg:
        :param float c_b:
        :param float c_cu:
        :param float c_k5:
        :param float c_zn:
        :param float c_mn:
        :param float c_fe:
        :param float c_k6:
        :param float c_mo:
        :param float c_co:
        :param float c_i:
        :param float c_k7:
        :param float d_k2:
        :param float d_n:
        :param float d_p:
        :param float d_ks:
        :param float d_kcl:
        :param float d_k4:
        :param float d_ca:
        :param float d_mg:
        :param float d_b:
        :param float d_cu:
        :param float d_k5:
        :param float d_zn:
        :param float d_mn:
        :param float d_fe:
        :param float d_k6:
        :param float d_mo:
        :param float d_co:
        :param float d_i:
        :param float d_k7:
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_set_parameters_create_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_set_parameters_create_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fed_calculator_set_parameters_create_with_http_info(self, id, **kwargs):  # noqa: E501
        """fed_calculator_set_parameters_create  # noqa: E501

         Устанавливает параметры расчета для ФЭД калькулятора       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_set_parameters_create_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :param float c_k3:
        :param float c_n2:
        :param float c_p2:
        :param float c_ks2:
        :param float c_kcl2:
        :param float c_k4:
        :param float c_ca2:
        :param float c_mg2:
        :param float c_b2:
        :param float c_cu2:
        :param float c_k5:
        :param float c_zn2:
        :param float c_mn2:
        :param float c_fe2:
        :param float c_k6:
        :param float c_mo2:
        :param float c_co2:
        :param float c_i2:
        :param float c_k7:
        :param float d_k3:
        :param float d_n2:
        :param float d_p2:
        :param float d_ks2:
        :param float d_kcl2:
        :param float d_k4:
        :param float d_ca2:
        :param float d_mg2:
        :param float d_b2:
        :param float d_cu2:
        :param float d_k5:
        :param float d_zn2:
        :param float d_mn2:
        :param float d_fe2:
        :param float d_k6:
        :param float d_mo2:
        :param float d_co2:
        :param float d_i2:
        :param float d_k7:
        :param float c_k2:
        :param float c_n:
        :param float c_p:
        :param float c_ks:
        :param float c_kcl:
        :param float c_k4:
        :param float c_ca:
        :param float c_mg:
        :param float c_b:
        :param float c_cu:
        :param float c_k5:
        :param float c_zn:
        :param float c_mn:
        :param float c_fe:
        :param float c_k6:
        :param float c_mo:
        :param float c_co:
        :param float c_i:
        :param float c_k7:
        :param float d_k2:
        :param float d_n:
        :param float d_p:
        :param float d_ks:
        :param float d_kcl:
        :param float d_k4:
        :param float d_ca:
        :param float d_mg:
        :param float d_b:
        :param float d_cu:
        :param float d_k5:
        :param float d_zn:
        :param float d_mn:
        :param float d_fe:
        :param float d_k6:
        :param float d_mo:
        :param float d_co:
        :param float d_i:
        :param float d_k7:
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'c_k3', 'c_n2', 'c_p2', 'c_ks2', 'c_kcl2', 'c_k4', 'c_ca2', 'c_mg2', 'c_b2', 'c_cu2', 'c_k5', 'c_zn2', 'c_mn2', 'c_fe2', 'c_k6', 'c_mo2', 'c_co2', 'c_i2', 'c_k7', 'd_k3', 'd_n2', 'd_p2', 'd_ks2', 'd_kcl2', 'd_k4', 'd_ca2', 'd_mg2', 'd_b2', 'd_cu2', 'd_k5', 'd_zn2', 'd_mn2', 'd_fe2', 'd_k6', 'd_mo2', 'd_co2', 'd_i2', 'd_k7', 'c_k2', 'c_n', 'c_p', 'c_ks', 'c_kcl', 'c_k4', 'c_ca', 'c_mg', 'c_b', 'c_cu', 'c_k5', 'c_zn', 'c_mn', 'c_fe', 'c_k6', 'c_mo', 'c_co', 'c_i', 'c_k7', 'd_k2', 'd_n', 'd_p', 'd_ks', 'd_kcl', 'd_k4', 'd_ca', 'd_mg', 'd_b', 'd_cu', 'd_k5', 'd_zn', 'd_mn', 'd_fe', 'd_k6', 'd_mo', 'd_co', 'd_i', 'd_k7']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_set_parameters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fed_calculator_set_parameters_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'c_k2' in params:
            form_params.append(('c_k2', params['c_k2']))  # noqa: E501
        if 'c_n' in params:
            form_params.append(('c_n', params['c_n']))  # noqa: E501
        if 'c_p' in params:
            form_params.append(('c_p', params['c_p']))  # noqa: E501
        if 'c_ks' in params:
            form_params.append(('c_ks', params['c_ks']))  # noqa: E501
        if 'c_kcl' in params:
            form_params.append(('c_kcl', params['c_kcl']))  # noqa: E501
        if 'c_k3' in params:
            form_params.append(('c_k3', params['c_k3']))  # noqa: E501
        if 'c_ca' in params:
            form_params.append(('c_ca', params['c_ca']))  # noqa: E501
        if 'c_mg' in params:
            form_params.append(('c_mg', params['c_mg']))  # noqa: E501
        if 'c_b' in params:
            form_params.append(('c_b', params['c_b']))  # noqa: E501
        if 'c_cu' in params:
            form_params.append(('c_cu', params['c_cu']))  # noqa: E501
        if 'c_k4' in params:
            form_params.append(('c_k4', params['c_k4']))  # noqa: E501
        if 'c_zn' in params:
            form_params.append(('c_zn', params['c_zn']))  # noqa: E501
        if 'c_mn' in params:
            form_params.append(('c_mn', params['c_mn']))  # noqa: E501
        if 'c_fe' in params:
            form_params.append(('c_fe', params['c_fe']))  # noqa: E501
        if 'c_k5' in params:
            form_params.append(('c_k5', params['c_k5']))  # noqa: E501
        if 'c_mo' in params:
            form_params.append(('c_mo', params['c_mo']))  # noqa: E501
        if 'c_co' in params:
            form_params.append(('c_co', params['c_co']))  # noqa: E501
        if 'c_i' in params:
            form_params.append(('c_i', params['c_i']))  # noqa: E501
        if 'c_k6' in params:
            form_params.append(('c_k6', params['c_k6']))  # noqa: E501
        if 'd_k2' in params:
            form_params.append(('d_k2', params['d_k2']))  # noqa: E501
        if 'd_n' in params:
            form_params.append(('d_n', params['d_n']))  # noqa: E501
        if 'd_p' in params:
            form_params.append(('d_p', params['d_p']))  # noqa: E501
        if 'd_ks' in params:
            form_params.append(('d_ks', params['d_ks']))  # noqa: E501
        if 'd_kcl' in params:
            form_params.append(('d_kcl', params['d_kcl']))  # noqa: E501
        if 'd_k3' in params:
            form_params.append(('d_k3', params['d_k3']))  # noqa: E501
        if 'd_ca' in params:
            form_params.append(('d_ca', params['d_ca']))  # noqa: E501
        if 'd_mg' in params:
            form_params.append(('d_mg', params['d_mg']))  # noqa: E501
        if 'd_b' in params:
            form_params.append(('d_b', params['d_b']))  # noqa: E501
        if 'd_cu' in params:
            form_params.append(('d_cu', params['d_cu']))  # noqa: E501
        if 'd_k4' in params:
            form_params.append(('d_k4', params['d_k4']))  # noqa: E501
        if 'd_zn' in params:
            form_params.append(('d_zn', params['d_zn']))  # noqa: E501
        if 'd_mn' in params:
            form_params.append(('d_mn', params['d_mn']))  # noqa: E501
        if 'd_fe' in params:
            form_params.append(('d_fe', params['d_fe']))  # noqa: E501
        if 'd_k5' in params:
            form_params.append(('d_k5', params['d_k5']))  # noqa: E501
        if 'd_mo' in params:
            form_params.append(('d_mo', params['d_mo']))  # noqa: E501
        if 'd_co' in params:
            form_params.append(('d_co', params['d_co']))  # noqa: E501
        if 'd_i' in params:
            form_params.append(('d_i', params['d_i']))  # noqa: E501
        if 'd_k6' in params:
            form_params.append(('d_k6', params['d_k6']))  # noqa: E501
        if 'c_k2' in params:
            form_params.append(('c_k2', params['c_k2']))  # noqa: E501
        if 'c_n' in params:
            form_params.append(('c_n', params['c_n']))  # noqa: E501
        if 'c_p' in params:
            form_params.append(('c_p', params['c_p']))  # noqa: E501
        if 'c_ks' in params:
            form_params.append(('c_ks', params['c_ks']))  # noqa: E501
        if 'c_kcl' in params:
            form_params.append(('c_kcl', params['c_kcl']))  # noqa: E501
        if 'c_k3' in params:
            form_params.append(('c_k3', params['c_k3']))  # noqa: E501
        if 'c_ca' in params:
            form_params.append(('c_ca', params['c_ca']))  # noqa: E501
        if 'c_mg' in params:
            form_params.append(('c_mg', params['c_mg']))  # noqa: E501
        if 'c_b' in params:
            form_params.append(('c_b', params['c_b']))  # noqa: E501
        if 'c_cu' in params:
            form_params.append(('c_cu', params['c_cu']))  # noqa: E501
        if 'c_k4' in params:
            form_params.append(('c_k4', params['c_k4']))  # noqa: E501
        if 'c_zn' in params:
            form_params.append(('c_zn', params['c_zn']))  # noqa: E501
        if 'c_mn' in params:
            form_params.append(('c_mn', params['c_mn']))  # noqa: E501
        if 'c_fe' in params:
            form_params.append(('c_fe', params['c_fe']))  # noqa: E501
        if 'c_k5' in params:
            form_params.append(('c_k5', params['c_k5']))  # noqa: E501
        if 'c_mo' in params:
            form_params.append(('c_mo', params['c_mo']))  # noqa: E501
        if 'c_co' in params:
            form_params.append(('c_co', params['c_co']))  # noqa: E501
        if 'c_i' in params:
            form_params.append(('c_i', params['c_i']))  # noqa: E501
        if 'c_k6' in params:
            form_params.append(('c_k6', params['c_k6']))  # noqa: E501
        if 'd_k2' in params:
            form_params.append(('d_k2', params['d_k2']))  # noqa: E501
        if 'd_n' in params:
            form_params.append(('d_n', params['d_n']))  # noqa: E501
        if 'd_p' in params:
            form_params.append(('d_p', params['d_p']))  # noqa: E501
        if 'd_ks' in params:
            form_params.append(('d_ks', params['d_ks']))  # noqa: E501
        if 'd_kcl' in params:
            form_params.append(('d_kcl', params['d_kcl']))  # noqa: E501
        if 'd_k3' in params:
            form_params.append(('d_k3', params['d_k3']))  # noqa: E501
        if 'd_ca' in params:
            form_params.append(('d_ca', params['d_ca']))  # noqa: E501
        if 'd_mg' in params:
            form_params.append(('d_mg', params['d_mg']))  # noqa: E501
        if 'd_b' in params:
            form_params.append(('d_b', params['d_b']))  # noqa: E501
        if 'd_cu' in params:
            form_params.append(('d_cu', params['d_cu']))  # noqa: E501
        if 'd_k4' in params:
            form_params.append(('d_k4', params['d_k4']))  # noqa: E501
        if 'd_zn' in params:
            form_params.append(('d_zn', params['d_zn']))  # noqa: E501
        if 'd_mn' in params:
            form_params.append(('d_mn', params['d_mn']))  # noqa: E501
        if 'd_fe' in params:
            form_params.append(('d_fe', params['d_fe']))  # noqa: E501
        if 'd_k5' in params:
            form_params.append(('d_k5', params['d_k5']))  # noqa: E501
        if 'd_mo' in params:
            form_params.append(('d_mo', params['d_mo']))  # noqa: E501
        if 'd_co' in params:
            form_params.append(('d_co', params['d_co']))  # noqa: E501
        if 'd_i' in params:
            form_params.append(('d_i', params['d_i']))  # noqa: E501
        if 'd_k6' in params:
            form_params.append(('d_k6', params['d_k6']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/{id}/set_parameters/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FedCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fed_calculator_set_parameters_create(self, id, **kwargs):  # noqa: E501
        """fed_calculator_set_parameters_create  # noqa: E501

         Устанавливает параметры расчета для ФЭД калькулятора       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_set_parameters_create(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :param float c_k3:
        :param float c_n2:
        :param float c_p2:
        :param float c_ks2:
        :param float c_kcl2:
        :param float c_k4:
        :param float c_ca2:
        :param float c_mg2:
        :param float c_b2:
        :param float c_cu2:
        :param float c_k5:
        :param float c_zn2:
        :param float c_mn2:
        :param float c_fe2:
        :param float c_k6:
        :param float c_mo2:
        :param float c_co2:
        :param float c_i2:
        :param float c_k7:
        :param float d_k3:
        :param float d_n2:
        :param float d_p2:
        :param float d_ks2:
        :param float d_kcl2:
        :param float d_k4:
        :param float d_ca2:
        :param float d_mg2:
        :param float d_b2:
        :param float d_cu2:
        :param float d_k5:
        :param float d_zn2:
        :param float d_mn2:
        :param float d_fe2:
        :param float d_k6:
        :param float d_mo2:
        :param float d_co2:
        :param float d_i2:
        :param float d_k7:
        :param float c_k2:
        :param float c_n:
        :param float c_p:
        :param float c_ks:
        :param float c_kcl:
        :param float c_k4:
        :param float c_ca:
        :param float c_mg:
        :param float c_b:
        :param float c_cu:
        :param float c_k5:
        :param float c_zn:
        :param float c_mn:
        :param float c_fe:
        :param float c_k6:
        :param float c_mo:
        :param float c_co:
        :param float c_i:
        :param float c_k7:
        :param float d_k2:
        :param float d_n:
        :param float d_p:
        :param float d_ks:
        :param float d_kcl:
        :param float d_k4:
        :param float d_ca:
        :param float d_mg:
        :param float d_b:
        :param float d_cu:
        :param float d_k5:
        :param float d_zn:
        :param float d_mn:
        :param float d_fe:
        :param float d_k6:
        :param float d_mo:
        :param float d_co:
        :param float d_i:
        :param float d_k7:
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fed_calculator_set_parameters_create_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fed_calculator_set_parameters_create_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fed_calculator_set_parameters_create_with_http_info(self, id, **kwargs):  # noqa: E501
        """fed_calculator_set_parameters_create  # noqa: E501

         Устанавливает параметры расчета для ФЭД калькулятора       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fed_calculator_set_parameters_create_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this ФЭД калькулятор. (required)
        :param float c_k3:
        :param float c_n2:
        :param float c_p2:
        :param float c_ks2:
        :param float c_kcl2:
        :param float c_k4:
        :param float c_ca2:
        :param float c_mg2:
        :param float c_b2:
        :param float c_cu2:
        :param float c_k5:
        :param float c_zn2:
        :param float c_mn2:
        :param float c_fe2:
        :param float c_k6:
        :param float c_mo2:
        :param float c_co2:
        :param float c_i2:
        :param float c_k7:
        :param float d_k3:
        :param float d_n2:
        :param float d_p2:
        :param float d_ks2:
        :param float d_kcl2:
        :param float d_k4:
        :param float d_ca2:
        :param float d_mg2:
        :param float d_b2:
        :param float d_cu2:
        :param float d_k5:
        :param float d_zn2:
        :param float d_mn2:
        :param float d_fe2:
        :param float d_k6:
        :param float d_mo2:
        :param float d_co2:
        :param float d_i2:
        :param float d_k7:
        :param float c_k2:
        :param float c_n:
        :param float c_p:
        :param float c_ks:
        :param float c_kcl:
        :param float c_k4:
        :param float c_ca:
        :param float c_mg:
        :param float c_b:
        :param float c_cu:
        :param float c_k5:
        :param float c_zn:
        :param float c_mn:
        :param float c_fe:
        :param float c_k6:
        :param float c_mo:
        :param float c_co:
        :param float c_i:
        :param float c_k7:
        :param float d_k2:
        :param float d_n:
        :param float d_p:
        :param float d_ks:
        :param float d_kcl:
        :param float d_k4:
        :param float d_ca:
        :param float d_mg:
        :param float d_b:
        :param float d_cu:
        :param float d_k5:
        :param float d_zn:
        :param float d_mn:
        :param float d_fe:
        :param float d_k6:
        :param float d_mo:
        :param float d_co:
        :param float d_i:
        :param float d_k7:
        :return: FedCalculator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'c_k3', 'c_n2', 'c_p2', 'c_ks2', 'c_kcl2', 'c_k4', 'c_ca2', 'c_mg2', 'c_b2', 'c_cu2', 'c_k5', 'c_zn2', 'c_mn2', 'c_fe2', 'c_k6', 'c_mo2', 'c_co2', 'c_i2', 'c_k7', 'd_k3', 'd_n2', 'd_p2', 'd_ks2', 'd_kcl2', 'd_k4', 'd_ca2', 'd_mg2', 'd_b2', 'd_cu2', 'd_k5', 'd_zn2', 'd_mn2', 'd_fe2', 'd_k6', 'd_mo2', 'd_co2', 'd_i2', 'd_k7', 'c_k2', 'c_n', 'c_p', 'c_ks', 'c_kcl', 'c_k4', 'c_ca', 'c_mg', 'c_b', 'c_cu', 'c_k5', 'c_zn', 'c_mn', 'c_fe', 'c_k6', 'c_mo', 'c_co', 'c_i', 'c_k7', 'd_k2', 'd_n', 'd_p', 'd_ks', 'd_kcl', 'd_k4', 'd_ca', 'd_mg', 'd_b', 'd_cu', 'd_k5', 'd_zn', 'd_mn', 'd_fe', 'd_k6', 'd_mo', 'd_co', 'd_i', 'd_k7']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fed_calculator_set_parameters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fed_calculator_set_parameters_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'c_k2' in params:
            form_params.append(('c_k2', params['c_k2']))  # noqa: E501
        if 'c_n' in params:
            form_params.append(('c_n', params['c_n']))  # noqa: E501
        if 'c_p' in params:
            form_params.append(('c_p', params['c_p']))  # noqa: E501
        if 'c_ks' in params:
            form_params.append(('c_ks', params['c_ks']))  # noqa: E501
        if 'c_kcl' in params:
            form_params.append(('c_kcl', params['c_kcl']))  # noqa: E501
        if 'c_k3' in params:
            form_params.append(('c_k3', params['c_k3']))  # noqa: E501
        if 'c_ca' in params:
            form_params.append(('c_ca', params['c_ca']))  # noqa: E501
        if 'c_mg' in params:
            form_params.append(('c_mg', params['c_mg']))  # noqa: E501
        if 'c_b' in params:
            form_params.append(('c_b', params['c_b']))  # noqa: E501
        if 'c_cu' in params:
            form_params.append(('c_cu', params['c_cu']))  # noqa: E501
        if 'c_k4' in params:
            form_params.append(('c_k4', params['c_k4']))  # noqa: E501
        if 'c_zn' in params:
            form_params.append(('c_zn', params['c_zn']))  # noqa: E501
        if 'c_mn' in params:
            form_params.append(('c_mn', params['c_mn']))  # noqa: E501
        if 'c_fe' in params:
            form_params.append(('c_fe', params['c_fe']))  # noqa: E501
        if 'c_k5' in params:
            form_params.append(('c_k5', params['c_k5']))  # noqa: E501
        if 'c_mo' in params:
            form_params.append(('c_mo', params['c_mo']))  # noqa: E501
        if 'c_co' in params:
            form_params.append(('c_co', params['c_co']))  # noqa: E501
        if 'c_i' in params:
            form_params.append(('c_i', params['c_i']))  # noqa: E501
        if 'c_k6' in params:
            form_params.append(('c_k6', params['c_k6']))  # noqa: E501
        if 'd_k2' in params:
            form_params.append(('d_k2', params['d_k2']))  # noqa: E501
        if 'd_n' in params:
            form_params.append(('d_n', params['d_n']))  # noqa: E501
        if 'd_p' in params:
            form_params.append(('d_p', params['d_p']))  # noqa: E501
        if 'd_ks' in params:
            form_params.append(('d_ks', params['d_ks']))  # noqa: E501
        if 'd_kcl' in params:
            form_params.append(('d_kcl', params['d_kcl']))  # noqa: E501
        if 'd_k3' in params:
            form_params.append(('d_k3', params['d_k3']))  # noqa: E501
        if 'd_ca' in params:
            form_params.append(('d_ca', params['d_ca']))  # noqa: E501
        if 'd_mg' in params:
            form_params.append(('d_mg', params['d_mg']))  # noqa: E501
        if 'd_b' in params:
            form_params.append(('d_b', params['d_b']))  # noqa: E501
        if 'd_cu' in params:
            form_params.append(('d_cu', params['d_cu']))  # noqa: E501
        if 'd_k4' in params:
            form_params.append(('d_k4', params['d_k4']))  # noqa: E501
        if 'd_zn' in params:
            form_params.append(('d_zn', params['d_zn']))  # noqa: E501
        if 'd_mn' in params:
            form_params.append(('d_mn', params['d_mn']))  # noqa: E501
        if 'd_fe' in params:
            form_params.append(('d_fe', params['d_fe']))  # noqa: E501
        if 'd_k5' in params:
            form_params.append(('d_k5', params['d_k5']))  # noqa: E501
        if 'd_mo' in params:
            form_params.append(('d_mo', params['d_mo']))  # noqa: E501
        if 'd_co' in params:
            form_params.append(('d_co', params['d_co']))  # noqa: E501
        if 'd_i' in params:
            form_params.append(('d_i', params['d_i']))  # noqa: E501
        if 'd_k6' in params:
            form_params.append(('d_k6', params['d_k6']))  # noqa: E501
        if 'c_k2' in params:
            form_params.append(('c_k2', params['c_k2']))  # noqa: E501
        if 'c_n' in params:
            form_params.append(('c_n', params['c_n']))  # noqa: E501
        if 'c_p' in params:
            form_params.append(('c_p', params['c_p']))  # noqa: E501
        if 'c_ks' in params:
            form_params.append(('c_ks', params['c_ks']))  # noqa: E501
        if 'c_kcl' in params:
            form_params.append(('c_kcl', params['c_kcl']))  # noqa: E501
        if 'c_k3' in params:
            form_params.append(('c_k3', params['c_k3']))  # noqa: E501
        if 'c_ca' in params:
            form_params.append(('c_ca', params['c_ca']))  # noqa: E501
        if 'c_mg' in params:
            form_params.append(('c_mg', params['c_mg']))  # noqa: E501
        if 'c_b' in params:
            form_params.append(('c_b', params['c_b']))  # noqa: E501
        if 'c_cu' in params:
            form_params.append(('c_cu', params['c_cu']))  # noqa: E501
        if 'c_k4' in params:
            form_params.append(('c_k4', params['c_k4']))  # noqa: E501
        if 'c_zn' in params:
            form_params.append(('c_zn', params['c_zn']))  # noqa: E501
        if 'c_mn' in params:
            form_params.append(('c_mn', params['c_mn']))  # noqa: E501
        if 'c_fe' in params:
            form_params.append(('c_fe', params['c_fe']))  # noqa: E501
        if 'c_k5' in params:
            form_params.append(('c_k5', params['c_k5']))  # noqa: E501
        if 'c_mo' in params:
            form_params.append(('c_mo', params['c_mo']))  # noqa: E501
        if 'c_co' in params:
            form_params.append(('c_co', params['c_co']))  # noqa: E501
        if 'c_i' in params:
            form_params.append(('c_i', params['c_i']))  # noqa: E501
        if 'c_k6' in params:
            form_params.append(('c_k6', params['c_k6']))  # noqa: E501
        if 'd_k2' in params:
            form_params.append(('d_k2', params['d_k2']))  # noqa: E501
        if 'd_n' in params:
            form_params.append(('d_n', params['d_n']))  # noqa: E501
        if 'd_p' in params:
            form_params.append(('d_p', params['d_p']))  # noqa: E501
        if 'd_ks' in params:
            form_params.append(('d_ks', params['d_ks']))  # noqa: E501
        if 'd_kcl' in params:
            form_params.append(('d_kcl', params['d_kcl']))  # noqa: E501
        if 'd_k3' in params:
            form_params.append(('d_k3', params['d_k3']))  # noqa: E501
        if 'd_ca' in params:
            form_params.append(('d_ca', params['d_ca']))  # noqa: E501
        if 'd_mg' in params:
            form_params.append(('d_mg', params['d_mg']))  # noqa: E501
        if 'd_b' in params:
            form_params.append(('d_b', params['d_b']))  # noqa: E501
        if 'd_cu' in params:
            form_params.append(('d_cu', params['d_cu']))  # noqa: E501
        if 'd_k4' in params:
            form_params.append(('d_k4', params['d_k4']))  # noqa: E501
        if 'd_zn' in params:
            form_params.append(('d_zn', params['d_zn']))  # noqa: E501
        if 'd_mn' in params:
            form_params.append(('d_mn', params['d_mn']))  # noqa: E501
        if 'd_fe' in params:
            form_params.append(('d_fe', params['d_fe']))  # noqa: E501
        if 'd_k5' in params:
            form_params.append(('d_k5', params['d_k5']))  # noqa: E501
        if 'd_mo' in params:
            form_params.append(('d_mo', params['d_mo']))  # noqa: E501
        if 'd_co' in params:
            form_params.append(('d_co', params['d_co']))  # noqa: E501
        if 'd_i' in params:
            form_params.append(('d_i', params['d_i']))  # noqa: E501
        if 'd_k6' in params:
            form_params.append(('d_k6', params['d_k6']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/fed_calculator/fed_calculator/{id}/set_parameters/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FedCalculator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
