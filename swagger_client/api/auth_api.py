# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_jwt_create_create(self, body, **kwargs):  # noqa: E501
        """auth_jwt_create_create  # noqa: E501

        Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_create_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenObtainPair body: (required)
        :return: TokenObtainPair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_jwt_create_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_jwt_create_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_jwt_create_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_jwt_create_create  # noqa: E501

        Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_create_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenObtainPair body: (required)
        :return: TokenObtainPair
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_jwt_create_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_jwt_create_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/jwt/create/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenObtainPair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    # def auth_jwt_create_create(self, username2, password2, access2, refresh2, username, password, access, refresh, **kwargs):  # noqa: E501
    #     """auth_jwt_create_create  # noqa: E501
    #
    #     Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.  # noqa: E501
    #     This method makes a synchronous HTTP request by default. To make an
    #     asynchronous HTTP request, please pass async_req=True
    #     >>> thread = api.auth_jwt_create_create(username2, password2, access2, refresh2, username, password, access, refresh, async_req=True)
    #     >>> result = thread.get()
    #
    #     :param async_req bool
    #     :param str username2: (required)
    #     :param str password2: (required)
    #     :param str access2: (required)
    #     :param str refresh2: (required)
    #     :param str username: (required)
    #     :param str password: (required)
    #     :param str access: (required)
    #     :param str refresh: (required)
    #     :return: TokenObtainPair
    #              If the method is called asynchronously,
    #              returns the request thread.
    #     """
    #     kwargs['_return_http_data_only'] = True
    #     if kwargs.get('async_req'):
    #         return self.auth_jwt_create_create_with_http_info(username2, password2, access2, refresh2, username, password, access, refresh, **kwargs)  # noqa: E501
    #     else:
    #         (data) = self.auth_jwt_create_create_with_http_info(username2, password2, access2, refresh2, username, password, access, refresh, **kwargs)  # noqa: E501
    #         return data
    #
    # def auth_jwt_create_create_with_http_info(self, username2, password2, access2, refresh2, username, password, access, refresh, **kwargs):  # noqa: E501
    #     """auth_jwt_create_create  # noqa: E501
    #
    #     Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.  # noqa: E501
    #     This method makes a synchronous HTTP request by default. To make an
    #     asynchronous HTTP request, please pass async_req=True
    #     >>> thread = api.auth_jwt_create_create_with_http_info(username2, password2, access2, refresh2, username, password, access, refresh, async_req=True)
    #     >>> result = thread.get()
    #
    #     :param async_req bool
    #     :param str username2: (required)
    #     :param str password2: (required)
    #     :param str access2: (required)
    #     :param str refresh2: (required)
    #     :param str username: (required)
    #     :param str password: (required)
    #     :param str access: (required)
    #     :param str refresh: (required)
    #     :return: TokenObtainPair
    #              If the method is called asynchronously,
    #              returns the request thread.
    #     """
    #
    #     all_params = ['username2', 'password2', 'access2', 'refresh2', 'username', 'password', 'access', 'refresh']  # noqa: E501
    #     all_params.append('async_req')
    #     all_params.append('_return_http_data_only')
    #     all_params.append('_preload_content')
    #     all_params.append('_request_timeout')
    #
    #     params = locals()
    #     for key, val in six.iteritems(params['kwargs']):
    #         if key not in all_params:
    #             raise TypeError(
    #                 "Got an unexpected keyword argument '%s'"
    #                 " to method auth_jwt_create_create" % key
    #             )
    #         params[key] = val
    #     del params['kwargs']
    #     # verify the required parameter 'username2' is set
    #     if ('username2' not in params or
    #             params['username2'] is None):
    #         raise ValueError("Missing the required parameter `username2` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'password2' is set
    #     if ('password2' not in params or
    #             params['password2'] is None):
    #         raise ValueError("Missing the required parameter `password2` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'access2' is set
    #     if ('access2' not in params or
    #             params['access2'] is None):
    #         raise ValueError("Missing the required parameter `access2` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'refresh2' is set
    #     if ('refresh2' not in params or
    #             params['refresh2'] is None):
    #         raise ValueError("Missing the required parameter `refresh2` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'username' is set
    #     if ('username' not in params or
    #             params['username'] is None):
    #         raise ValueError("Missing the required parameter `username` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'password' is set
    #     if ('password' not in params or
    #             params['password'] is None):
    #         raise ValueError("Missing the required parameter `password` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'access' is set
    #     if ('access' not in params or
    #             params['access'] is None):
    #         raise ValueError("Missing the required parameter `access` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'refresh' is set
    #     if ('refresh' not in params or
    #             params['refresh'] is None):
    #         raise ValueError("Missing the required parameter `refresh` when calling `auth_jwt_create_create`")  # noqa: E501
    #
    #     collection_formats = {}
    #
    #     path_params = {}
    #
    #     query_params = []
    #
    #     header_params = {}
    #
    #     form_params = []
    #     local_var_files = {}
    #     if 'username' in params:
    #         form_params.append(('username', params['username']))  # noqa: E501
    #     if 'password' in params:
    #         form_params.append(('password', params['password']))  # noqa: E501
    #     if 'access' in params:
    #         form_params.append(('access', params['access']))  # noqa: E501
    #     if 'refresh' in params:
    #         form_params.append(('refresh', params['refresh']))  # noqa: E501
    #     if 'username' in params:
    #         form_params.append(('username', params['username']))  # noqa: E501
    #     if 'password' in params:
    #         form_params.append(('password', params['password']))  # noqa: E501
    #     if 'access' in params:
    #         form_params.append(('access', params['access']))  # noqa: E501
    #     if 'refresh' in params:
    #         form_params.append(('refresh', params['refresh']))  # noqa: E501
    #
    #     body_params = None
    #     if 'body' in params:
    #         body_params = params['body']
    #     # HTTP header `Accept`
    #     header_params['Accept'] = self.api_client.select_header_accept(
    #         ['application/json'])  # noqa: E501
    #
    #     # HTTP header `Content-Type`
    #     header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
    #         ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501
    #
    #     # Authentication setting
    #     auth_settings = []  # noqa: E501
    #
    #     return self.api_client.call_api(
    #         '/auth/jwt/create/', 'POST',
    #         path_params,
    #         query_params,
    #         header_params,
    #         body=body_params,
    #         post_params=form_params,
    #         files=local_var_files,
    #         response_type='TokenObtainPair',  # noqa: E501
    #         auth_settings=auth_settings,
    #         async_req=params.get('async_req'),
    #         _return_http_data_only=params.get('_return_http_data_only'),
    #         _preload_content=params.get('_preload_content', True),
    #         _request_timeout=params.get('_request_timeout'),
    #         collection_formats=collection_formats)

    # def auth_jwt_create_create(self, username2, password2, access2, refresh2, username, password, access, refresh, **kwargs):  # noqa: E501
    #     """auth_jwt_create_create  # noqa: E501
    #
    #     Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.  # noqa: E501
    #     This method makes a synchronous HTTP request by default. To make an
    #     asynchronous HTTP request, please pass async_req=True
    #     >>> thread = api.auth_jwt_create_create(username2, password2, access2, refresh2, username, password, access, refresh, async_req=True)
    #     >>> result = thread.get()
    #
    #     :param async_req bool
    #     :param str username2: (required)
    #     :param str password2: (required)
    #     :param str access2: (required)
    #     :param str refresh2: (required)
    #     :param str username: (required)
    #     :param str password: (required)
    #     :param str access: (required)
    #     :param str refresh: (required)
    #     :return: TokenObtainPair
    #              If the method is called asynchronously,
    #              returns the request thread.
    #     """
    #     kwargs['_return_http_data_only'] = True
    #     if kwargs.get('async_req'):
    #         return self.auth_jwt_create_create_with_http_info(username2, password2, access2, refresh2, username, password, access, refresh, **kwargs)  # noqa: E501
    #     else:
    #         (data) = self.auth_jwt_create_create_with_http_info(username2, password2, access2, refresh2, username, password, access, refresh, **kwargs)  # noqa: E501
    #         return data
    #
    # def auth_jwt_create_create_with_http_info(self, username2, password2, access2, refresh2, username, password, access, refresh, **kwargs):  # noqa: E501
    #     """auth_jwt_create_create  # noqa: E501
    #
    #     Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.  # noqa: E501
    #     This method makes a synchronous HTTP request by default. To make an
    #     asynchronous HTTP request, please pass async_req=True
    #     >>> thread = api.auth_jwt_create_create_with_http_info(username2, password2, access2, refresh2, username, password, access, refresh, async_req=True)
    #     >>> result = thread.get()
    #
    #     :param async_req bool
    #     :param str username2: (required)
    #     :param str password2: (required)
    #     :param str access2: (required)
    #     :param str refresh2: (required)
    #     :param str username: (required)
    #     :param str password: (required)
    #     :param str access: (required)
    #     :param str refresh: (required)
    #     :return: TokenObtainPair
    #              If the method is called asynchronously,
    #              returns the request thread.
    #     """
    #
    #     all_params = ['username2', 'password2', 'access2', 'refresh2', 'username', 'password', 'access', 'refresh']  # noqa: E501
    #     all_params.append('async_req')
    #     all_params.append('_return_http_data_only')
    #     all_params.append('_preload_content')
    #     all_params.append('_request_timeout')
    #
    #     params = locals()
    #     for key, val in six.iteritems(params['kwargs']):
    #         if key not in all_params:
    #             raise TypeError(
    #                 "Got an unexpected keyword argument '%s'"
    #                 " to method auth_jwt_create_create" % key
    #             )
    #         params[key] = val
    #     del params['kwargs']
    #     # verify the required parameter 'username2' is set
    #     if ('username2' not in params or
    #             params['username2'] is None):
    #         raise ValueError("Missing the required parameter `username2` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'password2' is set
    #     if ('password2' not in params or
    #             params['password2'] is None):
    #         raise ValueError("Missing the required parameter `password2` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'access2' is set
    #     if ('access2' not in params or
    #             params['access2'] is None):
    #         raise ValueError("Missing the required parameter `access2` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'refresh2' is set
    #     if ('refresh2' not in params or
    #             params['refresh2'] is None):
    #         raise ValueError("Missing the required parameter `refresh2` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'username' is set
    #     if ('username' not in params or
    #             params['username'] is None):
    #         raise ValueError("Missing the required parameter `username` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'password' is set
    #     if ('password' not in params or
    #             params['password'] is None):
    #         raise ValueError("Missing the required parameter `password` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'access' is set
    #     if ('access' not in params or
    #             params['access'] is None):
    #         raise ValueError("Missing the required parameter `access` when calling `auth_jwt_create_create`")  # noqa: E501
    #     # verify the required parameter 'refresh' is set
    #     if ('refresh' not in params or
    #             params['refresh'] is None):
    #         raise ValueError("Missing the required parameter `refresh` when calling `auth_jwt_create_create`")  # noqa: E501
    #
    #     collection_formats = {}
    #
    #     path_params = {}
    #
    #     query_params = []
    #
    #     header_params = {}
    #
    #     form_params = []
    #     local_var_files = {}
    #     if 'username' in params:
    #         form_params.append(('username', params['username']))  # noqa: E501
    #     if 'password' in params:
    #         form_params.append(('password', params['password']))  # noqa: E501
    #     if 'access' in params:
    #         form_params.append(('access', params['access']))  # noqa: E501
    #     if 'refresh' in params:
    #         form_params.append(('refresh', params['refresh']))  # noqa: E501
    #     if 'username' in params:
    #         form_params.append(('username', params['username']))  # noqa: E501
    #     if 'password' in params:
    #         form_params.append(('password', params['password']))  # noqa: E501
    #     if 'access' in params:
    #         form_params.append(('access', params['access']))  # noqa: E501
    #     if 'refresh' in params:
    #         form_params.append(('refresh', params['refresh']))  # noqa: E501
    #
    #     body_params = None
    #     if 'body' in params:
    #         body_params = params['body']
    #     # HTTP header `Accept`
    #     header_params['Accept'] = self.api_client.select_header_accept(
    #         ['application/json'])  # noqa: E501
    #
    #     # HTTP header `Content-Type`
    #     header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
    #         ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501
    #
    #     # Authentication setting
    #     auth_settings = []  # noqa: E501
    #
    #     return self.api_client.call_api(
    #         '/auth/jwt/create/', 'POST',
    #         path_params,
    #         query_params,
    #         header_params,
    #         body=body_params,
    #         post_params=form_params,
    #         files=local_var_files,
    #         response_type='TokenObtainPair',  # noqa: E501
    #         auth_settings=auth_settings,
    #         async_req=params.get('async_req'),
    #         _return_http_data_only=params.get('_return_http_data_only'),
    #         _preload_content=params.get('_preload_content', True),
    #         _request_timeout=params.get('_request_timeout'),
    #         collection_formats=collection_formats)

    def auth_jwt_refresh_create(self, body, **kwargs):  # noqa: E501
        """auth_jwt_refresh_create  # noqa: E501

        Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_refresh_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRefresh body: (required)
        :return: TokenRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_jwt_refresh_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_jwt_refresh_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_jwt_refresh_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_jwt_refresh_create  # noqa: E501

        Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_refresh_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRefresh body: (required)
        :return: TokenRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_jwt_refresh_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_jwt_refresh_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/jwt/refresh/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenRefresh',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_jwt_refresh_create(self, access2, refresh2, access, refresh, **kwargs):  # noqa: E501
        """auth_jwt_refresh_create  # noqa: E501

        Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_refresh_create(access2, refresh2, access, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access2: (required)
        :param str refresh2: (required)
        :param str access: (required)
        :param str refresh: (required)
        :return: TokenRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_jwt_refresh_create_with_http_info(access2, refresh2, access, refresh, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_jwt_refresh_create_with_http_info(access2, refresh2, access, refresh, **kwargs)  # noqa: E501
            return data

    def auth_jwt_refresh_create_with_http_info(self, access2, refresh2, access, refresh, **kwargs):  # noqa: E501
        """auth_jwt_refresh_create  # noqa: E501

        Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_refresh_create_with_http_info(access2, refresh2, access, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access2: (required)
        :param str refresh2: (required)
        :param str access: (required)
        :param str refresh: (required)
        :return: TokenRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access2', 'refresh2', 'access', 'refresh']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_jwt_refresh_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access2' is set
        if ('access2' not in params or
                params['access2'] is None):
            raise ValueError("Missing the required parameter `access2` when calling `auth_jwt_refresh_create`")  # noqa: E501
        # verify the required parameter 'refresh2' is set
        if ('refresh2' not in params or
                params['refresh2'] is None):
            raise ValueError("Missing the required parameter `refresh2` when calling `auth_jwt_refresh_create`")  # noqa: E501
        # verify the required parameter 'access' is set
        if ('access' not in params or
                params['access'] is None):
            raise ValueError("Missing the required parameter `access` when calling `auth_jwt_refresh_create`")  # noqa: E501
        # verify the required parameter 'refresh' is set
        if ('refresh' not in params or
                params['refresh'] is None):
            raise ValueError("Missing the required parameter `refresh` when calling `auth_jwt_refresh_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/jwt/refresh/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenRefresh',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_jwt_refresh_create(self, access2, refresh2, access, refresh, **kwargs):  # noqa: E501
        """auth_jwt_refresh_create  # noqa: E501

        Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_refresh_create(access2, refresh2, access, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access2: (required)
        :param str refresh2: (required)
        :param str access: (required)
        :param str refresh: (required)
        :return: TokenRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_jwt_refresh_create_with_http_info(access2, refresh2, access, refresh, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_jwt_refresh_create_with_http_info(access2, refresh2, access, refresh, **kwargs)  # noqa: E501
            return data

    def auth_jwt_refresh_create_with_http_info(self, access2, refresh2, access, refresh, **kwargs):  # noqa: E501
        """auth_jwt_refresh_create  # noqa: E501

        Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_refresh_create_with_http_info(access2, refresh2, access, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access2: (required)
        :param str refresh2: (required)
        :param str access: (required)
        :param str refresh: (required)
        :return: TokenRefresh
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access2', 'refresh2', 'access', 'refresh']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_jwt_refresh_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access2' is set
        if ('access2' not in params or
                params['access2'] is None):
            raise ValueError("Missing the required parameter `access2` when calling `auth_jwt_refresh_create`")  # noqa: E501
        # verify the required parameter 'refresh2' is set
        if ('refresh2' not in params or
                params['refresh2'] is None):
            raise ValueError("Missing the required parameter `refresh2` when calling `auth_jwt_refresh_create`")  # noqa: E501
        # verify the required parameter 'access' is set
        if ('access' not in params or
                params['access'] is None):
            raise ValueError("Missing the required parameter `access` when calling `auth_jwt_refresh_create`")  # noqa: E501
        # verify the required parameter 'refresh' is set
        if ('refresh' not in params or
                params['refresh'] is None):
            raise ValueError("Missing the required parameter `refresh` when calling `auth_jwt_refresh_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501
        if 'access' in params:
            form_params.append(('access', params['access']))  # noqa: E501
        if 'refresh' in params:
            form_params.append(('refresh', params['refresh']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/jwt/refresh/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenRefresh',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_jwt_verify_create(self, body, **kwargs):  # noqa: E501
        """auth_jwt_verify_create  # noqa: E501

        Takes a token and indicates if it is valid.  This view provides no information about a token's fitness for a particular use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_verify_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenVerify body: (required)
        :return: TokenVerify
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_jwt_verify_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_jwt_verify_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_jwt_verify_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_jwt_verify_create  # noqa: E501

        Takes a token and indicates if it is valid.  This view provides no information about a token's fitness for a particular use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_verify_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenVerify body: (required)
        :return: TokenVerify
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_jwt_verify_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_jwt_verify_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/jwt/verify/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenVerify',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_jwt_verify_create(self, token2, token, **kwargs):  # noqa: E501
        """auth_jwt_verify_create  # noqa: E501

        Takes a token and indicates if it is valid.  This view provides no information about a token's fitness for a particular use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_verify_create(token2, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token2: (required)
        :param str token: (required)
        :return: TokenVerify
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_jwt_verify_create_with_http_info(token2, token, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_jwt_verify_create_with_http_info(token2, token, **kwargs)  # noqa: E501
            return data

    def auth_jwt_verify_create_with_http_info(self, token2, token, **kwargs):  # noqa: E501
        """auth_jwt_verify_create  # noqa: E501

        Takes a token and indicates if it is valid.  This view provides no information about a token's fitness for a particular use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_verify_create_with_http_info(token2, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token2: (required)
        :param str token: (required)
        :return: TokenVerify
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token2', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_jwt_verify_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token2' is set
        if ('token2' not in params or
                params['token2'] is None):
            raise ValueError("Missing the required parameter `token2` when calling `auth_jwt_verify_create`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `auth_jwt_verify_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/jwt/verify/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenVerify',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_jwt_verify_create(self, token2, token, **kwargs):  # noqa: E501
        """auth_jwt_verify_create  # noqa: E501

        Takes a token and indicates if it is valid.  This view provides no information about a token's fitness for a particular use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_verify_create(token2, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token2: (required)
        :param str token: (required)
        :return: TokenVerify
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_jwt_verify_create_with_http_info(token2, token, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_jwt_verify_create_with_http_info(token2, token, **kwargs)  # noqa: E501
            return data

    def auth_jwt_verify_create_with_http_info(self, token2, token, **kwargs):  # noqa: E501
        """auth_jwt_verify_create  # noqa: E501

        Takes a token and indicates if it is valid.  This view provides no information about a token's fitness for a particular use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_jwt_verify_create_with_http_info(token2, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token2: (required)
        :param str token: (required)
        :return: TokenVerify
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token2', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_jwt_verify_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token2' is set
        if ('token2' not in params or
                params['token2'] is None):
            raise ValueError("Missing the required parameter `token2` when calling `auth_jwt_verify_create`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `auth_jwt_verify_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/jwt/verify/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenVerify',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_activation_create(self, body, **kwargs):  # noqa: E501
        """auth_users_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_activation_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Activation body: (required)
        :return: Activation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_activation_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_activation_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_users_activation_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_users_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_activation_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Activation body: (required)
        :return: Activation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_activation_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_users_activation_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/activation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_activation_create(self, uid2, token2, uid, token, **kwargs):  # noqa: E501
        """auth_users_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_activation_create(uid2, token2, uid, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid2: (required)
        :param str token2: (required)
        :param str uid: (required)
        :param str token: (required)
        :return: Activation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_activation_create_with_http_info(uid2, token2, uid, token, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_activation_create_with_http_info(uid2, token2, uid, token, **kwargs)  # noqa: E501
            return data

    def auth_users_activation_create_with_http_info(self, uid2, token2, uid, token, **kwargs):  # noqa: E501
        """auth_users_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_activation_create_with_http_info(uid2, token2, uid, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid2: (required)
        :param str token2: (required)
        :param str uid: (required)
        :param str token: (required)
        :return: Activation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid2', 'token2', 'uid', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_activation_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid2' is set
        if ('uid2' not in params or
                params['uid2'] is None):
            raise ValueError("Missing the required parameter `uid2` when calling `auth_users_activation_create`")  # noqa: E501
        # verify the required parameter 'token2' is set
        if ('token2' not in params or
                params['token2'] is None):
            raise ValueError("Missing the required parameter `token2` when calling `auth_users_activation_create`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `auth_users_activation_create`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `auth_users_activation_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/activation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_activation_create(self, uid2, token2, uid, token, **kwargs):  # noqa: E501
        """auth_users_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_activation_create(uid2, token2, uid, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid2: (required)
        :param str token2: (required)
        :param str uid: (required)
        :param str token: (required)
        :return: Activation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_activation_create_with_http_info(uid2, token2, uid, token, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_activation_create_with_http_info(uid2, token2, uid, token, **kwargs)  # noqa: E501
            return data

    def auth_users_activation_create_with_http_info(self, uid2, token2, uid, token, **kwargs):  # noqa: E501
        """auth_users_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_activation_create_with_http_info(uid2, token2, uid, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid2: (required)
        :param str token2: (required)
        :param str uid: (required)
        :param str token: (required)
        :return: Activation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid2', 'token2', 'uid', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_activation_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid2' is set
        if ('uid2' not in params or
                params['uid2'] is None):
            raise ValueError("Missing the required parameter `uid2` when calling `auth_users_activation_create`")  # noqa: E501
        # verify the required parameter 'token2' is set
        if ('token2' not in params or
                params['token2'] is None):
            raise ValueError("Missing the required parameter `token2` when calling `auth_users_activation_create`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `auth_users_activation_create`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `auth_users_activation_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/activation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_create(self, body, **kwargs):  # noqa: E501
        """auth_users_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserCreate body: (required)
        :return: UserCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_users_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_users_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserCreate body: (required)
        :return: UserCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_users_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_create(self, email2, username2, id2, password2, email, username, id, password, **kwargs):  # noqa: E501
        """auth_users_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_create(email2, username2, id2, password2, email, username, id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str username2: (required)
        :param int id2: (required)
        :param str password2: (required)
        :param str email: (required)
        :param str username: (required)
        :param int id: (required)
        :param str password: (required)
        :return: UserCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_create_with_http_info(email2, username2, id2, password2, email, username, id, password, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_create_with_http_info(email2, username2, id2, password2, email, username, id, password, **kwargs)  # noqa: E501
            return data

    def auth_users_create_with_http_info(self, email2, username2, id2, password2, email, username, id, password, **kwargs):  # noqa: E501
        """auth_users_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_create_with_http_info(email2, username2, id2, password2, email, username, id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str username2: (required)
        :param int id2: (required)
        :param str password2: (required)
        :param str email: (required)
        :param str username: (required)
        :param int id: (required)
        :param str password: (required)
        :return: UserCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'username2', 'id2', 'password2', 'email', 'username', 'id', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email2' is set
        if ('email2' not in params or
                params['email2'] is None):
            raise ValueError("Missing the required parameter `email2` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'username2' is set
        if ('username2' not in params or
                params['username2'] is None):
            raise ValueError("Missing the required parameter `username2` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'password2' is set
        if ('password2' not in params or
                params['password2'] is None):
            raise ValueError("Missing the required parameter `password2` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `auth_users_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_create(self, email2, username2, id2, password2, email, username, id, password, **kwargs):  # noqa: E501
        """auth_users_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_create(email2, username2, id2, password2, email, username, id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str username2: (required)
        :param int id2: (required)
        :param str password2: (required)
        :param str email: (required)
        :param str username: (required)
        :param int id: (required)
        :param str password: (required)
        :return: UserCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_create_with_http_info(email2, username2, id2, password2, email, username, id, password, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_create_with_http_info(email2, username2, id2, password2, email, username, id, password, **kwargs)  # noqa: E501
            return data

    def auth_users_create_with_http_info(self, email2, username2, id2, password2, email, username, id, password, **kwargs):  # noqa: E501
        """auth_users_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_create_with_http_info(email2, username2, id2, password2, email, username, id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str username2: (required)
        :param int id2: (required)
        :param str password2: (required)
        :param str email: (required)
        :param str username: (required)
        :param int id: (required)
        :param str password: (required)
        :return: UserCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'username2', 'id2', 'password2', 'email', 'username', 'id', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email2' is set
        if ('email2' not in params or
                params['email2'] is None):
            raise ValueError("Missing the required parameter `email2` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'username2' is set
        if ('username2' not in params or
                params['username2'] is None):
            raise ValueError("Missing the required parameter `username2` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'password2' is set
        if ('password2' not in params or
                params['password2'] is None):
            raise ValueError("Missing the required parameter `password2` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_create`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `auth_users_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_destroy(self, id, **kwargs):  # noqa: E501
        """auth_users_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_destroy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_destroy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_destroy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def auth_users_destroy_with_http_info(self, id, **kwargs):  # noqa: E501
        """auth_users_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_list(self, **kwargs):  # noqa: E501
        """auth_users_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_users_list_with_http_info(self, **kwargs):  # noqa: E501
        """auth_users_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distinct', 'filter', 'page', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'distinct' in params:
            query_params.append(('distinct', params['distinct']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedUserList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_me_destroy(self, **kwargs):  # noqa: E501
        """auth_users_me_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_destroy(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_me_destroy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_me_destroy_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_users_me_destroy_with_http_info(self, **kwargs):  # noqa: E501
        """auth_users_me_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_destroy_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_me_destroy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/me/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_me_partial_update(self, **kwargs):  # noqa: E501
        """auth_users_me_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_partial_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedTeleagronomUser body:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_me_partial_update_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_me_partial_update_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_users_me_partial_update_with_http_info(self, **kwargs):  # noqa: E501
        """auth_users_me_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_partial_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedTeleagronomUser body:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_me_partial_update" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/me/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeleagronomUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_me_partial_update(self, **kwargs):  # noqa: E501
        """auth_users_me_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_partial_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2:
        :param int id2:
        :param str username2:
        :param int region2:
        :param str phone2:
        :param str about2:
        :param list[str] groups2:
        :param str email:
        :param int id:
        :param str username:
        :param int region:
        :param str phone:
        :param str about:
        :param list[str] groups:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_me_partial_update_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_me_partial_update_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_users_me_partial_update_with_http_info(self, **kwargs):  # noqa: E501
        """auth_users_me_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_partial_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2:
        :param int id2:
        :param str username2:
        :param int region2:
        :param str phone2:
        :param str about2:
        :param list[str] groups2:
        :param str email:
        :param int id:
        :param str username:
        :param int region:
        :param str phone:
        :param str about:
        :param list[str] groups:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'id2', 'username2', 'region2', 'phone2', 'about2', 'groups2', 'email', 'id', 'username', 'region', 'phone', 'about', 'groups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_me_partial_update" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/me/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeleagronomUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_me_partial_update(self, **kwargs):  # noqa: E501
        """auth_users_me_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_partial_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2:
        :param int id2:
        :param str username2:
        :param int region2:
        :param str phone2:
        :param str about2:
        :param list[str] groups2:
        :param str email:
        :param int id:
        :param str username:
        :param int region:
        :param str phone:
        :param str about:
        :param list[str] groups:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_me_partial_update_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_me_partial_update_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_users_me_partial_update_with_http_info(self, **kwargs):  # noqa: E501
        """auth_users_me_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_partial_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2:
        :param int id2:
        :param str username2:
        :param int region2:
        :param str phone2:
        :param str about2:
        :param list[str] groups2:
        :param str email:
        :param int id:
        :param str username:
        :param int region:
        :param str phone:
        :param str about:
        :param list[str] groups:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'id2', 'username2', 'region2', 'phone2', 'about2', 'groups2', 'email', 'id', 'username', 'region', 'phone', 'about', 'groups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_me_partial_update" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/me/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeleagronomUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_me_retrieve(self, **kwargs):  # noqa: E501
        """auth_users_me_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_me_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_me_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_users_me_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """auth_users_me_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_me_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/me/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeleagronomUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_me_update(self, **kwargs):  # noqa: E501
        """auth_users_me_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TeleagronomUser body:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_me_update_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_me_update_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_users_me_update_with_http_info(self, **kwargs):  # noqa: E501
        """auth_users_me_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TeleagronomUser body:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_me_update" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/me/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeleagronomUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_me_update(self, **kwargs):  # noqa: E501
        """auth_users_me_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2:
        :param int id2:
        :param str username2:
        :param int region2:
        :param str phone2:
        :param str about2:
        :param list[str] groups2:
        :param str email:
        :param int id:
        :param str username:
        :param int region:
        :param str phone:
        :param str about:
        :param list[str] groups:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_me_update_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_me_update_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_users_me_update_with_http_info(self, **kwargs):  # noqa: E501
        """auth_users_me_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2:
        :param int id2:
        :param str username2:
        :param int region2:
        :param str phone2:
        :param str about2:
        :param list[str] groups2:
        :param str email:
        :param int id:
        :param str username:
        :param int region:
        :param str phone:
        :param str about:
        :param list[str] groups:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'id2', 'username2', 'region2', 'phone2', 'about2', 'groups2', 'email', 'id', 'username', 'region', 'phone', 'about', 'groups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_me_update" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/me/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeleagronomUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_me_update(self, **kwargs):  # noqa: E501
        """auth_users_me_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2:
        :param int id2:
        :param str username2:
        :param int region2:
        :param str phone2:
        :param str about2:
        :param list[str] groups2:
        :param str email:
        :param int id:
        :param str username:
        :param int region:
        :param str phone:
        :param str about:
        :param list[str] groups:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_me_update_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_me_update_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_users_me_update_with_http_info(self, **kwargs):  # noqa: E501
        """auth_users_me_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_me_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2:
        :param int id2:
        :param str username2:
        :param int region2:
        :param str phone2:
        :param str about2:
        :param list[str] groups2:
        :param str email:
        :param int id:
        :param str username:
        :param int region:
        :param str phone:
        :param str about:
        :param list[str] groups:
        :return: TeleagronomUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'id2', 'username2', 'region2', 'phone2', 'about2', 'groups2', 'email', 'id', 'username', 'region', 'phone', 'about', 'groups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_me_update" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'region' in params:
            form_params.append(('region', params['region']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'about' in params:
            form_params.append(('about', params['about']))  # noqa: E501
        if 'groups' in params:
            form_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/me/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeleagronomUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_partial_update(self, id, **kwargs):  # noqa: E501
        """auth_users_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param PatchedUser body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def auth_users_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """auth_users_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param PatchedUser body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_partial_update(self, id, **kwargs):  # noqa: E501
        """auth_users_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param str email2:
        :param int id2:
        :param str username2:
        :param str email:
        :param int id2:
        :param str username:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def auth_users_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """auth_users_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param str email2:
        :param int id2:
        :param str username2:
        :param str email:
        :param int id2:
        :param str username:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'email2', 'id2', 'username2', 'email', 'id2', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_partial_update(self, id, **kwargs):  # noqa: E501
        """auth_users_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param str email2:
        :param int id2:
        :param str username2:
        :param str email:
        :param int id2:
        :param str username:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def auth_users_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """auth_users_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param str email2:
        :param int id2:
        :param str username2:
        :param str email:
        :param int id2:
        :param str username:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'email2', 'id2', 'username2', 'email', 'id2', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_resend_activation_create(self, body, **kwargs):  # noqa: E501
        """auth_users_resend_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_resend_activation_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendEmailReset body: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_resend_activation_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_resend_activation_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_users_resend_activation_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_users_resend_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_resend_activation_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendEmailReset body: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_resend_activation_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_users_resend_activation_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/resend_activation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendEmailReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_resend_activation_create(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_resend_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_resend_activation_create(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_resend_activation_create_with_http_info(email2, email, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_resend_activation_create_with_http_info(email2, email, **kwargs)  # noqa: E501
            return data

    def auth_users_resend_activation_create_with_http_info(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_resend_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_resend_activation_create_with_http_info(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_resend_activation_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email2' is set
        if ('email2' not in params or
                params['email2'] is None):
            raise ValueError("Missing the required parameter `email2` when calling `auth_users_resend_activation_create`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `auth_users_resend_activation_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/resend_activation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendEmailReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_resend_activation_create(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_resend_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_resend_activation_create(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_resend_activation_create_with_http_info(email2, email, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_resend_activation_create_with_http_info(email2, email, **kwargs)  # noqa: E501
            return data

    def auth_users_resend_activation_create_with_http_info(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_resend_activation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_resend_activation_create_with_http_info(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_resend_activation_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email2' is set
        if ('email2' not in params or
                params['email2'] is None):
            raise ValueError("Missing the required parameter `email2` when calling `auth_users_resend_activation_create`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `auth_users_resend_activation_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/resend_activation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendEmailReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_password_confirm_create(self, body, **kwargs):  # noqa: E501
        """auth_users_reset_password_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_confirm_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordResetConfirm body: (required)
        :return: PasswordResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_password_confirm_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_password_confirm_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_password_confirm_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_users_reset_password_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_confirm_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordResetConfirm body: (required)
        :return: PasswordResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_password_confirm_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_password_confirm/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PasswordResetConfirm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_password_confirm_create(self, uid2, token2, new_password2, uid, token, new_password, **kwargs):  # noqa: E501
        """auth_users_reset_password_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_confirm_create(uid2, token2, new_password2, uid, token, new_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid2: (required)
        :param str token2: (required)
        :param str new_password2: (required)
        :param str uid: (required)
        :param str token: (required)
        :param str new_password: (required)
        :return: PasswordResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_password_confirm_create_with_http_info(uid2, token2, new_password2, uid, token, new_password, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_password_confirm_create_with_http_info(uid2, token2, new_password2, uid, token, new_password, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_password_confirm_create_with_http_info(self, uid2, token2, new_password2, uid, token, new_password, **kwargs):  # noqa: E501
        """auth_users_reset_password_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_confirm_create_with_http_info(uid2, token2, new_password2, uid, token, new_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid2: (required)
        :param str token2: (required)
        :param str new_password2: (required)
        :param str uid: (required)
        :param str token: (required)
        :param str new_password: (required)
        :return: PasswordResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid2', 'token2', 'new_password2', 'uid', 'token', 'new_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_password_confirm_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid2' is set
        if ('uid2' not in params or
                params['uid2'] is None):
            raise ValueError("Missing the required parameter `uid2` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'token2' is set
        if ('token2' not in params or
                params['token2'] is None):
            raise ValueError("Missing the required parameter `token2` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'new_password2' is set
        if ('new_password2' not in params or
                params['new_password2'] is None):
            raise ValueError("Missing the required parameter `new_password2` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'new_password' is set
        if ('new_password' not in params or
                params['new_password'] is None):
            raise ValueError("Missing the required parameter `new_password` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_password_confirm/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PasswordResetConfirm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_password_confirm_create(self, uid2, token2, new_password2, uid, token, new_password, **kwargs):  # noqa: E501
        """auth_users_reset_password_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_confirm_create(uid2, token2, new_password2, uid, token, new_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid2: (required)
        :param str token2: (required)
        :param str new_password2: (required)
        :param str uid: (required)
        :param str token: (required)
        :param str new_password: (required)
        :return: PasswordResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_password_confirm_create_with_http_info(uid2, token2, new_password2, uid, token, new_password, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_password_confirm_create_with_http_info(uid2, token2, new_password2, uid, token, new_password, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_password_confirm_create_with_http_info(self, uid2, token2, new_password2, uid, token, new_password, **kwargs):  # noqa: E501
        """auth_users_reset_password_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_confirm_create_with_http_info(uid2, token2, new_password2, uid, token, new_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid2: (required)
        :param str token2: (required)
        :param str new_password2: (required)
        :param str uid: (required)
        :param str token: (required)
        :param str new_password: (required)
        :return: PasswordResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid2', 'token2', 'new_password2', 'uid', 'token', 'new_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_password_confirm_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid2' is set
        if ('uid2' not in params or
                params['uid2'] is None):
            raise ValueError("Missing the required parameter `uid2` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'token2' is set
        if ('token2' not in params or
                params['token2'] is None):
            raise ValueError("Missing the required parameter `token2` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'new_password2' is set
        if ('new_password2' not in params or
                params['new_password2'] is None):
            raise ValueError("Missing the required parameter `new_password2` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501
        # verify the required parameter 'new_password' is set
        if ('new_password' not in params or
                params['new_password'] is None):
            raise ValueError("Missing the required parameter `new_password` when calling `auth_users_reset_password_confirm_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_password_confirm/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PasswordResetConfirm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_password_create(self, body, **kwargs):  # noqa: E501
        """auth_users_reset_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendEmailReset body: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_password_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_password_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_password_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_users_reset_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendEmailReset body: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_password_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_users_reset_password_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendEmailReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_password_create(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_reset_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_create(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_password_create_with_http_info(email2, email, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_password_create_with_http_info(email2, email, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_password_create_with_http_info(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_reset_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_create_with_http_info(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_password_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email2' is set
        if ('email2' not in params or
                params['email2'] is None):
            raise ValueError("Missing the required parameter `email2` when calling `auth_users_reset_password_create`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `auth_users_reset_password_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendEmailReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_password_create(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_reset_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_create(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_password_create_with_http_info(email2, email, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_password_create_with_http_info(email2, email, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_password_create_with_http_info(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_reset_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_password_create_with_http_info(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_password_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email2' is set
        if ('email2' not in params or
                params['email2'] is None):
            raise ValueError("Missing the required parameter `email2` when calling `auth_users_reset_password_create`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `auth_users_reset_password_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendEmailReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_username_confirm_create(self, body, **kwargs):  # noqa: E501
        """auth_users_reset_username_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_confirm_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsernameResetConfirm body: (required)
        :return: UsernameResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_username_confirm_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_username_confirm_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_username_confirm_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_users_reset_username_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_confirm_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsernameResetConfirm body: (required)
        :return: UsernameResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_username_confirm_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_users_reset_username_confirm_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_username_confirm/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UsernameResetConfirm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_username_confirm_create(self, new_username2, new_username, **kwargs):  # noqa: E501
        """auth_users_reset_username_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_confirm_create(new_username2, new_username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_username2: (required)
        :param str new_username: (required)
        :return: UsernameResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_username_confirm_create_with_http_info(new_username2, new_username, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_username_confirm_create_with_http_info(new_username2, new_username, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_username_confirm_create_with_http_info(self, new_username2, new_username, **kwargs):  # noqa: E501
        """auth_users_reset_username_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_confirm_create_with_http_info(new_username2, new_username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_username2: (required)
        :param str new_username: (required)
        :return: UsernameResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['new_username2', 'new_username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_username_confirm_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'new_username2' is set
        if ('new_username2' not in params or
                params['new_username2'] is None):
            raise ValueError("Missing the required parameter `new_username2` when calling `auth_users_reset_username_confirm_create`")  # noqa: E501
        # verify the required parameter 'new_username' is set
        if ('new_username' not in params or
                params['new_username'] is None):
            raise ValueError("Missing the required parameter `new_username` when calling `auth_users_reset_username_confirm_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_username_confirm/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UsernameResetConfirm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_username_confirm_create(self, new_username2, new_username, **kwargs):  # noqa: E501
        """auth_users_reset_username_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_confirm_create(new_username2, new_username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_username2: (required)
        :param str new_username: (required)
        :return: UsernameResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_username_confirm_create_with_http_info(new_username2, new_username, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_username_confirm_create_with_http_info(new_username2, new_username, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_username_confirm_create_with_http_info(self, new_username2, new_username, **kwargs):  # noqa: E501
        """auth_users_reset_username_confirm_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_confirm_create_with_http_info(new_username2, new_username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_username2: (required)
        :param str new_username: (required)
        :return: UsernameResetConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['new_username2', 'new_username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_username_confirm_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'new_username2' is set
        if ('new_username2' not in params or
                params['new_username2'] is None):
            raise ValueError("Missing the required parameter `new_username2` when calling `auth_users_reset_username_confirm_create`")  # noqa: E501
        # verify the required parameter 'new_username' is set
        if ('new_username' not in params or
                params['new_username'] is None):
            raise ValueError("Missing the required parameter `new_username` when calling `auth_users_reset_username_confirm_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_username_confirm/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UsernameResetConfirm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_username_create(self, body, **kwargs):  # noqa: E501
        """auth_users_reset_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendEmailReset body: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_username_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_username_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_username_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_users_reset_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendEmailReset body: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_username_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_users_reset_username_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_username/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendEmailReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_username_create(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_reset_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_create(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_username_create_with_http_info(email2, email, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_username_create_with_http_info(email2, email, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_username_create_with_http_info(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_reset_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_create_with_http_info(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_username_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email2' is set
        if ('email2' not in params or
                params['email2'] is None):
            raise ValueError("Missing the required parameter `email2` when calling `auth_users_reset_username_create`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `auth_users_reset_username_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_username/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendEmailReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_reset_username_create(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_reset_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_create(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_reset_username_create_with_http_info(email2, email, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_reset_username_create_with_http_info(email2, email, **kwargs)  # noqa: E501
            return data

    def auth_users_reset_username_create_with_http_info(self, email2, email, **kwargs):  # noqa: E501
        """auth_users_reset_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_reset_username_create_with_http_info(email2, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email2: (required)
        :param str email: (required)
        :return: SendEmailReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email2', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_reset_username_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email2' is set
        if ('email2' not in params or
                params['email2'] is None):
            raise ValueError("Missing the required parameter `email2` when calling `auth_users_reset_username_create`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `auth_users_reset_username_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/reset_username/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendEmailReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_retrieve(self, id, **kwargs):  # noqa: E501
        """auth_users_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def auth_users_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """auth_users_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_set_password_create(self, body, **kwargs):  # noqa: E501
        """auth_users_set_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_password_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetPassword body: (required)
        :return: SetPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_set_password_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_set_password_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_users_set_password_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_users_set_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_password_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetPassword body: (required)
        :return: SetPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_set_password_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_users_set_password_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/set_password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetPassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_set_password_create(self, new_password2, current_password2, new_password, current_password, **kwargs):  # noqa: E501
        """auth_users_set_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_password_create(new_password2, current_password2, new_password, current_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_password2: (required)
        :param str current_password2: (required)
        :param str new_password: (required)
        :param str current_password: (required)
        :return: SetPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_set_password_create_with_http_info(new_password2, current_password2, new_password, current_password, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_set_password_create_with_http_info(new_password2, current_password2, new_password, current_password, **kwargs)  # noqa: E501
            return data

    def auth_users_set_password_create_with_http_info(self, new_password2, current_password2, new_password, current_password, **kwargs):  # noqa: E501
        """auth_users_set_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_password_create_with_http_info(new_password2, current_password2, new_password, current_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_password2: (required)
        :param str current_password2: (required)
        :param str new_password: (required)
        :param str current_password: (required)
        :return: SetPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['new_password2', 'current_password2', 'new_password', 'current_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_set_password_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'new_password2' is set
        if ('new_password2' not in params or
                params['new_password2'] is None):
            raise ValueError("Missing the required parameter `new_password2` when calling `auth_users_set_password_create`")  # noqa: E501
        # verify the required parameter 'current_password2' is set
        if ('current_password2' not in params or
                params['current_password2'] is None):
            raise ValueError("Missing the required parameter `current_password2` when calling `auth_users_set_password_create`")  # noqa: E501
        # verify the required parameter 'new_password' is set
        if ('new_password' not in params or
                params['new_password'] is None):
            raise ValueError("Missing the required parameter `new_password` when calling `auth_users_set_password_create`")  # noqa: E501
        # verify the required parameter 'current_password' is set
        if ('current_password' not in params or
                params['current_password'] is None):
            raise ValueError("Missing the required parameter `current_password` when calling `auth_users_set_password_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/set_password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetPassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_set_password_create(self, new_password2, current_password2, new_password, current_password, **kwargs):  # noqa: E501
        """auth_users_set_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_password_create(new_password2, current_password2, new_password, current_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_password2: (required)
        :param str current_password2: (required)
        :param str new_password: (required)
        :param str current_password: (required)
        :return: SetPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_set_password_create_with_http_info(new_password2, current_password2, new_password, current_password, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_set_password_create_with_http_info(new_password2, current_password2, new_password, current_password, **kwargs)  # noqa: E501
            return data

    def auth_users_set_password_create_with_http_info(self, new_password2, current_password2, new_password, current_password, **kwargs):  # noqa: E501
        """auth_users_set_password_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_password_create_with_http_info(new_password2, current_password2, new_password, current_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_password2: (required)
        :param str current_password2: (required)
        :param str new_password: (required)
        :param str current_password: (required)
        :return: SetPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['new_password2', 'current_password2', 'new_password', 'current_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_set_password_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'new_password2' is set
        if ('new_password2' not in params or
                params['new_password2'] is None):
            raise ValueError("Missing the required parameter `new_password2` when calling `auth_users_set_password_create`")  # noqa: E501
        # verify the required parameter 'current_password2' is set
        if ('current_password2' not in params or
                params['current_password2'] is None):
            raise ValueError("Missing the required parameter `current_password2` when calling `auth_users_set_password_create`")  # noqa: E501
        # verify the required parameter 'new_password' is set
        if ('new_password' not in params or
                params['new_password'] is None):
            raise ValueError("Missing the required parameter `new_password` when calling `auth_users_set_password_create`")  # noqa: E501
        # verify the required parameter 'current_password' is set
        if ('current_password' not in params or
                params['current_password'] is None):
            raise ValueError("Missing the required parameter `current_password` when calling `auth_users_set_password_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501
        if 'new_password' in params:
            form_params.append(('new_password', params['new_password']))  # noqa: E501
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/set_password/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetPassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_set_username_create(self, body, **kwargs):  # noqa: E501
        """auth_users_set_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_username_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetUsername body: (required)
        :return: SetUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_set_username_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_set_username_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def auth_users_set_username_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """auth_users_set_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_username_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetUsername body: (required)
        :return: SetUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_set_username_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_users_set_username_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/set_username/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetUsername',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_set_username_create(self, current_password2, new_username2, current_password, new_username, **kwargs):  # noqa: E501
        """auth_users_set_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_username_create(current_password2, new_username2, current_password, new_username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str current_password2: (required)
        :param str new_username2: (required)
        :param str current_password: (required)
        :param str new_username: (required)
        :return: SetUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_set_username_create_with_http_info(current_password2, new_username2, current_password, new_username, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_set_username_create_with_http_info(current_password2, new_username2, current_password, new_username, **kwargs)  # noqa: E501
            return data

    def auth_users_set_username_create_with_http_info(self, current_password2, new_username2, current_password, new_username, **kwargs):  # noqa: E501
        """auth_users_set_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_username_create_with_http_info(current_password2, new_username2, current_password, new_username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str current_password2: (required)
        :param str new_username2: (required)
        :param str current_password: (required)
        :param str new_username: (required)
        :return: SetUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['current_password2', 'new_username2', 'current_password', 'new_username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_set_username_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'current_password2' is set
        if ('current_password2' not in params or
                params['current_password2'] is None):
            raise ValueError("Missing the required parameter `current_password2` when calling `auth_users_set_username_create`")  # noqa: E501
        # verify the required parameter 'new_username2' is set
        if ('new_username2' not in params or
                params['new_username2'] is None):
            raise ValueError("Missing the required parameter `new_username2` when calling `auth_users_set_username_create`")  # noqa: E501
        # verify the required parameter 'current_password' is set
        if ('current_password' not in params or
                params['current_password'] is None):
            raise ValueError("Missing the required parameter `current_password` when calling `auth_users_set_username_create`")  # noqa: E501
        # verify the required parameter 'new_username' is set
        if ('new_username' not in params or
                params['new_username'] is None):
            raise ValueError("Missing the required parameter `new_username` when calling `auth_users_set_username_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/set_username/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetUsername',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_set_username_create(self, current_password2, new_username2, current_password, new_username, **kwargs):  # noqa: E501
        """auth_users_set_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_username_create(current_password2, new_username2, current_password, new_username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str current_password2: (required)
        :param str new_username2: (required)
        :param str current_password: (required)
        :param str new_username: (required)
        :return: SetUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_set_username_create_with_http_info(current_password2, new_username2, current_password, new_username, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_set_username_create_with_http_info(current_password2, new_username2, current_password, new_username, **kwargs)  # noqa: E501
            return data

    def auth_users_set_username_create_with_http_info(self, current_password2, new_username2, current_password, new_username, **kwargs):  # noqa: E501
        """auth_users_set_username_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_set_username_create_with_http_info(current_password2, new_username2, current_password, new_username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str current_password2: (required)
        :param str new_username2: (required)
        :param str current_password: (required)
        :param str new_username: (required)
        :return: SetUsername
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['current_password2', 'new_username2', 'current_password', 'new_username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_set_username_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'current_password2' is set
        if ('current_password2' not in params or
                params['current_password2'] is None):
            raise ValueError("Missing the required parameter `current_password2` when calling `auth_users_set_username_create`")  # noqa: E501
        # verify the required parameter 'new_username2' is set
        if ('new_username2' not in params or
                params['new_username2'] is None):
            raise ValueError("Missing the required parameter `new_username2` when calling `auth_users_set_username_create`")  # noqa: E501
        # verify the required parameter 'current_password' is set
        if ('current_password' not in params or
                params['current_password'] is None):
            raise ValueError("Missing the required parameter `current_password` when calling `auth_users_set_username_create`")  # noqa: E501
        # verify the required parameter 'new_username' is set
        if ('new_username' not in params or
                params['new_username'] is None):
            raise ValueError("Missing the required parameter `new_username` when calling `auth_users_set_username_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501
        if 'current_password' in params:
            form_params.append(('current_password', params['current_password']))  # noqa: E501
        if 'new_username' in params:
            form_params.append(('new_username', params['new_username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/set_username/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetUsername',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_update(self, id, **kwargs):  # noqa: E501
        """auth_users_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param User body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def auth_users_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """auth_users_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param User body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_update(self, id, **kwargs):  # noqa: E501
        """auth_users_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param str email2:
        :param int id2:
        :param str username2:
        :param str email:
        :param int id2:
        :param str username:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def auth_users_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """auth_users_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param str email2:
        :param int id2:
        :param str username2:
        :param str email:
        :param int id2:
        :param str username:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'email2', 'id2', 'username2', 'email', 'id2', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_users_update(self, id, **kwargs):  # noqa: E501
        """auth_users_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param str email2:
        :param int id2:
        :param str username2:
        :param str email:
        :param int id2:
        :param str username:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_users_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_users_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def auth_users_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """auth_users_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_users_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this user. (required)
        :param str email2:
        :param int id2:
        :param str username2:
        :param str email:
        :param int id2:
        :param str username:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'email2', 'id2', 'username2', 'email', 'id2', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_users_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auth_users_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/users/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
