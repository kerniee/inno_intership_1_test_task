# coding: utf-8

"""
    Teleagronom

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class V1progressApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def progress_answer_question_create(self, body, id, **kwargs):  # noqa: E501
        """progress_answer_question_create  # noqa: E501

        Ответ на текущий вопрос определителя пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_answer_question_create(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnswerQuestion body: (required)
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_answer_question_create_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.progress_answer_question_create_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def progress_answer_question_create_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """progress_answer_question_create  # noqa: E501

        Ответ на текущий вопрос определителя пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_answer_question_create_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnswerQuestion body: (required)
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_answer_question_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `progress_answer_question_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `progress_answer_question_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'answer' in params:
            form_params.append(('answer', params['answer']))  # noqa: E501
        if 'answer' in params:
            form_params.append(('answer', params['answer']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/{id}/answer_question/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=dict,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    # def progress_answer_question_create(self, answer2, answer, id, **kwargs):  # noqa: E501
    #     """progress_answer_question_create  # noqa: E501
    #
    #     Ответ на текущий вопрос определителя пользователя  # noqa: E501
    #     This method makes a synchronous HTTP request by default. To make an
    #     asynchronous HTTP request, please pass async_req=True
    #     >>> thread = api.progress_answer_question_create(answer2, answer, id, async_req=True)
    #     >>> result = thread.get()
    #
    #     :param async_req bool
    #     :param int answer2: (required)
    #     :param int answer: (required)
    #     :param int id: A unique integer value identifying this Определитель пользователя. (required)
    #     :return: DeterminantProgress
    #              If the method is called asynchronously,
    #              returns the request thread.
    #     """
    #     kwargs['_return_http_data_only'] = True
    #     if kwargs.get('async_req'):
    #         return self.progress_answer_question_create_with_http_info(answer2, answer, id, **kwargs)  # noqa: E501
    #     else:
    #         (data) = self.progress_answer_question_create_with_http_info(answer2, answer, id, **kwargs)  # noqa: E501
    #         return data
    #
    # def progress_answer_question_create_with_http_info(self, answer2, answer, id, **kwargs):  # noqa: E501
    #     """progress_answer_question_create  # noqa: E501
    #
    #     Ответ на текущий вопрос определителя пользователя  # noqa: E501
    #     This method makes a synchronous HTTP request by default. To make an
    #     asynchronous HTTP request, please pass async_req=True
    #     >>> thread = api.progress_answer_question_create_with_http_info(answer2, answer, id, async_req=True)
    #     >>> result = thread.get()
    #
    #     :param async_req bool
    #     :param int answer2: (required)
    #     :param int answer: (required)
    #     :param int id: A unique integer value identifying this Определитель пользователя. (required)
    #     :return: DeterminantProgress
    #              If the method is called asynchronously,
    #              returns the request thread.
    #     """
    #
    #     all_params = ['answer2', 'answer', 'id']  # noqa: E501
    #     all_params.append('async_req')
    #     all_params.append('_return_http_data_only')
    #     all_params.append('_preload_content')
    #     all_params.append('_request_timeout')
    #
    #     params = locals()
    #     for key, val in six.iteritems(params['kwargs']):
    #         if key not in all_params:
    #             raise TypeError(
    #                 "Got an unexpected keyword argument '%s'"
    #                 " to method progress_answer_question_create" % key
    #             )
    #         params[key] = val
    #     del params['kwargs']
    #     # verify the required parameter 'answer2' is set
    #     if ('answer2' not in params or
    #             params['answer2'] is None):
    #         raise ValueError("Missing the required parameter `answer2` when calling `progress_answer_question_create`")  # noqa: E501
    #     # verify the required parameter 'answer' is set
    #     if ('answer' not in params or
    #             params['answer'] is None):
    #         raise ValueError("Missing the required parameter `answer` when calling `progress_answer_question_create`")  # noqa: E501
    #     # verify the required parameter 'id' is set
    #     if ('id' not in params or
    #             params['id'] is None):
    #         raise ValueError("Missing the required parameter `id` when calling `progress_answer_question_create`")  # noqa: E501
    #
    #     collection_formats = {}
    #
    #     path_params = {}
    #     if 'id' in params:
    #         path_params['id'] = params['id']  # noqa: E501
    #
    #     query_params = []
    #
    #     header_params = {}
    #
    #     form_params = []
    #     local_var_files = {}
    #     if 'answer' in params:
    #         form_params.append(('answer', params['answer']))  # noqa: E501
    #     if 'answer' in params:
    #         form_params.append(('answer', params['answer']))  # noqa: E501
    #
    #     body_params = None
    #     if 'body' in params:
    #         body_params = params['body']
    #     # HTTP header `Accept`
    #     header_params['Accept'] = self.api_client.select_header_accept(
    #         ['application/json'])  # noqa: E501
    #
    #     # HTTP header `Content-Type`
    #     header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
    #         ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501
    #
    #     # Authentication setting
    #     auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501
    #
    #     return self.api_client.call_api(
    #         '/api/v1/determinant/progress/{id}/answer_question/', 'POST',
    #         path_params,
    #         query_params,
    #         header_params,
    #         body=body_params,
    #         post_params=form_params,
    #         files=local_var_files,
    #         response_type='DeterminantProgress',  # noqa: E501
    #         auth_settings=auth_settings,
    #         async_req=params.get('async_req'),
    #         _return_http_data_only=params.get('_return_http_data_only'),
    #         _preload_content=params.get('_preload_content', True),
    #         _request_timeout=params.get('_request_timeout'),
    #         collection_formats=collection_formats)
    #
    # def progress_answer_question_create(self, answer2, answer, id, **kwargs):  # noqa: E501
    #     """progress_answer_question_create  # noqa: E501
    #
    #     Ответ на текущий вопрос определителя пользователя  # noqa: E501
    #     This method makes a synchronous HTTP request by default. To make an
    #     asynchronous HTTP request, please pass async_req=True
    #     >>> thread = api.progress_answer_question_create(answer2, answer, id, async_req=True)
    #     >>> result = thread.get()
    #
    #     :param async_req bool
    #     :param int answer2: (required)
    #     :param int answer: (required)
    #     :param int id: A unique integer value identifying this Определитель пользователя. (required)
    #     :return: DeterminantProgress
    #              If the method is called asynchronously,
    #              returns the request thread.
    #     """
    #     kwargs['_return_http_data_only'] = True
    #     if kwargs.get('async_req'):
    #         return self.progress_answer_question_create_with_http_info(answer2, answer, id, **kwargs)  # noqa: E501
    #     else:
    #         (data) = self.progress_answer_question_create_with_http_info(answer2, answer, id, **kwargs)  # noqa: E501
    #         return data
    #
    # def progress_answer_question_create_with_http_info(self, answer2, answer, id, **kwargs):  # noqa: E501
    #     """progress_answer_question_create  # noqa: E501
    #
    #     Ответ на текущий вопрос определителя пользователя  # noqa: E501
    #     This method makes a synchronous HTTP request by default. To make an
    #     asynchronous HTTP request, please pass async_req=True
    #     >>> thread = api.progress_answer_question_create_with_http_info(answer2, answer, id, async_req=True)
    #     >>> result = thread.get()
    #
    #     :param async_req bool
    #     :param int answer2: (required)
    #     :param int answer: (required)
    #     :param int id: A unique integer value identifying this Определитель пользователя. (required)
    #     :return: DeterminantProgress
    #              If the method is called asynchronously,
    #              returns the request thread.
    #     """
    #
    #     all_params = ['answer2', 'answer', 'id']  # noqa: E501
    #     all_params.append('async_req')
    #     all_params.append('_return_http_data_only')
    #     all_params.append('_preload_content')
    #     all_params.append('_request_timeout')
    #
    #     params = locals()
    #     for key, val in six.iteritems(params['kwargs']):
    #         if key not in all_params:
    #             raise TypeError(
    #                 "Got an unexpected keyword argument '%s'"
    #                 " to method progress_answer_question_create" % key
    #             )
    #         params[key] = val
    #     del params['kwargs']
    #     # verify the required parameter 'answer2' is set
    #     if ('answer2' not in params or
    #             params['answer2'] is None):
    #         raise ValueError("Missing the required parameter `answer2` when calling `progress_answer_question_create`")  # noqa: E501
    #     # verify the required parameter 'answer' is set
    #     if ('answer' not in params or
    #             params['answer'] is None):
    #         raise ValueError("Missing the required parameter `answer` when calling `progress_answer_question_create`")  # noqa: E501
    #     # verify the required parameter 'id' is set
    #     if ('id' not in params or
    #             params['id'] is None):
    #         raise ValueError("Missing the required parameter `id` when calling `progress_answer_question_create`")  # noqa: E501
    #
    #     collection_formats = {}
    #
    #     path_params = {}
    #     if 'id' in params:
    #         path_params['id'] = params['id']  # noqa: E501
    #
    #     query_params = []
    #
    #     header_params = {}
    #
    #     form_params = []
    #     local_var_files = {}
    #     if 'answer' in params:
    #         form_params.append(('answer', params['answer']))  # noqa: E501
    #     if 'answer' in params:
    #         form_params.append(('answer', params['answer']))  # noqa: E501
    #
    #     body_params = None
    #     if 'body' in params:
    #         body_params = params['body']
    #     # HTTP header `Accept`
    #     header_params['Accept'] = self.api_client.select_header_accept(
    #         ['application/json'])  # noqa: E501
    #
    #     # HTTP header `Content-Type`
    #     header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
    #         ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501
    #
    #     # Authentication setting
    #     auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501
    #
    #     return self.api_client.call_api(
    #         '/api/v1/determinant/progress/{id}/answer_question/', 'POST',
    #         path_params,
    #         query_params,
    #         header_params,
    #         body=body_params,
    #         post_params=form_params,
    #         files=local_var_files,
    #         response_type='DeterminantProgress',  # noqa: E501
    #         auth_settings=auth_settings,
    #         async_req=params.get('async_req'),
    #         _return_http_data_only=params.get('_return_http_data_only'),
    #         _preload_content=params.get('_preload_content', True),
    #         _request_timeout=params.get('_request_timeout'),
    #         collection_formats=collection_formats)

    def progress_create(self, determinant, name, user, **kwargs):  # noqa: E501
        """progress_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_create(id2, disease2, determinant2, name2, created_date2, user2, id, disease, determinant, name, created_date, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int determinant: (required)
        :param str name: (required)
        :param int user: (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_create_with_http_info(determinant, name, user, **kwargs)  # noqa: E501
        else:
            (data) = self.progress_create_with_http_info(determinant, name, user, **kwargs)  # noqa: E501
            return data

    def progress_create_with_http_info(self, determinant, name, user, **kwargs):  # noqa: E501
        """progress_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_create_with_http_info(id2, disease2, determinant2, name2, created_date2, user2, id, disease, determinant, name, created_date, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int determinant: (required)
        :param str name: (required)
        :param int user: (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['determinant', 'name', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_create" % key
                )
            params[key] = val
        del params['kwargs']

        if ('determinant' not in params or
                params['determinant'] is None):
            raise ValueError("Missing the required parameter `determinant` when calling `progress_create`")  # noqa: E501
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `progress_create`")  # noqa: E501
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `progress_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'disease' in params:
            form_params.append(('disease', params['disease']))  # noqa: E501
        if 'determinant' in params:
            form_params.append(('determinant', params['determinant']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'created_date' in params:
            form_params.append(('created_date', params['created_date']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'disease' in params:
            form_params.append(('disease', params['disease']))  # noqa: E501
        if 'determinant' in params:
            form_params.append(('determinant', params['determinant']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'created_date' in params:
            form_params.append(('created_date', params['created_date']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/', 'POST',
            path_params,
            query_params,
            header_params,
            body=dict(form_params),
            files=local_var_files,
            response_type='DeterminantProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def progress_current_item_retrieve(self, id, **kwargs):  # noqa: E501
        """progress_current_item_retrieve  # noqa: E501

        Текущий пункт  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_current_item_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_current_item_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.progress_current_item_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def progress_current_item_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """progress_current_item_retrieve  # noqa: E501

        Текущий пункт  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_current_item_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_current_item_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `progress_current_item_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/{id}/current_item/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=dict,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def progress_destroy(self, id, **kwargs):  # noqa: E501
        """progress_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_destroy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_destroy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.progress_destroy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def progress_destroy_with_http_info(self, id, **kwargs):  # noqa: E501
        """progress_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `progress_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def progress_list(self, **kwargs):  # noqa: E501
        """progress_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedDeterminantProgressList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.progress_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def progress_list_with_http_info(self, **kwargs):  # noqa: E501
        """progress_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distinct: Example: ?distinct
        :param str filter: ?filter={\"id\":1}&filter={\"id\":[1,2,9],\"text\":[\"any\",\"text\"]}
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str sort: Example: ?sort=[\"id\",\"ASC\"]&sort=[\"name\",\"DESC\"]&sort=[\"title\"] default: DESC
        :return: PaginatedDeterminantProgressList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distinct', 'filter', 'page', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'distinct' in params:
            query_params.append(('distinct', params['distinct']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedDeterminantProgressList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def progress_question_history_retrieve(self, id, **kwargs):  # noqa: E501
        """progress_question_history_retrieve  # noqa: E501

        Вопросы на которые был дан ответ  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_question_history_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_question_history_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.progress_question_history_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def progress_question_history_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """progress_question_history_retrieve  # noqa: E501

        Вопросы на которые был дан ответ  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_question_history_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_question_history_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `progress_question_history_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/{id}/question_history/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeterminantProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def progress_reanswer_question_create(self, body, id, **kwargs):  # noqa: E501
        """progress_reanswer_question_create  # noqa: E501

        Ответить заново на уже отвеченный вопрос  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_reanswer_question_create(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReanswerQuestion body: (required)
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_reanswer_question_create_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.progress_reanswer_question_create_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def progress_reanswer_question_create_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """progress_reanswer_question_create  # noqa: E501

        Ответить заново на уже отвеченный вопрос  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_reanswer_question_create_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReanswerQuestion body: (required)
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_reanswer_question_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `progress_reanswer_question_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `progress_reanswer_question_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question' in params:
            form_params.append(('question', params['question']))  # noqa: E501
        if 'answer' in params:
            form_params.append(('answer', params['answer']))  # noqa: E501
        if 'question' in params:
            form_params.append(('question', params['question']))  # noqa: E501
        if 'answer' in params:
            form_params.append(('answer', params['answer']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/{id}/reanswer_question/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeterminantProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def progress_reanswer_question_create(self, question2, answer2, question, answer, id, **kwargs):  # noqa: E501
        """progress_reanswer_question_create  # noqa: E501

        Ответить заново на уже отвеченный вопрос  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_reanswer_question_create(question2, answer2, question, answer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int question2: (required)
        :param int answer2: (required)
        :param int question: (required)
        :param int answer: (required)
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_reanswer_question_create_with_http_info(question2, answer2, question, answer, id, **kwargs)  # noqa: E501
        else:
            (data) = self.progress_reanswer_question_create_with_http_info(question2, answer2, question, answer, id, **kwargs)  # noqa: E501
            return data

    def progress_reanswer_question_create_with_http_info(self, question2, answer2, question, answer, id, **kwargs):  # noqa: E501
        """progress_reanswer_question_create  # noqa: E501

        Ответить заново на уже отвеченный вопрос  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_reanswer_question_create_with_http_info(question2, answer2, question, answer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int question2: (required)
        :param int answer2: (required)
        :param int question: (required)
        :param int answer: (required)
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question2', 'answer2', 'question', 'answer', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_reanswer_question_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question2' is set
        if ('question2' not in params or
                params['question2'] is None):
            raise ValueError("Missing the required parameter `question2` when calling `progress_reanswer_question_create`")  # noqa: E501
        # verify the required parameter 'answer2' is set
        if ('answer2' not in params or
                params['answer2'] is None):
            raise ValueError("Missing the required parameter `answer2` when calling `progress_reanswer_question_create`")  # noqa: E501
        # verify the required parameter 'question' is set
        if ('question' not in params or
                params['question'] is None):
            raise ValueError("Missing the required parameter `question` when calling `progress_reanswer_question_create`")  # noqa: E501
        # verify the required parameter 'answer' is set
        if ('answer' not in params or
                params['answer'] is None):
            raise ValueError("Missing the required parameter `answer` when calling `progress_reanswer_question_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `progress_reanswer_question_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question' in params:
            form_params.append(('question', params['question']))  # noqa: E501
        if 'answer' in params:
            form_params.append(('answer', params['answer']))  # noqa: E501
        if 'question' in params:
            form_params.append(('question', params['question']))  # noqa: E501
        if 'answer' in params:
            form_params.append(('answer', params['answer']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/{id}/reanswer_question/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeterminantProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def progress_reanswer_question_create(self, question2, answer2, question, answer, id, **kwargs):  # noqa: E501
        """progress_reanswer_question_create  # noqa: E501

        Ответить заново на уже отвеченный вопрос  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_reanswer_question_create(question2, answer2, question, answer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int question2: (required)
        :param int answer2: (required)
        :param int question: (required)
        :param int answer: (required)
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_reanswer_question_create_with_http_info(question2, answer2, question, answer, id, **kwargs)  # noqa: E501
        else:
            (data) = self.progress_reanswer_question_create_with_http_info(question2, answer2, question, answer, id, **kwargs)  # noqa: E501
            return data

    def progress_reanswer_question_create_with_http_info(self, question2, answer2, question, answer, id, **kwargs):  # noqa: E501
        """progress_reanswer_question_create  # noqa: E501

        Ответить заново на уже отвеченный вопрос  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_reanswer_question_create_with_http_info(question2, answer2, question, answer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int question2: (required)
        :param int answer2: (required)
        :param int question: (required)
        :param int answer: (required)
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question2', 'answer2', 'question', 'answer', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_reanswer_question_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question2' is set
        if ('question2' not in params or
                params['question2'] is None):
            raise ValueError("Missing the required parameter `question2` when calling `progress_reanswer_question_create`")  # noqa: E501
        # verify the required parameter 'answer2' is set
        if ('answer2' not in params or
                params['answer2'] is None):
            raise ValueError("Missing the required parameter `answer2` when calling `progress_reanswer_question_create`")  # noqa: E501
        # verify the required parameter 'question' is set
        if ('question' not in params or
                params['question'] is None):
            raise ValueError("Missing the required parameter `question` when calling `progress_reanswer_question_create`")  # noqa: E501
        # verify the required parameter 'answer' is set
        if ('answer' not in params or
                params['answer'] is None):
            raise ValueError("Missing the required parameter `answer` when calling `progress_reanswer_question_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `progress_reanswer_question_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question' in params:
            form_params.append(('question', params['question']))  # noqa: E501
        if 'answer' in params:
            form_params.append(('answer', params['answer']))  # noqa: E501
        if 'question' in params:
            form_params.append(('question', params['question']))  # noqa: E501
        if 'answer' in params:
            form_params.append(('answer', params['answer']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/{id}/reanswer_question/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeterminantProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def progress_retrieve(self, id, **kwargs):  # noqa: E501
        """progress_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.progress_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.progress_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def progress_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """progress_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.progress_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Определитель пользователя. (required)
        :return: DeterminantProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method progress_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `progress_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/determinant/progress/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeterminantProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
